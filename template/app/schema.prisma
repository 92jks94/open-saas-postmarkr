generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String               @id @default(uuid())
  createdAt                     DateTime             @default(now())
  email                         String?              @unique
  username                      String?              @unique
  isAdmin                       Boolean              @default(false)
  hasBetaAccess                 Boolean              @default(false)  // Set by BETA_EMAILS env var
  hasFullAccess                 Boolean              @default(false)  // Upgraded via code
  paymentProcessorUserId        String?              @unique
  subscriptionStatus            String?
  subscriptionPlan              String?
  datePaid                      DateTime?
  credits                       Int                  @default(3)
  contactFormMessages           ContactFormMessage[]
  files                         File[]
  gptResponses                  GptResponse[]
  mailAddresses                 MailAddress[]
  mailPieces                    MailPiece[]
  tasks                         Task[]
  notifications                 Notification[]
  notificationPreferences       NotificationPreferences?
}

model GptResponse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  content   String
  user      User     @relation(fields: [userId], references: [id])
}

model Task {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  userId      String
  description String
  time        String   @default("1")
  isDone      Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
}

model File {
  id               String      @id @default(uuid())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  userId           String
  name             String
  type             String
  key              String
  uploadUrl        String
  size             Int?
  isMailFile       Boolean     @default(false)
  validationStatus String?
  validationError  String?
  pageCount        Int?
  pdfMetadata      Json?
  lastProcessedAt  DateTime?
  user             User        @relation(fields: [userId], references: [id])
  mailPieces       MailPiece[]

  @@index([userId, isMailFile])
  @@index([validationStatus])
}

model DailyStats {
  id                        Int              @id @default(autoincrement())
  date                      DateTime         @unique @default(now())
  totalViews                Int              @default(0)
  prevDayViewsChangePercent String           @default("0")
  userCount                 Int              @default(0)
  paidUserCount             Int              @default(0)
  userDelta                 Int              @default(0)
  paidUserDelta             Int              @default(0)
  totalRevenue              Float            @default(0)
  totalProfit               Float            @default(0)
  sources                   PageViewSource[]
}

model PageViewSource {
  name         String
  date         DateTime    @default(now())
  dailyStatsId Int?
  visitors     Int
  dailyStats   DailyStats? @relation(fields: [dailyStatsId], references: [id])

  @@id([date, name])
}

model Logs {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  message   String
  level     String
}

model ContactFormMessage {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  userId    String
  content   String
  isRead    Boolean   @default(false)
  repliedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model MailAddress {
  id                  String      @id @default(uuid())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  userId              String
  contactName         String
  companyName         String?
  addressLine1        String
  addressLine2        String?
  city                String
  state               String
  postalCode          String
  country             String
  label               String?
  isDefault           Boolean     @default(false)
  addressType         String      @default("both")
  isValidated         Boolean     @default(false)
  validationDate      DateTime?
  validationError     String?
  lobAddressId        String?
  usageCount          Int         @default(0)
  lastUsedAt          DateTime?
  user                User        @relation(fields: [userId], references: [id])
  recipientMailPieces MailPiece[] @relation("MailPieceRecipient")
  senderMailPieces    MailPiece[] @relation("MailPieceSender")

  @@index([userId, addressType])
  @@index([userId, isDefault])
  @@index([postalCode])
  @@index([country])
}

model State {
  id      String @id @default(uuid())
  code    String
  name    String
  country String

  @@unique([code, country])
  @@index([country])
}

model MailPiece {
  id                 String                   @id @default(uuid())
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  userId             String
  mailType           String
  mailClass          String
  mailSize           String
  senderAddressId    String
  recipientAddressId String
  fileId             String?
  lobId              String?
  lobStatus          String?
  lobTrackingNumber  String?
  paymentIntentId    String?
  paymentStatus      String                   @default("pending")
  cost               Float?
  status             String                   @default("draft")
  description        String?
  metadata           Json?
  customerPrice      Float?
  lobCost            Float?
  markup             Float?
  pageCount          Int?
  pricingTier        String?                  // "tier_1" (1-5 pages) or "tier_2" (6-20 pages)
  envelopeType       String?                  // "standard_10_double_window" or "flat_9x12_single_window"
  returnReceipt      Boolean                  @default(false)
  serviceOptions     Json?
  signatureConfirmation Boolean              @default(false)
  trackingEnabled    Boolean                  @default(false)
  // Printing preferences
  colorPrinting      Boolean                  @default(false)  // false = black & white, true = color
  doubleSided        Boolean                  @default(true)   // true = double-sided, false = single-sided
  file               File?                    @relation(fields: [fileId], references: [id])
  recipientAddress   MailAddress              @relation("MailPieceRecipient", fields: [recipientAddressId], references: [id])
  senderAddress      MailAddress              @relation("MailPieceSender", fields: [senderAddressId], references: [id])
  user               User                     @relation(fields: [userId], references: [id])
  statusHistory      MailPieceStatusHistory[]
  notifications      Notification[]

  @@index([userId, status])
  @@index([userId, createdAt])
  @@index([lobId])
  @@index([paymentIntentId])
  @@index([status])
}

model MailPieceStatusHistory {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  mailPieceId    String
  status         String
  previousStatus String?
  description    String?
  source         String    @default("system")
  lobData        Json?
  mailPiece      MailPiece @relation(fields: [mailPieceId], references: [id], onDelete: Cascade)

  @@index([mailPieceId, createdAt])
  @@index([status])
}


model Notification {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  type        String   // mail_status_change, delivery_confirmation, etc.
  title       String
  message     String
  data        Json?
  readAt      DateTime?
  mailPieceId String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mailPiece   MailPiece? @relation(fields: [mailPieceId], references: [id], onDelete: SetNull)

  @@index([userId, readAt])
  @@index([userId, type])
  @@index([userId, createdAt])
  @@index([mailPieceId])
}

model NotificationPreferences {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String   @unique
  emailEnabled        Boolean  @default(true)
  emailStatusChanges  Boolean  @default(true)
  emailDeliveries     Boolean  @default(true)
  emailFailures       Boolean  @default(true)
  emailPayments       Boolean  @default(true)
  inAppEnabled        Boolean  @default(true)
  inAppStatusChanges  Boolean  @default(true)
  inAppDeliveries     Boolean  @default(true)
  inAppFailures       Boolean  @default(true)
  inAppPayments       Boolean  @default(true)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

