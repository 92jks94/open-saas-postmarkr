generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String               @id @default(uuid())
  createdAt                     DateTime             @default(now())
  email                         String?              @unique
  username                      String?              @unique
  isAdmin                       Boolean              @default(false)
  hasBetaAccess                 Boolean              @default(false)  // Deprecated - kept for migration compatibility
  hasFullAccess                 Boolean              @default(false)  // Upgraded via code
  paymentProcessorUserId        String?              @unique
  subscriptionStatus            String?
  subscriptionPlan              String?
  datePaid                      DateTime?
  credits                       Int                  @default(3)
  contactFormMessages           ContactFormMessage[]
  files                         File[]
  // gptResponses                  GptResponse[]  // MOVED TO src/unused/demo-ai-app/
  mailAddresses                 MailAddress[]
  mailPieces                    MailPiece[]
  // tasks                         Task[]  // MOVED TO src/unused/demo-ai-app/
  notifications                 Notification[]
  notificationPreferences       NotificationPreferences?
}

// MOVED TO src/unused/demo-ai-app/ FOR FUTURE USE
// TODO: Re-enable when demo AI features are needed
// model GptResponse {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    String
//   content   String
//   user      User     @relation(fields: [userId], references: [id])
// }

// model Task {
//   id          String   @id @default(uuid())
//   createdAt   DateTime @default(now())
//   userId      String
//   description String
//   time        String   @default("1")
//   isDone      Boolean  @default(false)
//   user        User     @relation(fields: [userId], references: [id])
// }

model File {
  id               String      @id @default(uuid())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  userId           String
  name             String
  type             String
  key              String
  uploadUrl        String
  size             Int?
  isMailFile       Boolean     @default(false)
  validationStatus String?
  validationError  String?
  pageCount        Int?
  pdfMetadata      Json?
  lastProcessedAt  DateTime?
  // Thumbnail storage (S3-based for performance)
  thumbnailKey         String?    // S3 key for thumbnail image (e.g., "thumbnails/user-id/file-id.jpg")
  thumbnailGeneratedAt DateTime?  // When thumbnail was last generated (for cache invalidation)
  // Phase 3: Page selection
  selectedPages    Json?      // { start, end, total, originalFileId }
  extractedFileKey String?    // S3 key for extracted PDF
  user             User        @relation(fields: [userId], references: [id])
  mailPieces       MailPiece[]

  @@index([userId, isMailFile])
  @@index([validationStatus])
}

model DailyStats {
  id                        Int              @id @default(autoincrement())
  date                      DateTime         @unique @default(now())
  totalViews                Int              @default(0)
  prevDayViewsChangePercent String           @default("0")
  userCount                 Int              @default(0)
  paidUserCount             Int              @default(0)
  userDelta                 Int              @default(0)
  paidUserDelta             Int              @default(0)
  totalRevenue              Float            @default(0)
  totalProfit               Float            @default(0)
  sources                   PageViewSource[]
}

model PageViewSource {
  name                String
  date                DateTime    @default(now())
  dailyStatsId        Int?
  visitors            Int
  conversionRate      Float?      // Enhanced metric: conversion rate percentage
  qualityScore        Float?      // Enhanced metric: quality score (0-10)
  revenuePerVisitor   Float?      // Enhanced metric: revenue per visitor
  trendDirection      String?     // Enhanced metric: 'up', 'down', 'stable'
  trendPercentage     Float?      // Enhanced metric: trend percentage
  lastActivity        DateTime?   // Enhanced metric: last activity timestamp
  dailyStats          DailyStats? @relation(fields: [dailyStatsId], references: [id])

  @@id([date, name])
}

model Logs {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  message   String
  level     String
}

model ContactFormMessage {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  userId    String
  content   String
  isRead    Boolean   @default(false)
  repliedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model MailAddress {
  id                  String      @id @default(uuid())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  userId              String
  contactName         String
  companyName         String?
  address_line1       String      // Changed from addressLine1 to match Lob API
  address_line2       String?     // Changed from addressLine2 to match Lob API
  address_city        String      // Changed from city to match Lob API
  address_state       String      // Changed from state to match Lob API
  address_zip         String      // Changed from postalCode to match Lob API
  address_country     String      // Changed from country to match Lob API
  label               String?
  isDefault           Boolean     @default(false)
  addressType         String      @default("both")
  isValidated         Boolean     @default(false)
  validationDate      DateTime?
  validationError     String?
  lobAddressId        String?
  usageCount          Int         @default(0)
  lastUsedAt          DateTime?
  user                User        @relation(fields: [userId], references: [id])
  recipientMailPieces MailPiece[] @relation("MailPieceRecipient")
  senderMailPieces    MailPiece[] @relation("MailPieceSender")

  @@index([userId, addressType])
  @@index([userId, isDefault])
  @@index([address_zip])
  @@index([address_country])
}

model State {
  id      String @id @default(uuid())
  code    String
  name    String
  country String

  @@unique([code, country])
  @@index([country])
}

enum AddressPlacement {
  TOP_FIRST_PAGE
  INSERT_BLANK_PAGE
}

model MailPiece {
  id                 String                   @id @default(uuid())
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  userId             String
  mailType           String
  mailClass          String
  mailSize           String
  senderAddressId    String
  recipientAddressId String
  fileId             String?
  lobId              String?
  lobStatus          String?
  lobTrackingNumber  String?
  paymentIntentId    String?
  paymentStatus      String                   @default("pending")
  cost               Float?
  status             String                   @default("draft")
  description        String?
  metadata           Json?
  customerPrice      Float?
  lobCost            Float?
  markup             Float?
  pageCount          Int?
  pricingTier        String?                  // "tier_1" (1-5 pages) or "tier_2" (6-20 pages)
  envelopeType       String?                  // "standard_10_double_window" or "flat_9x12_single_window"
  returnReceipt      Boolean                  @default(false)
  serviceOptions     Json?
  signatureConfirmation Boolean              @default(false)
  trackingEnabled    Boolean                  @default(false)
  // Printing preferences
  colorPrinting      Boolean                  @default(false)  // false = black & white, true = color
  doubleSided        Boolean                  @default(true)   // true = double-sided, false = single-sided
  addressPlacement   AddressPlacement         @default(INSERT_BLANK_PAGE)
  // Preview URLs from Lob
  lobThumbnails      Json?                    // Array of thumbnail URLs generated by Lob (string[])
  lobPreviewUrl      String?                  // Direct URL to view mail piece in Lob dashboard
  file               File?                    @relation(fields: [fileId], references: [id])
  recipientAddress   MailAddress              @relation("MailPieceRecipient", fields: [recipientAddressId], references: [id])
  senderAddress      MailAddress              @relation("MailPieceSender", fields: [senderAddressId], references: [id])
  user               User                     @relation(fields: [userId], references: [id])
  statusHistory      MailPieceStatusHistory[]
  notifications      Notification[]

  @@index([userId, status])
  @@index([userId, createdAt])
  @@index([lobId])
  @@index([paymentIntentId])
  @@index([status])
}

model MailPieceStatusHistory {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  mailPieceId    String
  status         String
  previousStatus String?
  description    String?
  source         String    @default("system")
  lobData        Json?
  mailPiece      MailPiece @relation(fields: [mailPieceId], references: [id], onDelete: Cascade)

  @@index([mailPieceId, createdAt])
  @@index([status])
}


model Notification {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  type        String   // mail_status_change, delivery_confirmation, etc.
  title       String
  message     String
  data        Json?
  readAt      DateTime?
  mailPieceId String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mailPiece   MailPiece? @relation(fields: [mailPieceId], references: [id], onDelete: SetNull)

  @@index([userId, readAt])
  @@index([userId, type])
  @@index([userId, createdAt])
  @@index([mailPieceId])
}

model NotificationPreferences {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String   @unique
  emailEnabled        Boolean  @default(true)
  emailStatusChanges  Boolean  @default(true)
  emailDeliveries     Boolean  @default(true)
  emailFailures       Boolean  @default(true)
  emailPayments       Boolean  @default(true)
  inAppEnabled        Boolean  @default(true)
  inAppStatusChanges  Boolean  @default(true)
  inAppDeliveries     Boolean  @default(true)
  inAppFailures       Boolean  @default(true)
  inAppPayments       Boolean  @default(true)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AppSettings {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)

  @@index([key])
}

model WebhookMetrics {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  source                String   // 'lob' or 'stripe'
  totalEvents           Int      @default(0)
  successfulEvents      Int      @default(0)
  failedEvents          Int      @default(0)
  averageProcessingTime Float    @default(0)
  eventsByType          Json     @default("{}")
  lastProcessedAt       DateTime?

  @@index([source, updatedAt])
}

