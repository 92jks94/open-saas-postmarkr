name: Deploy Wasp App to Fly.io

on:
  push:
    branches: [ saas-template-nathan-now-postmarkr, main ]
    paths:
      - 'src/**'
      - 'main.wasp'
      - 'schema.prisma'
      - 'package.json'
      - 'package-lock.json'
      - 'fly-*.toml'
  workflow_dispatch:

env:
  WASP_TELEMETRY_DISABLE: 1
  WASP_VERSION: 0.18.0

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üêù Install Wasp
      run: |
        curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v ${{ env.WASP_VERSION }}
        echo "$HOME/.wasp/bin" >> $GITHUB_PATH

    - name: ‚úÖ Verify Wasp installation
      run: wasp version

    - name: ‚úàÔ∏è Setup Fly.io CLI
      uses: superfly/flyctl-actions/setup-flyctl@master

    - name: üîê Authenticate with Fly.io
      run: flyctl auth token ${{ secrets.FLY_API_TOKEN }}
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    - name: üöÄ Deploy with Wasp
      run: |
        echo "üöÄ Starting Wasp deployment..."
        echo "üì¶ Wasp will build and deploy both server and client automatically"
        echo "üìç Server app: postmarkr-server-server"
        echo "üìç Client app: postmarkr-server-client"
        wasp deploy fly deploy
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    - name: ‚è≥ Wait for deployment to stabilize
      run: sleep 30

    - name: üè• Health checks
      run: |
        echo "üîç Checking deployment health..."
        
        SERVER_URL="https://postmarkr-server-server.fly.dev"
        CLIENT_URL="https://postmarkr-server-client.fly.dev"
        
        echo "Checking server health..."
        if curl -sf "$SERVER_URL/health/simple" > /dev/null; then
          echo "‚úÖ Server is healthy"
        else
          echo "‚ö†Ô∏è Server health check failed"
          flyctl logs -a postmarkr-server-server --limit 50
          exit 1
        fi
        
        echo "Checking client..."
        if curl -sf "$CLIENT_URL" > /dev/null; then
          echo "‚úÖ Client is accessible"
        else
          echo "‚ö†Ô∏è Client check failed"
          flyctl logs -a postmarkr-server-client --limit 50
          exit 1
        fi

    - name: üìä Show deployment status
      if: always()
      run: |
        echo "üìä Checking Fly.io app status..."
        flyctl status -a postmarkr-server-server || echo "Server status unavailable"
        flyctl status -a postmarkr-server-client || echo "Client status unavailable"

    - name: üìù Generate deployment summary
      if: always()
      run: |
        echo "# üöÄ Wasp Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üåê Deployed Applications" >> $GITHUB_STEP_SUMMARY
        echo "- üñ•Ô∏è **Server:** https://postmarkr-server-server.fly.dev" >> $GITHUB_STEP_SUMMARY
        echo "- üåç **Client:** https://postmarkr-server-client.fly.dev" >> $GITHUB_STEP_SUMMARY
        echo "- ‚ù§Ô∏è **Health Check:** https://postmarkr-server-server.fly.dev/health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìù Quick Commands" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# View server logs" >> $GITHUB_STEP_SUMMARY
        echo "flyctl logs -a postmarkr-server-server" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# View client logs" >> $GITHUB_STEP_SUMMARY
        echo "flyctl logs -a postmarkr-server-client" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Check server status" >> $GITHUB_STEP_SUMMARY
        echo "flyctl status -a postmarkr-server-server" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Check client status" >> $GITHUB_STEP_SUMMARY
        echo "flyctl status -a postmarkr-server-client" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: ‚ùå Show logs on failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed! Showing recent logs..."
        echo "=== SERVER LOGS ==="
        flyctl logs -a postmarkr-server-server --limit 100 || echo "Could not fetch server logs"
        echo ""
        echo "=== CLIENT LOGS ==="
        flyctl logs -a postmarkr-server-client --limit 100 || echo "Could not fetch client logs"
