name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-that-is-at-least-32-characters-long" >> .env.test
        echo "WASP_WEB_CLIENT_URL=http://localhost:3000" >> .env.test
        echo "WASP_SERVER_URL=http://localhost:3001" >> .env.test
        echo "STRIPE_SECRET_KEY=sk_test_123456789" >> .env.test
        echo "STRIPE_PUBLISHABLE_KEY=pk_test_123456789" >> .env.test
        echo "STRIPE_WEBHOOK_SECRET=whsec_test_123456789" >> .env.test
        echo "SENDGRID_API_KEY=SG.test-key" >> .env.test
        echo "SENDGRID_FROM_EMAIL=test@example.com" >> .env.test
        echo "SENDGRID_FROM_NAME=Test App" >> .env.test
        echo "LOB_PROD_KEY=test_lob_key" >> .env.test
        echo "LOB_ENVIRONMENT=test" >> .env.test
        echo "LOB_WEBHOOK_SECRET=test-webhook-secret" >> .env.test
        echo "AWS_ACCESS_KEY_ID=test-aws-key" >> .env.test
        echo "AWS_SECRET_ACCESS_KEY=test-aws-secret" >> .env.test
        echo "AWS_REGION=us-east-1" >> .env.test
        echo "AWS_S3_BUCKET=test-bucket" >> .env.test
        echo "SENTRY_DSN=https://test@sentry.io/test" >> .env.test
        echo "SENTRY_RELEASE=test-release" >> .env.test
        echo "SENTRY_SERVER_NAME=test-server" >> .env.test

    - name: Run critical tests
      run: npm run test:critical-only
      env:
        NODE_ENV: test

    - name: Run integration tests
      run: npm run test:integration-only
      env:
        NODE_ENV: test

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test

    - name: Run test coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run performance tests
      run: npm run test:performance-only
      env:
        NODE_ENV: test
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
        retention-days: 30

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run E2E tests
      run: |
        cd e2e-tests
        npm ci
        npm run e2e:playwright
      env:
        NODE_ENV: test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: e2e-tests/test-results/
        retention-days: 30

  security-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run dependency check
      run: npx audit-ci --config audit-ci.json
      continue-on-error: true

  test-summary:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, security-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results-20.x
        path: test-results/

    - name: Generate test summary
      run: |
        echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "test-results/test-report.json" ]; then
          echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "✅ E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the artifacts for detailed coverage reports." >> $GITHUB_STEP_SUMMARY
