datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                            String               @id @default(uuid())
  createdAt                     DateTime             @default(now())
  email                         String?              @unique
  username                      String?              @unique
  isAdmin                       Boolean              @default(false)
  paymentProcessorUserId        String?              @unique
  lemonSqueezyCustomerPortalUrl String?
  subscriptionStatus            String?
  subscriptionPlan              String?
  datePaid                      DateTime?
  credits                       Int                  @default(3)
  gptResponses                  GptResponse[]
  contactFormMessages           ContactFormMessage[]
  tasks                         Task[]
  files                         File[]
  mailAddresses                 MailAddress[]
  mailPieces                    MailPiece[]
  auth                          Auth?
}

model GptResponse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
}

model Task {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  description String
  time        String   @default("1")
  isDone      Boolean  @default(false)
}

model File {
  id               String      @id @default(uuid())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  user             User        @relation(fields: [userId], references: [id])
  userId           String
  name             String
  type             String
  key              String
  uploadUrl        String
  size             Int?
  isMailFile       Boolean     @default(false)
  validationStatus String?
  validationError  String?
  pageCount        Int?
  pdfMetadata      Json?
  lastProcessedAt  DateTime?
  mailPieces       MailPiece[]

  @@index([userId, isMailFile])
  @@index([validationStatus])
}

model DailyStats {
  id                        Int              @id @default(autoincrement())
  date                      DateTime         @unique @default(now())
  totalViews                Int              @default(0)
  prevDayViewsChangePercent String           @default("0")
  userCount                 Int              @default(0)
  paidUserCount             Int              @default(0)
  userDelta                 Int              @default(0)
  paidUserDelta             Int              @default(0)
  totalRevenue              Float            @default(0)
  totalProfit               Float            @default(0)
  sources                   PageViewSource[]
}

model PageViewSource {
  name         String
  date         DateTime    @default(now())
  dailyStats   DailyStats? @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId Int?
  visitors     Int

  @@id([date, name])
}

model Logs {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  message   String
  level     String
}

model ContactFormMessage {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  content   String
  isRead    Boolean   @default(false)
  repliedAt DateTime?
}

model MailAddress {
  id                  String      @id @default(uuid())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  user                User        @relation(fields: [userId], references: [id])
  userId              String
  contactName         String
  companyName         String?
  addressLine1        String
  addressLine2        String?
  city                String
  state               String
  postalCode          String
  country             String
  label               String?
  isDefault           Boolean     @default(false)
  addressType         String      @default("both")
  isValidated         Boolean     @default(false)
  validationDate      DateTime?
  validationError     String?
  lobAddressId        String?
  usageCount          Int         @default(0)
  lastUsedAt          DateTime?
  senderMailPieces    MailPiece[] @relation("MailPieceSender")
  recipientMailPieces MailPiece[] @relation("MailPieceRecipient")

  @@index([userId, addressType])
  @@index([userId, isDefault])
  @@index([postalCode])
  @@index([country])
}

model State {
  id      String @id @default(uuid())
  code    String
  name    String
  country String

  @@unique([code, country])
  @@index([country])
}

model MailPiece {
  id                 String                   @id @default(uuid())
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  user               User                     @relation(fields: [userId], references: [id])
  userId             String
  mailType           String
  mailClass          String
  mailSize           String
  senderAddress      MailAddress              @relation("MailPieceSender", fields: [senderAddressId], references: [id])
  senderAddressId    String
  recipientAddress   MailAddress              @relation("MailPieceRecipient", fields: [recipientAddressId], references: [id])
  recipientAddressId String
  file               File?                    @relation(fields: [fileId], references: [id])
  fileId             String?
  lobId              String?
  lobStatus          String?
  lobTrackingNumber  String?
  paymentIntentId    String?
  paymentStatus      String                   @default("pending")
  cost               Float?
  status             String                   @default("draft")
  description        String?
  metadata           Json?
  statusHistory      MailPieceStatusHistory[]

  @@index([userId, status])
  @@index([userId, createdAt])
  @@index([lobId])
  @@index([paymentIntentId])
  @@index([status])
}

model MailPieceStatusHistory {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  mailPiece      MailPiece @relation(fields: [mailPieceId], references: [id], onDelete: Cascade)
  mailPieceId    String
  status         String
  previousStatus String?
  description    String?
  source         String    @default("system")
  lobData        Json?

  @@index([mailPieceId, createdAt])
  @@index([status])
}

model Auth {
  id         String         @id @default(uuid())
  userId     String?        @unique
  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  identities AuthIdentity[]
  sessions   Session[]
}

model AuthIdentity {
  providerName   String
  providerUserId String
  providerData   String @default("{}")
  authId         String
  auth           Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)

  @@id([providerName, providerUserId])
}

model Session {
  id        String   @id @unique
  expiresAt DateTime
  userId    String
  auth      Auth     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}
