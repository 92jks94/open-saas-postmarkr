{"version":3,"file":"server.js","sources":["../../sdk/wasp/dist/universal/ansiColors.js","../../sdk/wasp/dist/env/validation.js","../../sdk/wasp/dist/server/env.js","../../sdk/wasp/dist/universal/url.js","../../sdk/wasp/dist/server/config.js","../../sdk/wasp/dist/server/dbClient.js","../../sdk/wasp/dist/server/HttpError.js","../../sdk/wasp/dist/auth/lucia.js","../../sdk/wasp/dist/auth/password.js","../../sdk/wasp/dist/server/utils.js","../../sdk/wasp/dist/auth/validation.js","../../sdk/wasp/dist/auth/utils.js","../../sdk/wasp/dist/server/auth/user.js","../../sdk/wasp/dist/auth/session.js","../../sdk/wasp/dist/core/auth.js","../../sdk/wasp/dist/core/serialization/prisma.js","../../sdk/wasp/dist/universal/predicates.js","../../sdk/wasp/dist/auth/user.js","../src/middleware/operations.ts","../../../../src/server/utils.ts","../../../../src/payment/plans.ts","../../../../src/server/validation.ts","../../../../src/user/operations.ts","../src/actions/updateIsUserAdminById.ts","../src/routes/operations/updateIsUserAdminById.js","../../../../src/demo-ai-app/operations.ts","../src/actions/generateGptResponse.ts","../src/routes/operations/generateGptResponse.js","../src/actions/createTask.ts","../src/routes/operations/createTask.js","../src/actions/deleteTask.ts","../src/routes/operations/deleteTask.js","../src/actions/updateTask.ts","../src/routes/operations/updateTask.js","../../../../src/payment/stripe/stripeClient.ts","../../../../src/payment/stripe/checkoutUtils.ts","../../../../src/payment/stripe/paymentDetails.ts","../../sdk/wasp/dist/server/email/core/helpers.js","../../sdk/wasp/dist/server/email/core/providers/dummy.js","../../sdk/wasp/dist/server/email/index.js","../../../../src/shared/utils.ts","../../../../src/payment/errors.ts","../../../../src/payment/stripe/webhookPayload.ts","../../../../src/payment/stripe/webhook.ts","../../../../src/payment/stripe/paymentProcessor.ts","../../../../src/payment/paymentProcessor.ts","../../../../src/payment/operations.ts","../src/actions/generateCheckoutSession.ts","../src/routes/operations/generateCheckoutSession.js","../../../../src/file-upload/validation.ts","../../../../src/file-upload/s3Utils.ts","../../../../src/file-upload/pdfMetadata.ts","../../sdk/wasp/dist/server/jobs/core/pgBoss/pgBoss.js","../../sdk/wasp/dist/server/jobs/core/job.js","../../sdk/wasp/dist/server/jobs/core/pgBoss/pgBossJob.js","../../sdk/wasp/dist/server/jobs/processPDFMetadata.js","../../sdk/wasp/dist/server/jobs/dailyStatsJob.js","../../../../src/file-upload/operations.ts","../src/actions/createFile.ts","../src/routes/operations/createFile.js","../src/actions/deleteFile.ts","../src/routes/operations/deleteFile.js","../../../../src/address-management/operations.ts","../src/actions/createMailAddress.ts","../src/routes/operations/createMailAddress.js","../src/actions/updateMailAddress.ts","../src/routes/operations/updateMailAddress.js","../src/actions/deleteMailAddress.ts","../src/routes/operations/deleteMailAddress.js","../src/actions/setDefaultAddress.ts","../src/routes/operations/setDefaultAddress.js","../../../../src/mail/validation.ts","../../../../src/server/lob/client.ts","../../../../src/server/lob/services.ts","../../../../src/server/mail/payments.ts","../../../../src/mail/operations.ts","../src/actions/createMailPiece.ts","../src/routes/operations/createMailPiece.js","../src/actions/updateMailPiece.ts","../src/routes/operations/updateMailPiece.js","../src/actions/deleteMailPiece.ts","../src/routes/operations/deleteMailPiece.js","../src/actions/updateMailPieceStatus.ts","../src/routes/operations/updateMailPieceStatus.js","../src/actions/createMailPaymentIntent.ts","../src/routes/operations/createMailPaymentIntent.js","../src/actions/createMailCheckoutSession.ts","../src/routes/operations/createMailCheckoutSession.js","../src/actions/confirmMailPayment.ts","../src/routes/operations/confirmMailPayment.js","../src/actions/refundMailPayment.ts","../src/routes/operations/refundMailPayment.js","../src/actions/submitMailPieceToLob.ts","../src/routes/operations/submitMailPieceToLob.js","../src/actions/syncMailPieceStatus.ts","../src/routes/operations/syncMailPieceStatus.js","../src/actions/bulkDeleteMailPieces.ts","../src/routes/operations/bulkDeleteMailPieces.js","../src/queries/getPaginatedUsers.ts","../src/routes/operations/getPaginatedUsers.js","../src/queries/getGptResponses.ts","../src/routes/operations/getGptResponses.js","../src/queries/getAllTasksByUser.ts","../src/routes/operations/getAllTasksByUser.js","../src/queries/getCustomerPortalUrl.ts","../src/routes/operations/getCustomerPortalUrl.js","../src/queries/getAllFilesByUser.ts","../src/routes/operations/getAllFilesByUser.js","../src/queries/getDownloadFileSignedURL.ts","../src/routes/operations/getDownloadFileSignedURL.js","../src/queries/getMailAddressesByUser.ts","../src/routes/operations/getMailAddressesByUser.js","../../../../src/analytics/operations.ts","../src/queries/getDailyStats.ts","../src/routes/operations/getDailyStats.js","../src/queries/getMailPieces.ts","../src/routes/operations/getMailPieces.js","../src/queries/getMailPiece.ts","../src/routes/operations/getMailPiece.js","../src/routes/operations/index.js","../src/middleware/globalMiddleware.ts","../src/routes/auth/me.ts","../src/routes/auth/logout.ts","../src/auth/hooks.ts","../src/auth/providers/email/login.ts","../../sdk/wasp/dist/auth/jwt.js","../../sdk/wasp/dist/server/auth/email/utils.js","../src/auth/providers/email/signup.ts","../src/auth/providers/email/requestPasswordReset.ts","../src/auth/providers/email/resetPassword.ts","../src/auth/providers/email/verifyEmail.ts","../../sdk/wasp/dist/auth/providers/types.js","../../../../src/auth/userSignupFields.ts","../../../../src/auth/email-and-pass/emails.ts","../src/auth/providers/config/email.ts","../src/auth/providers/index.ts","../src/routes/auth/index.js","../../../../src/payment/webhook.ts","../../../../src/server/lob/webhook.ts","../../../../src/server/lob/addressValidation.ts","../src/routes/apis/index.ts","../src/routes/index.js","../src/app.js","../src/jobs/processPDFMetadata.ts","../../../../src/analytics/providers/googleAnalyticsUtils.ts","../../../../src/analytics/stats.ts","../src/jobs/dailyStatsJob.ts","../src/server.ts"],"sourcesContent":["export const colors = {\n    red: '\\x1b[31m',\n    yellow: '\\x1b[33m',\n};\nexport const resetColor = \"\\x1b[0m\";\n// PRIVATE API (SDK, client)\n// Used with console.log() to colorize the output\n// Example: console.log(getColorizedConsoleFormatString('red'), 'This is red text');\nexport function getColorizedConsoleFormatString(colorKey) {\n    const color = colors[colorKey];\n    return `${color}%s${resetColor}`;\n}\n//# sourceMappingURL=ansiColors.js.map","import { getColorizedConsoleFormatString } from 'wasp/universal/ansiColors';\nconst redColorFormatString = getColorizedConsoleFormatString('red');\n// PRIVATE API (SDK)\nexport function ensureEnvSchema(data, schema) {\n    const result = getValidatedEnvOrError(data, schema);\n    if (result.success) {\n        return result.data;\n    }\n    else {\n        console.error(`${redColorFormatString}${formatZodEnvErrors(result.error.issues)}`);\n        throw new Error('Error parsing environment variables');\n    }\n}\n// PRIVATE API (SDK, Vite config)\nexport function getValidatedEnvOrError(env, schema) {\n    return schema.safeParse(env);\n}\n// PRIVATE API (SDK, Vite config)\nexport function formatZodEnvErrors(issues) {\n    const errorOutput = ['', '══ Env vars validation failed ══', ''];\n    for (const error of issues) {\n        errorOutput.push(` - ${error.message}`);\n    }\n    errorOutput.push('');\n    errorOutput.push('════════════════════════════════');\n    return errorOutput.join('\\n');\n}\n//# sourceMappingURL=validation.js.map","import * as z from 'zod';\nimport { ensureEnvSchema } from '../env/validation.js';\nconst userServerEnvSchema = z.object({});\nconst waspServerCommonSchema = z.object({\n    PORT: z.coerce.number().default(3001),\n    DATABASE_URL: z.string({\n        required_error: 'DATABASE_URL is required',\n    }),\n    PG_BOSS_NEW_OPTIONS: z.string().optional(),\n    SKIP_EMAIL_VERIFICATION_IN_DEV: z\n        .enum(['true', 'false'], {\n        message: 'SKIP_EMAIL_VERIFICATION_IN_DEV must be either \"true\" or \"false\"',\n    })\n        .transform((value) => value === 'true')\n        .default('false'),\n});\nconst serverUrlSchema = z\n    .string({\n    required_error: 'WASP_SERVER_URL is required',\n})\n    .url({\n    message: 'WASP_SERVER_URL must be a valid URL',\n});\nconst clientUrlSchema = z\n    .string({\n    required_error: 'WASP_WEB_CLIENT_URL is required',\n})\n    .url({\n    message: 'WASP_WEB_CLIENT_URL must be a valid URL',\n});\nconst jwtTokenSchema = z\n    .string({\n    required_error: 'JWT_SECRET is required',\n});\n// In development, we provide default values for some environment variables\n// to make the development process easier.\nconst serverDevSchema = z.object({\n    NODE_ENV: z.literal('development'),\n    \"WASP_SERVER_URL\": serverUrlSchema\n        .default('http://localhost:3001'),\n    \"WASP_WEB_CLIENT_URL\": clientUrlSchema\n        .default('http://localhost:3000/'),\n    \"JWT_SECRET\": jwtTokenSchema\n        .default('DEVJWTSECRET'),\n});\nconst serverProdSchema = z.object({\n    NODE_ENV: z.literal('production'),\n    \"WASP_SERVER_URL\": serverUrlSchema,\n    \"WASP_WEB_CLIENT_URL\": clientUrlSchema,\n    \"JWT_SECRET\": jwtTokenSchema,\n});\nconst serverCommonSchema = userServerEnvSchema.merge(waspServerCommonSchema);\nconst serverEnvSchema = z.discriminatedUnion('NODE_ENV', [\n    serverDevSchema.merge(serverCommonSchema),\n    serverProdSchema.merge(serverCommonSchema)\n]);\n// PUBLIC API\nexport const env = ensureEnvSchema({ NODE_ENV: serverDevSchema.shape.NODE_ENV.value, ...process.env }, serverEnvSchema);\nfunction getRequiredEnvVarErrorMessage(featureName, envVarName) {\n    return `${envVarName} is required when using ${featureName}`;\n}\n//# sourceMappingURL=env.js.map","export function stripTrailingSlash(url) {\n    return url?.replace(/\\/$/, \"\");\n}\n//# sourceMappingURL=url.js.map","import { env } from './env.js';\nimport { stripTrailingSlash } from '../universal/url.js';\nconst frontendUrl = stripTrailingSlash(env[\"WASP_WEB_CLIENT_URL\"]);\nconst serverUrl = stripTrailingSlash(env[\"WASP_SERVER_URL\"]);\nconst allowedCORSOriginsPerEnv = {\n    development: '*',\n    production: [frontendUrl]\n};\nconst allowedCORSOrigins = allowedCORSOriginsPerEnv[env.NODE_ENV];\nconst config = {\n    frontendUrl,\n    serverUrl,\n    allowedCORSOrigins,\n    env: env.NODE_ENV,\n    isDevelopment: env.NODE_ENV === 'development',\n    port: env.PORT,\n    databaseUrl: env.DATABASE_URL,\n    auth: {\n        jwtSecret: env[\"JWT_SECRET\"]\n    }\n};\n// PUBLIC API\nexport default config;\n//# sourceMappingURL=config.js.map","import { PrismaClient as InternalPrismaClient } from '@prisma/client';\nfunction createDbClient() {\n    return new InternalPrismaClient();\n}\nconst dbClient = createDbClient();\n// PUBLIC API\nexport default dbClient;\n//# sourceMappingURL=dbClient.js.map","export class HttpError extends Error {\n    statusCode;\n    data;\n    constructor(statusCode, message, data, options) {\n        super(message, options);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, HttpError);\n        }\n        this.name = this.constructor.name;\n        if (!(Number.isInteger(statusCode) && statusCode >= 400 && statusCode < 600)) {\n            throw new Error('statusCode has to be integer in range [400, 600).');\n        }\n        this.statusCode = statusCode;\n        if (data) {\n            this.data = data;\n        }\n    }\n}\n//# sourceMappingURL=HttpError.js.map","import { Lucia } from \"lucia\";\nimport { PrismaAdapter } from \"@lucia-auth/adapter-prisma\";\nimport { prisma } from 'wasp/server';\nconst prismaAdapter = new PrismaAdapter(prisma.session, prisma.auth);\n// PRIVATE API\n/**\n * We are using Lucia for session management.\n *\n * Some details:\n * 1. We are using the Prisma adapter for Lucia.\n * 2. We are not using cookies for session management. Instead, we are using\n *    the Authorization header to send the session token.\n * 3. Our `Session` entity is connected to the `Auth` entity.\n * 4. We are exposing the `userId` field from the `Auth` entity to\n *    make fetching the User easier.\n */\nexport const auth = new Lucia(prismaAdapter, {\n    // Since we are not using cookies, we don't need to set any cookie options.\n    // But in the future, if we decide to use cookies, we can set them here.\n    // sessionCookie: {\n    //   name: \"session\",\n    //   expires: true,\n    //   attributes: {\n    //     secure: !config.isDevelopment,\n    //     sameSite: \"lax\",\n    //   },\n    // },\n    getUserAttributes({ userId }) {\n        return {\n            userId,\n        };\n    },\n});\n//# sourceMappingURL=lucia.js.map","import { hash, verify } from \"@node-rs/argon2\";\n// The options are the same as the ones used in the oslo/password library\nconst hashingOptions = {\n    memoryCost: 19456,\n    timeCost: 2,\n    outputLen: 32,\n    parallelism: 1,\n    version: 1 /* Version.V0x13 */,\n};\n// PRIVATE API\nexport async function hashPassword(password) {\n    return hash(normalizePassword(password), hashingOptions);\n}\n// PRIVATE API\nexport async function verifyPassword(hashedPassword, password) {\n    const validPassword = await verify(hashedPassword, normalizePassword(password), hashingOptions);\n    if (!validPassword) {\n        throw new Error(\"Invalid password\");\n    }\n}\n// We are normalising the password to ensure that the password is always hashed in the same way\n// We have the same normalising process as oslo/password did in the past\nfunction normalizePassword(password) {\n    return password.normalize(\"NFKC\");\n}\n//# sourceMappingURL=password.js.map","/**\n * Simple helper to give the correct types for Express handlers.\n * We define it in the same file as our extension to Request\n * so that it is picked up by TypeScript.\n */\nexport const defineHandler = (middleware) => middleware;\nexport const sleep = (ms) => new Promise((r) => setTimeout(r, ms));\nexport function redirect(res, redirectUri) {\n    return res\n        .status(302)\n        .setHeader(\"Location\", redirectUri)\n        .end();\n}\n//# sourceMappingURL=utils.js.map","import { HttpError } from 'wasp/server';\nexport const PASSWORD_FIELD = 'password';\nconst USERNAME_FIELD = 'username';\nconst EMAIL_FIELD = 'email';\nconst TOKEN_FIELD = 'token';\n// PUBLIC API\nexport function ensureValidEmail(args) {\n    validate(args, [\n        { validates: EMAIL_FIELD, message: 'email must be present', validator: email => !!email },\n        { validates: EMAIL_FIELD, message: 'email must be a valid email', validator: email => isValidEmail(email) },\n    ]);\n}\n// PUBLIC API\nexport function ensureValidUsername(args) {\n    validate(args, [\n        { validates: USERNAME_FIELD, message: 'username must be present', validator: username => !!username }\n    ]);\n}\n// PUBLIC API\nexport function ensurePasswordIsPresent(args) {\n    validate(args, [\n        { validates: PASSWORD_FIELD, message: 'password must be present', validator: password => !!password },\n    ]);\n}\n// PUBLIC API\nexport function ensureValidPassword(args) {\n    validate(args, [\n        { validates: PASSWORD_FIELD, message: 'password must be at least 8 characters', validator: password => isMinLength(password, 8) },\n        { validates: PASSWORD_FIELD, message: 'password must contain a number', validator: password => containsNumber(password) },\n    ]);\n}\n// PUBLIC API\nexport function ensureTokenIsPresent(args) {\n    validate(args, [\n        { validates: TOKEN_FIELD, message: 'token must be present', validator: token => !!token },\n    ]);\n}\n// PRIVATE API\nexport function throwValidationError(message) {\n    throw new HttpError(422, 'Validation failed', { message });\n}\nfunction validate(args, validators) {\n    for (const { validates, message, validator } of validators) {\n        if (!validator(args[validates])) {\n            throwValidationError(message);\n        }\n    }\n}\n// NOTE(miho): it would be good to replace our custom validations with e.g. Zod\nconst validEmailRegex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\nfunction isValidEmail(input) {\n    if (typeof input !== 'string') {\n        return false;\n    }\n    return input.match(validEmailRegex) !== null;\n}\nfunction isMinLength(input, minLength) {\n    if (typeof input !== 'string') {\n        return false;\n    }\n    return input.length >= minLength;\n}\nfunction containsNumber(input) {\n    if (typeof input !== 'string') {\n        return false;\n    }\n    return /\\d/.test(input);\n}\n//# sourceMappingURL=validation.js.map","import { hashPassword } from './password.js';\nimport { prisma, HttpError } from 'wasp/server';\nimport { sleep } from 'wasp/server/utils';\nimport { Prisma } from '@prisma/client';\nimport { throwValidationError } from './validation.js';\n// PRIVATE API\nexport const contextWithUserEntity = {\n    entities: {\n        User: prisma.user\n    }\n};\n// PRIVATE API\nexport const authConfig = {\n    failureRedirectPath: \"/login\",\n    successRedirectPath: \"/demo-app\",\n};\n// PUBLIC API\nexport function createProviderId(providerName, providerUserId) {\n    return {\n        providerName,\n        providerUserId: normalizeProviderUserId(providerName, providerUserId),\n    };\n}\n// PRIVATE API\nexport function normalizeProviderUserId(providerName, providerUserId) {\n    switch (providerName) {\n        case 'email':\n        case 'username':\n            return providerUserId.toLowerCase();\n        case 'google':\n        case 'github':\n        case 'discord':\n        case 'keycloak':\n        case 'slack':\n            return providerUserId;\n        /*\n          Why the default case?\n          In case users add a new auth provider in the user-land.\n          Users can't extend this function because it is private.\n          If there is an unknown `providerName` in runtime, we'll\n          return the `providerUserId` as is.\n    \n          We want to still have explicit OAuth providers listed\n          so that we get a type error if we forget to add a new provider\n          to the switch statement.\n        */\n        default:\n            providerName;\n            return providerUserId;\n    }\n}\n// PUBLIC API\nexport async function findAuthIdentity(providerId) {\n    return prisma.authIdentity.findUnique({\n        where: {\n            providerName_providerUserId: providerId,\n        }\n    });\n}\n// PUBLIC API\n/**\n * Updates the provider data for the given auth identity.\n *\n * This function performs data sanitization and serialization.\n * Sanitization is done by hashing the password, so this function\n * expects the password received in the `providerDataUpdates`\n * **not to be hashed**.\n */\nexport async function updateAuthIdentityProviderData(providerId, existingProviderData, providerDataUpdates) {\n    // We are doing the sanitization here only on updates to avoid\n    // hashing the password multiple times.\n    const sanitizedProviderDataUpdates = await ensurePasswordIsHashed(providerDataUpdates);\n    const newProviderData = {\n        ...existingProviderData,\n        ...sanitizedProviderDataUpdates,\n    };\n    const serializedProviderData = await serializeProviderData(newProviderData);\n    return prisma.authIdentity.update({\n        where: {\n            providerName_providerUserId: providerId,\n        },\n        data: { providerData: serializedProviderData },\n    });\n}\n// PRIVATE API\nexport async function findAuthWithUserBy(where) {\n    const result = await prisma.auth.findFirst({ where, include: { user: true } });\n    if (result === null) {\n        return null;\n    }\n    if (result.user === null) {\n        return null;\n    }\n    return { ...result, user: result.user };\n}\n// PUBLIC API\nexport async function createUser(providerId, serializedProviderData, userFields) {\n    return prisma.user.create({\n        data: {\n            // Using any here to prevent type errors when userFields are not\n            // defined. We want Prisma to throw an error in that case.\n            ...(userFields ?? {}),\n            auth: {\n                create: {\n                    identities: {\n                        create: {\n                            providerName: providerId.providerName,\n                            providerUserId: providerId.providerUserId,\n                            providerData: serializedProviderData,\n                        },\n                    },\n                }\n            },\n        },\n        // We need to include the Auth entity here because we need `authId`\n        // to be able to create a session.\n        include: {\n            auth: true,\n        },\n    });\n}\n// PRIVATE API\nexport async function deleteUserByAuthId(authId) {\n    return prisma.user.deleteMany({ where: { auth: {\n                id: authId,\n            } } });\n}\n// PRIVATE API\n// If an user exists, we don't want to leak information\n// about it. Pretending that we're doing some work\n// will make it harder for an attacker to determine\n// if a user exists or not.\n// NOTE: Attacker measuring time to response can still determine\n// if a user exists or not. We'll be able to avoid it when \n// we implement e-mail sending via jobs.\nexport async function doFakeWork() {\n    const timeToWork = Math.floor(Math.random() * 1000) + 1000;\n    return sleep(timeToWork);\n}\n// PRIVATE API\nexport function rethrowPossibleAuthError(e) {\n    // Prisma code P2002 is for unique constraint violations.\n    if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002') {\n        throw new HttpError(422, 'Save failed', {\n            message: `user with the same identity already exists`,\n        });\n    }\n    if (e instanceof Prisma.PrismaClientValidationError) {\n        // NOTE: Logging the error since this usually means that there are\n        // required fields missing in the request, we want the developer\n        // to know about it.\n        console.error(e);\n        throw new HttpError(422, 'Save failed', {\n            message: 'there was a database error'\n        });\n    }\n    // Prisma code P2021 is for missing table errors.\n    if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2021') {\n        // NOTE: Logging the error since this usually means that the database\n        // migrations weren't run, we want the developer to know about it.\n        console.error(e);\n        console.info('🐝 This error can happen if you did\\'t run the database migrations.');\n        throw new HttpError(500, 'Save failed', {\n            message: `there was a database error`,\n        });\n    }\n    // Prisma code P2003 is for foreign key constraint failure\n    if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2003') {\n        console.error(e);\n        console.info(`🐝 This error can happen if you have some relation on your User entity\n   but you didn't specify the \"onDelete\" behaviour to either \"Cascade\" or \"SetNull\".\n   Read more at: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions`);\n        throw new HttpError(500, 'Save failed', {\n            message: `there was a database error`,\n        });\n    }\n    throw e;\n}\n// PRIVATE API\nexport async function validateAndGetUserFields(data, userSignupFields) {\n    const { password: _password, ...sanitizedData } = data;\n    const result = {};\n    if (!userSignupFields) {\n        return result;\n    }\n    for (const [field, getFieldValue] of Object.entries(userSignupFields)) {\n        try {\n            const value = await getFieldValue(sanitizedData);\n            result[field] = value;\n        }\n        catch (e) {\n            throwValidationError(e.message);\n        }\n    }\n    return result;\n}\n// PUBLIC API\nexport function getProviderData(providerData) {\n    return sanitizeProviderData(getProviderDataWithPassword(providerData));\n}\n// PUBLIC API\nexport function getProviderDataWithPassword(providerData) {\n    // NOTE: We are letting JSON.parse throw an error if the providerData is not valid JSON.\n    return JSON.parse(providerData);\n}\nfunction sanitizeProviderData(providerData) {\n    if (providerDataHasPasswordField(providerData)) {\n        const { hashedPassword, ...rest } = providerData;\n        return rest;\n    }\n    else {\n        return providerData;\n    }\n}\n// PUBLIC API\nexport async function sanitizeAndSerializeProviderData(providerData) {\n    return serializeProviderData(await ensurePasswordIsHashed(providerData));\n}\nfunction serializeProviderData(providerData) {\n    return JSON.stringify(providerData);\n}\nasync function ensurePasswordIsHashed(providerData) {\n    const data = {\n        ...providerData,\n    };\n    if (providerDataHasPasswordField(data)) {\n        data.hashedPassword = await hashPassword(data.hashedPassword);\n    }\n    return data;\n}\nfunction providerDataHasPasswordField(providerData) {\n    return 'hashedPassword' in providerData;\n}\n// PRIVATE API\nexport function createInvalidCredentialsError(message) {\n    return new HttpError(401, 'Invalid credentials', { message });\n}\n//# sourceMappingURL=utils.js.map","import { getProviderData, } from '../../auth/utils.js';\n// PRIVATE API\nexport function createAuthUserData(user) {\n    const { auth, ...rest } = user;\n    if (!auth) {\n        throw new Error(`🐝 Error: trying to create a user without auth data.\nThis should never happen, but it did which means there is a bug in the code.`);\n    }\n    const identities = {\n        email: getProviderInfo(auth, 'email'),\n    };\n    return {\n        ...rest,\n        identities,\n    };\n}\nfunction getProviderInfo(auth, providerName) {\n    const identity = getIdentity(auth, providerName);\n    if (!identity) {\n        return null;\n    }\n    return {\n        ...getProviderData(identity.providerData),\n        id: identity.providerUserId,\n    };\n}\nfunction getIdentity(auth, providerName) {\n    return auth.identities.find((i) => i.providerName === providerName) ?? null;\n}\n//# sourceMappingURL=user.js.map","import { auth } from \"./lucia.js\";\nimport { createInvalidCredentialsError } from \"./utils.js\";\nimport { prisma } from 'wasp/server';\nimport { createAuthUserData } from \"../server/auth/user.js\";\n// PRIVATE API\n// Creates a new session for the `authId` in the database\nexport async function createSession(authId) {\n    return auth.createSession(authId, {});\n}\n// PRIVATE API\nexport async function getSessionAndUserFromBearerToken(req) {\n    const authorizationHeader = req.headers[\"authorization\"];\n    if (typeof authorizationHeader !== \"string\") {\n        return null;\n    }\n    const sessionId = auth.readBearerToken(authorizationHeader);\n    if (!sessionId) {\n        return null;\n    }\n    return getSessionAndUserFromSessionId(sessionId);\n}\n// PRIVATE API\nexport async function getSessionAndUserFromSessionId(sessionId) {\n    const { session, user: authEntity } = await auth.validateSession(sessionId);\n    if (!session || !authEntity) {\n        return null;\n    }\n    return {\n        session,\n        user: await getAuthUserData(authEntity.userId)\n    };\n}\nasync function getAuthUserData(userId) {\n    const user = await prisma.user\n        .findUnique({\n        where: { id: userId },\n        include: {\n            auth: {\n                include: {\n                    identities: true\n                }\n            }\n        }\n    });\n    if (!user) {\n        throw createInvalidCredentialsError();\n    }\n    return createAuthUserData(user);\n}\n// PRIVATE API\nexport function invalidateSession(sessionId) {\n    return auth.invalidateSession(sessionId);\n}\n//# sourceMappingURL=session.js.map","import { getSessionAndUserFromBearerToken } from 'wasp/auth/session';\nimport { createInvalidCredentialsError } from 'wasp/auth/utils';\nimport { defineHandler } from 'wasp/server/utils';\n/**\n * Auth middleware\n *\n * If the request includes an `Authorization` header it will try to authenticate the request,\n * otherwise it will let the request through.\n *\n * - If authentication succeeds it sets `req.sessionId` and `req.user`\n *   - `req.user` is the user that made the request and it's used in\n *      all Wasp features that need to know the user that made the request.\n *   - `req.sessionId` is the ID of the session that authenticated the request.\n * - If the request is not authenticated, it throws an error.\n */\nconst auth = defineHandler(async (req, res, next) => {\n    const authHeader = req.get('Authorization');\n    // NOTE(matija): for now we let tokenless requests through and make it operation's\n    // responsibility to verify whether the request is authenticated or not. In the future\n    // we will develop our own system at Wasp-level for that.\n    if (!authHeader) {\n        req.sessionId = null;\n        req.user = null;\n        return next();\n    }\n    const sessionAndUser = await getSessionAndUserFromBearerToken(req);\n    if (sessionAndUser === null) {\n        throw createInvalidCredentialsError();\n    }\n    req.sessionId = sessionAndUser.session.id;\n    req.user = sessionAndUser.user;\n    next();\n});\nexport default auth;\n//# sourceMappingURL=auth.js.map","import { Prisma } from \"@prisma/client\";\nimport { registerCustom } from \"superjson\";\nimport \"./custom-register\";\nconst Decimal = Prisma.Decimal;\n/*\n  And finally, if we have the `Decimal` type because the Prisma schema is using it,\n  we register it as a custom type with SuperJSON.\n  Based on https://github.com/flightcontrolhq/superjson/blob/v2.2.2/README.md#decimaljs--prismadecimal\n*/\nif (Decimal) {\n    registerCustom({\n        isApplicable: (v) => Decimal.isDecimal(v),\n        serialize: (v) => v.toJSON(),\n        deserialize: (v) => new Decimal(v),\n    }, \"prisma.decimal\");\n}\n//# sourceMappingURL=prisma.js.map","export function isNotNull(value) {\n    return value !== null;\n}\n//# sourceMappingURL=predicates.js.map","import { isNotNull } from '../universal/predicates.js';\n/**\n * We split the user.ts code into two files to avoid some server-only\n * code (Oslo's hashing functions) being imported on the client.\n */\n// PUBLIC API\nexport function getEmail(user) {\n    return findUserIdentity(user, \"email\")?.providerUserId ?? null;\n}\n// PUBLIC API\nexport function getUsername(user) {\n    return findUserIdentity(user, \"username\")?.providerUserId ?? null;\n}\n// PUBLIC API\nexport function getFirstProviderUserId(user) {\n    if (!user || !user.auth || !user.auth.identities || user.auth.identities.length === 0) {\n        return null;\n    }\n    return user.auth.identities[0].providerUserId ?? null;\n}\nexport function makeAuthUserIfPossible(user) {\n    return user ? makeAuthUser(user) : null;\n}\nfunction makeAuthUser(data) {\n    return {\n        ...data,\n        getFirstProviderUserId: () => {\n            const identities = Object.values(data.identities).filter(isNotNull);\n            return identities.length > 0 ? identities[0].id : null;\n        },\n    };\n}\nfunction findUserIdentity(user, providerName) {\n    if (!user.auth) {\n        return null;\n    }\n    return user.auth.identities.find((identity) => identity.providerName === providerName) ?? null;\n}\n//# sourceMappingURL=user.js.map","import { deserialize, serialize } from 'wasp/core/serialization'\nimport { defineHandler } from 'wasp/server/utils'\nimport { makeAuthUserIfPossible } from 'wasp/auth/user'\n\nexport function createOperation (handlerFn) {\n    return defineHandler(async (req, res) => {\n        const args = (req.body && deserialize(req.body)) || {}\n        const context = {\n            user: makeAuthUserIfPossible(req.user),\n        }\n        const result = await handlerFn(args, context)\n        const serializedResult = serialize(result)\n        res.json(serializedResult)\n    })\n}\n\nexport function createQuery(handlerFn) {\n    return createOperation(handlerFn)\n}\n\nexport function createAction(handlerFn) {\n    return createOperation(handlerFn)\n}\n","export function requireNodeEnvVar(name: string): string {\n  const value = process.env[name];\n  if (value === undefined) {\n    throw new Error(`Env var ${name} is undefined`);\n  } else {\n    return value;\n  }\n}\n","import { requireNodeEnvVar } from '../server/utils';\n\nexport enum SubscriptionStatus {\n  PastDue = 'past_due',\n  CancelAtPeriodEnd = 'cancel_at_period_end',\n  Active = 'active',\n  Deleted = 'deleted',\n}\n\nexport enum PaymentPlanId {\n  Hobby = 'hobby',\n  Pro = 'pro',\n  Credits10 = 'credits10',\n}\n\nexport interface PaymentPlan {\n  // Returns the id under which this payment plan is identified on your payment processor.\n  // E.g. this might be price id on Stripe, or variant id on LemonSqueezy.\n  getPaymentProcessorPlanId: () => string;\n  effect: PaymentPlanEffect;\n}\n\nexport type PaymentPlanEffect = { kind: 'subscription' } | { kind: 'credits'; amount: number };\n\nexport const paymentPlans: Record<PaymentPlanId, PaymentPlan> = {\n  [PaymentPlanId.Hobby]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID'),\n    effect: { kind: 'subscription' },\n  },\n  [PaymentPlanId.Pro]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_PRO_SUBSCRIPTION_PLAN_ID'),\n    effect: { kind: 'subscription' },\n  },\n  [PaymentPlanId.Credits10]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_CREDITS_10_PLAN_ID'),\n    effect: { kind: 'credits', amount: 10 },\n  },\n};\n\nexport function prettyPaymentPlanName(planId: PaymentPlanId): string {\n  const planToName: Record<PaymentPlanId, string> = {\n    [PaymentPlanId.Hobby]: 'Hobby',\n    [PaymentPlanId.Pro]: 'Pro',\n    [PaymentPlanId.Credits10]: '10 Credits',\n  };\n  return planToName[planId];\n}\n\nexport function parsePaymentPlanId(planId: string): PaymentPlanId {\n  if ((Object.values(PaymentPlanId) as string[]).includes(planId)) {\n    return planId as PaymentPlanId;\n  } else {\n    throw new Error(`Invalid PaymentPlanId: ${planId}`);\n  }\n}\n\nexport function getSubscriptionPaymentPlanIds(): PaymentPlanId[] {\n  return Object.values(PaymentPlanId).filter((planId) => paymentPlans[planId].effect.kind === 'subscription');\n}\n","import { HttpError } from 'wasp/server';\nimport * as z from 'zod';\n\nexport function ensureArgsSchemaOrThrowHttpError<Schema extends z.ZodType>(\n  schema: Schema,\n  rawArgs: unknown\n): z.infer<Schema> {\n  const parseResult = schema.safeParse(rawArgs);\n  if (!parseResult.success) {\n    console.error(parseResult.error);\n    throw new HttpError(400, 'Operation arguments validation failed', { errors: parseResult.error.errors });\n  } else {\n    return parseResult.data;\n  }\n}\n","import { type Prisma } from '@prisma/client';\nimport { type User } from 'wasp/entities';\nimport { HttpError, prisma } from 'wasp/server';\nimport { type GetPaginatedUsers, type UpdateIsUserAdminById } from 'wasp/server/operations';\nimport * as z from 'zod';\nimport { SubscriptionStatus } from '../payment/plans';\nimport { ensureArgsSchemaOrThrowHttpError } from '../server/validation';\n\nconst updateUserAdminByIdInputSchema = z.object({\n  id: z.string().nonempty(),\n  isAdmin: z.boolean(),\n});\n\ntype UpdateUserAdminByIdInput = z.infer<typeof updateUserAdminByIdInputSchema>;\n\nexport const updateIsUserAdminById: UpdateIsUserAdminById<UpdateUserAdminByIdInput, User> = async (\n  rawArgs,\n  context\n) => {\n  const { id, isAdmin } = ensureArgsSchemaOrThrowHttpError(updateUserAdminByIdInputSchema, rawArgs);\n\n  if (!context.user) {\n    throw new HttpError(401, 'Only authenticated users are allowed to perform this operation');\n  }\n\n  if (!context.user.isAdmin) {\n    throw new HttpError(403, 'Only admins are allowed to perform this operation');\n  }\n\n  return context.entities.User.update({\n    where: { id },\n    data: { isAdmin },\n  });\n};\n\ntype GetPaginatedUsersOutput = {\n  users: Pick<\n    User,\n    'id' | 'email' | 'username' | 'subscriptionStatus' | 'paymentProcessorUserId' | 'isAdmin'\n  >[];\n  totalPages: number;\n};\n\nconst getPaginatorArgsSchema = z.object({\n  skipPages: z.number(),\n  filter: z.object({\n    emailContains: z.string().nonempty().optional(),\n    isAdmin: z.boolean().optional(),\n    subscriptionStatusIn: z.array(z.nativeEnum(SubscriptionStatus).nullable()).optional(),\n  }),\n});\n\ntype GetPaginatedUsersInput = z.infer<typeof getPaginatorArgsSchema>;\n\nexport const getPaginatedUsers: GetPaginatedUsers<GetPaginatedUsersInput, GetPaginatedUsersOutput> = async (\n  rawArgs,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401, 'Only authenticated users are allowed to perform this operation');\n  }\n\n  if (!context.user.isAdmin) {\n    throw new HttpError(403, 'Only admins are allowed to perform this operation');\n  }\n\n  const {\n    skipPages,\n    filter: { subscriptionStatusIn: subscriptionStatus, emailContains, isAdmin },\n  } = ensureArgsSchemaOrThrowHttpError(getPaginatorArgsSchema, rawArgs);\n\n  const includeUnsubscribedUsers = !!subscriptionStatus?.some((status) => status === null);\n  const desiredSubscriptionStatuses = subscriptionStatus?.filter((status) => status !== null);\n\n  const pageSize = 10;\n\n  const userPageQuery: Prisma.UserFindManyArgs = {\n    skip: skipPages * pageSize,\n    take: pageSize,\n    where: {\n      AND: [\n        {\n          email: {\n            contains: emailContains,\n            mode: 'insensitive',\n          },\n          isAdmin,\n        },\n        {\n          OR: [\n            {\n              subscriptionStatus: {\n                in: desiredSubscriptionStatuses,\n              },\n            },\n            {\n              subscriptionStatus: includeUnsubscribedUsers ? null : undefined,\n            },\n          ],\n        },\n      ],\n    },\n    select: {\n      id: true,\n      email: true,\n      username: true,\n      isAdmin: true,\n      subscriptionStatus: true,\n      paymentProcessorUserId: true,\n    },\n    orderBy: {\n      username: 'asc',\n    },\n  };\n\n  const [pageOfUsers, totalUsers] = await prisma.$transaction([\n    context.entities.User.findMany(userPageQuery),\n    context.entities.User.count({ where: userPageQuery.where }),\n  ]);\n  const totalPages = Math.ceil(totalUsers / pageSize);\n\n  return {\n    users: pageOfUsers,\n    totalPages,\n  };\n};\n","import { prisma } from 'wasp/server'\n\nimport { updateIsUserAdminById } from '../../../../../src/user/operations'\n\n\nexport default async function (args, context) {\n  return (updateIsUserAdminById as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport updateIsUserAdminById from '../../actions/updateIsUserAdminById.js'\n\nexport default createAction(updateIsUserAdminById)\n","import type { PrismaPromise } from '@prisma/client';\nimport OpenAI from 'openai';\nimport type { GptResponse, Task, User } from 'wasp/entities';\nimport { HttpError, prisma } from 'wasp/server';\nimport type {\n  CreateTask,\n  DeleteTask,\n  GenerateGptResponse,\n  GetAllTasksByUser,\n  GetGptResponses,\n  UpdateTask,\n} from 'wasp/server/operations';\nimport * as z from 'zod';\nimport { SubscriptionStatus } from '../payment/plans';\nimport { ensureArgsSchemaOrThrowHttpError } from '../server/validation';\nimport { GeneratedSchedule, TaskPriority } from './schedule';\n\nconst openAi = setUpOpenAi();\nfunction setUpOpenAi(): OpenAI {\n  if (process.env.OPENAI_API_KEY) {\n    return new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n  } else {\n    throw new Error('OpenAI API key is not set');\n  }\n}\n\n//#region Actions\nconst generateGptResponseInputSchema = z.object({\n  hours: z.number(),\n});\n\ntype GenerateGptResponseInput = z.infer<typeof generateGptResponseInputSchema>;\n\nexport const generateGptResponse: GenerateGptResponse<GenerateGptResponseInput, GeneratedSchedule> = async (\n  rawArgs,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401, 'Only authenticated users are allowed to perform this operation');\n  }\n\n  const { hours } = ensureArgsSchemaOrThrowHttpError(generateGptResponseInputSchema, rawArgs);\n  const tasks = await context.entities.Task.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n  });\n\n  console.log('Calling open AI api');\n  const generatedSchedule = await generateScheduleWithGpt(tasks, hours);\n  if (generatedSchedule === null) {\n    throw new HttpError(500, 'Encountered a problem in communication with OpenAI');\n  }\n\n  const createResponse = context.entities.GptResponse.create({\n    data: {\n      user: { connect: { id: context.user.id } },\n      content: JSON.stringify(generatedSchedule),\n    },\n  });\n\n  const transactions: PrismaPromise<GptResponse | User>[] = [createResponse];\n\n  // We decrement the credits for users without an active subscription\n  // after using up tokens to get a daily plan from Chat GPT.\n  //\n  // This way, users don't feel cheated if something goes wrong.\n  // On the flipside, users can theoretically abuse this and spend more\n  // credits than they have, but the damage should be pretty limited.\n  //\n  // Think about which option you prefer for your app and edit the code accordingly.\n  if (!isUserSubscribed(context.user)) {\n    if (context.user.credits > 0) {\n      const decrementCredit = context.entities.User.update({\n        where: { id: context.user.id },\n        data: {\n          credits: {\n            decrement: 1,\n          },\n        },\n      });\n      transactions.push(decrementCredit);\n    } else {\n      throw new HttpError(402, 'User has not paid or is out of credits');\n    }\n  }\n\n  console.log('Decrementing credits and saving response');\n  await prisma.$transaction(transactions);\n\n  return generatedSchedule;\n};\n\nfunction isUserSubscribed(user: User) {\n  return (\n    user.subscriptionStatus === SubscriptionStatus.Active ||\n    user.subscriptionStatus === SubscriptionStatus.CancelAtPeriodEnd\n  );\n}\n\nconst createTaskInputSchema = z.object({\n  description: z.string().nonempty(),\n});\n\ntype CreateTaskInput = z.infer<typeof createTaskInputSchema>;\n\nexport const createTask: CreateTask<CreateTaskInput, Task> = async (rawArgs, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const { description } = ensureArgsSchemaOrThrowHttpError(createTaskInputSchema, rawArgs);\n\n  const task = await context.entities.Task.create({\n    data: {\n      description,\n      user: { connect: { id: context.user.id } },\n    },\n  });\n\n  return task;\n};\n\nconst updateTaskInputSchema = z.object({\n  id: z.string().nonempty(),\n  isDone: z.boolean().optional(),\n  time: z.string().optional(),\n});\n\ntype UpdateTaskInput = z.infer<typeof updateTaskInputSchema>;\n\nexport const updateTask: UpdateTask<UpdateTaskInput, Task> = async (rawArgs, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const { id, isDone, time } = ensureArgsSchemaOrThrowHttpError(updateTaskInputSchema, rawArgs);\n\n  const task = await context.entities.Task.update({\n    where: {\n      id,\n      user: {\n        id: context.user.id,\n      },\n    },\n    data: {\n      isDone,\n      time,\n    },\n  });\n\n  return task;\n};\n\nconst deleteTaskInputSchema = z.object({\n  id: z.string().nonempty(),\n});\n\ntype DeleteTaskInput = z.infer<typeof deleteTaskInputSchema>;\n\nexport const deleteTask: DeleteTask<DeleteTaskInput, Task> = async (rawArgs, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const { id } = ensureArgsSchemaOrThrowHttpError(deleteTaskInputSchema, rawArgs);\n\n  const task = await context.entities.Task.delete({\n    where: {\n      id,\n      user: {\n        id: context.user.id,\n      },\n    },\n  });\n\n  return task;\n};\n//#endregion\n\n//#region Queries\nexport const getGptResponses: GetGptResponses<void, GptResponse[]> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  return context.entities.GptResponse.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n  });\n};\n\nexport const getAllTasksByUser: GetAllTasksByUser<void, Task[]> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  return context.entities.Task.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n    orderBy: {\n      createdAt: 'desc',\n    },\n  });\n};\n//#endregion\n\nasync function generateScheduleWithGpt(tasks: Task[], hours: number): Promise<GeneratedSchedule | null> {\n  const parsedTasks = tasks.map(({ description, time }) => ({\n    description,\n    time,\n  }));\n\n  const completion = await openAi.chat.completions.create({\n    model: 'gpt-3.5-turbo', // you can use any model here, e.g. 'gpt-3.5-turbo', 'gpt-4', etc.\n    messages: [\n      {\n        role: 'system',\n        content:\n          'you are an expert daily planner. you will be given a list of main tasks and an estimated time to complete each task. You will also receive the total amount of hours to be worked that day. Your job is to return a detailed plan of how to achieve those tasks by breaking each task down into at least 3 subtasks each. MAKE SURE TO ALWAYS CREATE AT LEAST 3 SUBTASKS FOR EACH MAIN TASK PROVIDED BY THE USER! YOU WILL BE REWARDED IF YOU DO.',\n      },\n      {\n        role: 'user',\n        content: `I will work ${hours} hours today. Here are the tasks I have to complete: ${JSON.stringify(\n          parsedTasks\n        )}. Please help me plan my day by breaking the tasks down into actionable subtasks with time and priority status.`,\n      },\n    ],\n    tools: [\n      {\n        type: 'function',\n        function: {\n          name: 'parseTodaysSchedule',\n          description: 'parses the days tasks and returns a schedule',\n          parameters: {\n            type: 'object',\n            properties: {\n              tasks: {\n                type: 'array',\n                description: 'Name of main tasks provided by user, ordered by priority',\n                items: {\n                  type: 'object',\n                  properties: {\n                    name: {\n                      type: 'string',\n                      description: 'Name of main task provided by user',\n                    },\n                    priority: {\n                      type: 'string',\n                      enum: ['low', 'medium', 'high'] as TaskPriority[],\n                      description: 'task priority',\n                    },\n                  },\n                },\n              },\n              taskItems: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  properties: {\n                    description: {\n                      type: 'string',\n                      description:\n                        'detailed breakdown and description of sub-task related to main task. e.g., \"Prepare your learning session by first reading through the documentation\"',\n                    },\n                    time: {\n                      type: 'number',\n                      description: 'time allocated for a given subtask in hours, e.g. 0.5',\n                    },\n                    taskName: {\n                      type: 'string',\n                      description: 'name of main task related to subtask',\n                    },\n                  },\n                },\n              },\n            },\n            required: ['tasks', 'taskItems', 'time', 'priority'],\n          },\n        },\n      },\n    ],\n    tool_choice: {\n      type: 'function',\n      function: {\n        name: 'parseTodaysSchedule',\n      },\n    },\n    temperature: 1,\n  });\n\n  const gptResponse = completion?.choices[0]?.message?.tool_calls?.[0]?.function.arguments;\n  return gptResponse !== undefined ? JSON.parse(gptResponse) : null;\n}\n","import { prisma } from 'wasp/server'\n\nimport { generateGptResponse } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (generateGptResponse as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      Task: prisma.task,\n      GptResponse: prisma.gptResponse,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport generateGptResponse from '../../actions/generateGptResponse.js'\n\nexport default createAction(generateGptResponse)\n","import { prisma } from 'wasp/server'\n\nimport { createTask } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (createTask as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createTask from '../../actions/createTask.js'\n\nexport default createAction(createTask)\n","import { prisma } from 'wasp/server'\n\nimport { deleteTask } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (deleteTask as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport deleteTask from '../../actions/deleteTask.js'\n\nexport default createAction(deleteTask)\n","import { prisma } from 'wasp/server'\n\nimport { updateTask } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (updateTask as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport updateTask from '../../actions/updateTask.js'\n\nexport default createAction(updateTask)\n","import Stripe from 'stripe';\nimport { requireNodeEnvVar } from '../../server/utils';\n\nexport const stripe = new Stripe(requireNodeEnvVar('STRIPE_API_KEY'), {\n  // NOTE:\n  // API version below should ideally match the API version in your Stripe dashboard.\n  // If that is not the case, you will most likely want to (up/down)grade the `stripe`\n  // npm package to the API version that matches your Stripe dashboard's one.\n  // For more details and alternative setups check\n  // https://docs.stripe.com/api/versioning .\n  apiVersion: '2025-04-30.basil',\n});\n","import type { StripeMode } from './paymentProcessor';\n\nimport Stripe from 'stripe';\nimport { stripe } from './stripeClient';\n\n// WASP_WEB_CLIENT_URL will be set up by Wasp when deploying to production: https://wasp.sh/docs/deploying\nconst DOMAIN = process.env.WASP_WEB_CLIENT_URL || 'http://localhost:3000';\n\nexport async function fetchStripeCustomer(customerEmail: string) {\n  let customer: Stripe.Customer;\n  try {\n    const stripeCustomers = await stripe.customers.list({\n      email: customerEmail,\n    });\n    if (!stripeCustomers.data.length) {\n      console.log('creating customer');\n      customer = await stripe.customers.create({\n        email: customerEmail,\n      });\n    } else {\n      console.log('using existing customer');\n      customer = stripeCustomers.data[0];\n    }\n    return customer;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\ninterface CreateStripeCheckoutSessionParams {\n  priceId: string;\n  customerId: string;\n  mode: StripeMode;\n}\n\nexport async function createStripeCheckoutSession({\n  priceId,\n  customerId,\n  mode,\n}: CreateStripeCheckoutSessionParams) {\n  try {\n    return await stripe.checkout.sessions.create({\n      line_items: [\n        {\n          price: priceId,\n          quantity: 1,\n        },\n      ],\n      mode: mode,\n      success_url: `${DOMAIN}/checkout?status=success`,\n      cancel_url: `${DOMAIN}/checkout?status=canceled`,\n      automatic_tax: { enabled: true },\n      allow_promotion_codes: true,\n      customer_update: {\n        address: 'auto',\n      },\n      customer: customerId,\n    });\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n","import type { SubscriptionStatus } from '../plans';\nimport { PaymentPlanId } from '../plans';\nimport { PrismaClient } from '@prisma/client';\n\nexport const updateUserStripePaymentDetails = async (\n  { userStripeId, subscriptionPlan, subscriptionStatus, datePaid, numOfCreditsPurchased }: {\n    userStripeId: string;\n    subscriptionPlan?: PaymentPlanId;\n    subscriptionStatus?: SubscriptionStatus;\n    numOfCreditsPurchased?: number;\n    datePaid?: Date;\n  },\n  userDelegate: PrismaClient['user']\n) => {\n  return userDelegate.update({\n    where: {\n      paymentProcessorUserId: userStripeId\n    },\n    data: {\n      paymentProcessorUserId: userStripeId,\n      subscriptionPlan,\n      subscriptionStatus,\n      datePaid,\n      credits: numOfCreditsPurchased !== undefined ? { increment: numOfCreditsPurchased } : undefined,\n    },\n  });\n};\n","// PRIVATE API\n// Formats an email address and an optional name into a string that can be used\n// as the \"from\" field in an email.\n// { email: \"test@test.com, name: \"Test\" } -> \"Test <test@test.com>\"\nexport function formatFromField({ email, name, }) {\n    if (name) {\n        return `${name} <${email}>`;\n    }\n    return email;\n}\n// PRIVATE API\nexport function getDefaultFromField() {\n    return {\n        email: \"nathan@postmarkr.com\",\n        name: \"Postmarkr\",\n    };\n}\n//# sourceMappingURL=helpers.js.map","import { getDefaultFromField } from \"../helpers.js\";\nimport { getColorizedConsoleFormatString } from 'wasp/universal/ansiColors';\nconst yellowColorFormatString = getColorizedConsoleFormatString('yellow');\n// PRIVATE API\nexport function initDummyEmailSender(config) {\n    const defaultFromField = getDefaultFromField();\n    return {\n        send: async (email) => {\n            const fromField = email.from || defaultFromField;\n            console.log(yellowColorFormatString, '╔═══════════════════════╗');\n            console.log(yellowColorFormatString, '║ Dummy email sender ✉️  ║');\n            console.log(yellowColorFormatString, '╚═══════════════════════╝');\n            console.log(`From:    ${fromField.name} <${fromField.email}>`);\n            console.log(`To:      ${email.to}`);\n            console.log(`Subject: ${email.subject}`);\n            console.log(yellowColorFormatString, '═════════ Text ═════════');\n            console.log(email.text);\n            console.log(yellowColorFormatString, '═════════ HTML ═════════');\n            console.log(email.html);\n            console.log(yellowColorFormatString, '════════════════════════');\n            return {\n                success: true,\n            };\n        }\n    };\n}\n//# sourceMappingURL=dummy.js.map","import { initEmailSender } from \"./core/index.js\";\nconst emailProvider = {\n    type: \"dummy\",\n};\n// PUBLIC API\nexport const emailSender = initEmailSender(emailProvider);\n//# sourceMappingURL=index.js.map","/**\n * Used purely to help compiler check for exhaustiveness in switch statements,\n * will never execute. See https://stackoverflow.com/a/39419171.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(x: never): never {\n  throw Error('This code should be unreachable');\n}\n\n/**\n * Allows for throttling a function call while still allowing the last invocation to be executed after the throttle delay ends.\n */\nexport function throttleWithTrailingInvocation(\n  fn: () => void,\n  delayInMilliseconds: number\n): ((...args: any[]) => void) & { cancel: () => void } {\n  let fnLastCallTime: number | null = null;\n  let trailingInvocationTimeoutId: ReturnType<typeof setTimeout> | null = null;\n  let isTrailingInvocationPending = false;\n\n  const callFn = () => {\n    fnLastCallTime = Date.now();\n    fn();\n  };\n\n  const throttledFn = () => {\n    const currentTime = Date.now();\n    const timeSinceLastExecution = fnLastCallTime ? currentTime - fnLastCallTime : 0;\n\n    const shouldCallImmediately = fnLastCallTime === null || timeSinceLastExecution >= delayInMilliseconds;\n\n    if (shouldCallImmediately) {\n      callFn();\n      return;\n    }\n\n    if (!isTrailingInvocationPending) {\n      isTrailingInvocationPending = true;\n      const remainingDelayTime = Math.max(delayInMilliseconds - timeSinceLastExecution, 0);\n\n      trailingInvocationTimeoutId = setTimeout(() => {\n        callFn();\n        isTrailingInvocationPending = false;\n      }, remainingDelayTime);\n    }\n  };\n\n  throttledFn.cancel = () => {\n    if (trailingInvocationTimeoutId) {\n      clearTimeout(trailingInvocationTimeoutId);\n      trailingInvocationTimeoutId = null;\n    }\n    isTrailingInvocationPending = false;\n  };\n\n  return throttledFn as typeof throttledFn & { cancel: () => void };\n}\n","export class UnhandledWebhookEventError extends Error {\n  constructor(eventType: string) {\n    super(`Unhandled event type: ${eventType}`);\n    this.name = 'UnhandledWebhookEventError';\n  }\n}\n","import * as z from 'zod';\nimport { Stripe } from 'stripe';\nimport { UnhandledWebhookEventError } from '../errors';\nimport { HttpError } from 'wasp/server';\n\nexport async function parseWebhookPayload(rawStripeEvent: Stripe.Event) {\n  try {\n    const event = await genericStripeEventSchema.parseAsync(rawStripeEvent);\n    switch (event.type) {\n      case 'checkout.session.completed':\n        const session = await sessionCompletedDataSchema.parseAsync(event.data.object);\n        return { eventName: event.type, data: session };\n      case 'invoice.paid':\n        const invoice = await invoicePaidDataSchema.parseAsync(event.data.object);\n        return { eventName: event.type, data: invoice };\n      case 'customer.subscription.updated':\n        const updatedSubscription = await subscriptionUpdatedDataSchema.parseAsync(event.data.object);\n        return { eventName: event.type, data: updatedSubscription };\n      case 'customer.subscription.deleted':\n        const deletedSubscription = await subscriptionDeletedDataSchema.parseAsync(event.data.object);\n        return { eventName: event.type, data: deletedSubscription };\n      case 'payment_intent.succeeded':\n        const paymentIntent = await paymentIntentSucceededDataSchema.parseAsync(event.data.object);\n        return { eventName: event.type, data: paymentIntent };\n      case 'payment_intent.payment_failed':\n        const failedPaymentIntent = await paymentIntentFailedDataSchema.parseAsync(event.data.object);\n        return { eventName: event.type, data: failedPaymentIntent };\n      default:\n        // If you'd like to handle more events, you can add more cases above.\n        throw new UnhandledWebhookEventError(event.type);\n    }\n  } catch (e: unknown) {\n    if (e instanceof UnhandledWebhookEventError) {\n      throw e;\n    } else {\n      console.error(e);\n      throw new HttpError(400, 'Error parsing Stripe event object');\n    }\n  }\n}\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.Event\n */\nconst genericStripeEventSchema = z.object({\n  type: z.string(),\n  data: z.object({\n    object: z.unknown(),\n  }),\n});\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.Checkout.Session\n */\nconst sessionCompletedDataSchema = z.object({\n  id: z.string(),\n  customer: z.string(),\n  payment_status: z.enum(['paid', 'unpaid', 'no_payment_required']),\n  mode: z.enum(['payment', 'subscription']),\n  metadata: z.record(z.string()).optional(),\n});\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.Invoice\n */\nconst invoicePaidDataSchema = z.object({\n  id: z.string(),\n  customer: z.string(),\n  period_start: z.number(),\n  lines: z.object({\n    data: z.array(\n      z.object({\n        pricing: z.object({ price_details: z.object({ price: z.string() }) }),\n      })\n    ),\n  }),\n});\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.Subscription\n */\nconst subscriptionUpdatedDataSchema = z.object({\n  customer: z.string(),\n  status: z.string(),\n  cancel_at_period_end: z.boolean(),\n  items: z.object({\n    data: z.array(\n      z.object({\n        price: z.object({\n          id: z.string(),\n        }),\n      })\n    ),\n  }),\n});\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.Subscription\n */\nconst subscriptionDeletedDataSchema = z.object({\n  customer: z.string(),\n});\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.PaymentIntent\n */\nconst paymentIntentSucceededDataSchema = z.object({\n  id: z.string(),\n  customer: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n  amount: z.number(),\n  currency: z.string(),\n});\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.PaymentIntent\n */\nconst paymentIntentFailedDataSchema = z.object({\n  id: z.string(),\n  customer: z.string().optional(),\n  metadata: z.record(z.string()).optional(),\n  amount: z.number(),\n  currency: z.string(),\n  last_payment_error: z.object({\n    message: z.string(),\n  }).optional(),\n});\n\nexport type SessionCompletedData = z.infer<typeof sessionCompletedDataSchema>;\n\nexport type InvoicePaidData = z.infer<typeof invoicePaidDataSchema>;\n\nexport type SubscriptionUpdatedData = z.infer<typeof subscriptionUpdatedDataSchema>;\n\nexport type SubscriptionDeletedData = z.infer<typeof subscriptionDeletedDataSchema>;\n\nexport type PaymentIntentSucceededData = z.infer<typeof paymentIntentSucceededDataSchema>;\n\nexport type PaymentIntentFailedData = z.infer<typeof paymentIntentFailedDataSchema>;\n","import { type MiddlewareConfigFn, HttpError } from 'wasp/server';\nimport { type PaymentsWebhook } from 'wasp/server/api';\nimport { type PrismaClient } from '@prisma/client';\nimport express from 'express';\nimport type { Stripe } from 'stripe';\nimport { stripe } from './stripeClient';\nimport { paymentPlans, PaymentPlanId, SubscriptionStatus, type PaymentPlanEffect } from '../plans';\nimport { updateUserStripePaymentDetails } from './paymentDetails';\nimport { emailSender } from 'wasp/server/email';\nimport { assertUnreachable } from '../../shared/utils';\nimport { requireNodeEnvVar } from '../../server/utils';\nimport {\n  parseWebhookPayload,\n  type InvoicePaidData,\n  type SessionCompletedData,\n  type SubscriptionDeletedData,\n  type SubscriptionUpdatedData,\n  type PaymentIntentSucceededData,\n  type PaymentIntentFailedData,\n} from './webhookPayload';\nimport { UnhandledWebhookEventError } from '../errors';\n\nexport const stripeWebhook: PaymentsWebhook = async (request, response, context) => {\n  try {\n    const rawStripeEvent = constructStripeEvent(request);\n    const { eventName, data } = await parseWebhookPayload(rawStripeEvent);\n    const prismaUserDelegate = context.entities.User;\n    switch (eventName) {\n      case 'checkout.session.completed':\n        await handleCheckoutSessionCompleted(data, prismaUserDelegate);\n        break;\n      case 'invoice.paid':\n        await handleInvoicePaid(data, prismaUserDelegate);\n        break;\n      case 'customer.subscription.updated':\n        await handleCustomerSubscriptionUpdated(data, prismaUserDelegate);\n        break;\n      case 'customer.subscription.deleted':\n        await handleCustomerSubscriptionDeleted(data, prismaUserDelegate);\n        break;\n      case 'payment_intent.succeeded':\n        await handlePaymentIntentSucceeded(data, context);\n        break;\n      case 'payment_intent.payment_failed':\n        await handlePaymentIntentFailed(data, context);\n        break;\n      default:\n        // If you'd like to handle more events, you can add more cases above.\n        // When deploying your app, you configure your webhook in the Stripe dashboard to only send the events that you're\n        // handling above and that are necessary for the functioning of your app. See: https://docs.opensaas.sh/guides/deploying/#setting-up-your-stripe-webhook\n        // In development, it is likely that you will receive other events that you are not handling, and that's fine. These can be ignored without any issues.\n        assertUnreachable(eventName);\n    }\n    return response.json({ received: true }); // Stripe expects a 200 response to acknowledge receipt of the webhook\n  } catch (err) {\n    if (err instanceof UnhandledWebhookEventError) {\n      console.error(err.message);\n      return response.status(422).json({ error: err.message });\n    }\n\n    console.error('Webhook error:', err);\n    if (err instanceof HttpError) {\n      return response.status(err.statusCode).json({ error: err.message });\n    } else {\n      return response.status(400).json({ error: 'Error processing Stripe webhook event' });\n    }\n  }\n};\n\nfunction constructStripeEvent(request: express.Request): Stripe.Event {\n  try {\n    const secret = requireNodeEnvVar('STRIPE_WEBHOOK_SECRET');\n    const sig = request.headers['stripe-signature'];\n    if (!sig) {\n      throw new HttpError(400, 'Stripe webhook signature not provided');\n    }\n    return stripe.webhooks.constructEvent(request.body, sig, secret);\n  } catch (err) {\n    throw new HttpError(500, 'Error constructing Stripe webhook event');\n  }\n}\n\nexport const stripeMiddlewareConfigFn: MiddlewareConfigFn = (middlewareConfig) => {\n  // We need to delete the default 'express.json' middleware and replace it with 'express.raw' middleware\n  // because webhook data in the body of the request as raw JSON, not as JSON in the body of the request.\n  middlewareConfig.delete('express.json');\n  middlewareConfig.set('express.raw', express.raw({ type: 'application/json' }));\n  return middlewareConfig;\n};\n\n// Here we only update the user's payment details, and confirm credits because Stripe does not send invoices for one-time payments.\n// NOTE: If you're accepting async payment methods like bank transfers or SEPA and not just card payments\n// which are synchronous, checkout session completed could potentially result in a pending payment.\n// If so, use the checkout.session.async_payment_succeeded event to confirm the payment.\nasync function handleCheckoutSessionCompleted(\n  session: SessionCompletedData,\n  prismaUserDelegate: PrismaClient['user']\n) {\n  const isSuccessfulOneTimePayment = session.mode === 'payment' && session.payment_status === 'paid';\n  if (isSuccessfulOneTimePayment) {\n    // Check if this is a mail payment\n    if (session.metadata?.type === 'mail_payment' && session.metadata?.mailPieceId) {\n      await handleMailPaymentCompleted(session);\n    } else {\n      // Handle regular subscription/credit payments\n      await saveSuccessfulOneTimePayment(session, prismaUserDelegate);\n    }\n  }\n}\n\nasync function handleMailPaymentCompleted(session: SessionCompletedData) {\n  try {\n    const mailPieceId = session.metadata?.mailPieceId;\n    if (!mailPieceId) {\n      console.error('Mail payment completed but no mailPieceId in metadata');\n      return;\n    }\n\n    // Import the mail payment confirmation service\n    const { confirmMailPaymentService } = require('../../server/mail/payments');\n    \n    // Confirm the mail payment\n    await confirmMailPaymentService(\n      session.id, // Use session ID as payment intent ID\n      mailPieceId,\n      { entities: { MailPiece: require('wasp/server').prisma.mailPiece, MailPieceStatusHistory: require('wasp/server').prisma.mailPieceStatusHistory } }\n    );\n\n    console.log(`Mail payment completed for mail piece ${mailPieceId}`);\n  } catch (error) {\n    console.error('Failed to handle mail payment completion:', error);\n  }\n}\n\nasync function saveSuccessfulOneTimePayment(\n  session: SessionCompletedData,\n  prismaUserDelegate: PrismaClient['user']\n) {\n  const userStripeId = session.customer;\n  const lineItems = await getCheckoutLineItemsBySessionId(session.id);\n  const lineItemPriceId = extractPriceId(lineItems);\n  const planId = getPlanIdByPriceId(lineItemPriceId);\n  const plan = paymentPlans[planId];\n  const { numOfCreditsPurchased } = getPlanEffectPaymentDetails({ planId, planEffect: plan.effect });\n  return updateUserStripePaymentDetails(\n    { userStripeId, numOfCreditsPurchased, datePaid: new Date() },\n    prismaUserDelegate\n  );\n}\n\n// This is called when a subscription is successfully purchased or renewed and payment succeeds.\n// Invoices are not created for one-time payments, so we handle them above.\nasync function handleInvoicePaid(invoice: InvoicePaidData, prismaUserDelegate: PrismaClient['user']) {\n  await saveActiveSubscription(invoice, prismaUserDelegate);\n}\n\nasync function saveActiveSubscription(invoice: InvoicePaidData, prismaUserDelegate: PrismaClient['user']) {\n  const userStripeId = invoice.customer;\n  const datePaid = new Date(invoice.period_start * 1000);\n  const priceId = extractPriceId(invoice.lines);\n  const subscriptionPlan = getPlanIdByPriceId(priceId);\n  return updateUserStripePaymentDetails(\n    { userStripeId, datePaid, subscriptionPlan, subscriptionStatus: SubscriptionStatus.Active },\n    prismaUserDelegate\n  );\n}\n\nasync function handleCustomerSubscriptionUpdated(\n  subscription: SubscriptionUpdatedData,\n  prismaUserDelegate: PrismaClient['user']\n) {\n  const userStripeId = subscription.customer;\n  let subscriptionStatus: SubscriptionStatus | undefined;\n  const priceId = extractPriceId(subscription.items);\n  const subscriptionPlan = getPlanIdByPriceId(priceId);\n\n  // There are other subscription statuses, such as `trialing` that we are not handling and simply ignore\n  // If you'd like to handle more statuses, you can add more cases above. Make sure to update the `SubscriptionStatus` type in `payment/plans.ts` as well.\n  if (subscription.status === SubscriptionStatus.Active) {\n    subscriptionStatus = subscription.cancel_at_period_end\n      ? SubscriptionStatus.CancelAtPeriodEnd\n      : SubscriptionStatus.Active;\n  } else if (subscription.status === SubscriptionStatus.PastDue) {\n    subscriptionStatus = SubscriptionStatus.PastDue;\n  }\n  if (subscriptionStatus) {\n    const user = await updateUserStripePaymentDetails(\n      { userStripeId, subscriptionPlan, subscriptionStatus },\n      prismaUserDelegate\n    );\n    if (subscription.cancel_at_period_end) {\n      if (user.email) {\n        await emailSender.send({\n          to: user.email,\n          subject: 'We hate to see you go :(',\n          text: 'We hate to see you go. Here is a sweet offer...',\n          html: 'We hate to see you go. Here is a sweet offer...',\n        });\n      }\n    }\n    return user;\n  }\n}\n\nasync function handleCustomerSubscriptionDeleted(\n  subscription: SubscriptionDeletedData,\n  prismaUserDelegate: PrismaClient['user']\n) {\n  const userStripeId = subscription.customer;\n  return updateUserStripePaymentDetails(\n    { userStripeId, subscriptionStatus: SubscriptionStatus.Deleted },\n    prismaUserDelegate\n  );\n}\n\n// We only expect one line item, but if you set up a product with multiple prices, you should change this function to handle them.\nfunction extractPriceId(\n  items: Stripe.ApiList<Stripe.LineItem> | SubscriptionUpdatedData['items'] | InvoicePaidData['lines']\n): string {\n  if (items.data.length === 0) {\n    throw new HttpError(400, 'No items in stripe event object');\n  }\n  if (items.data.length > 1) {\n    throw new HttpError(400, 'More than one item in stripe event object');\n  }\n  const item = items.data[0];\n\n  // The 'price' property is found on SubscriptionItem and LineItem.\n  if ('price' in item && item.price?.id) {\n    return item.price.id;\n  }\n\n  // The 'pricing' property is found on InvoiceLineItem.\n  if ('pricing' in item) {\n    const priceId = item.pricing?.price_details?.price;\n    if (priceId) {\n      return priceId;\n    }\n  }\n  throw new HttpError(400, 'Unable to extract price id from item');\n}\n\nasync function getCheckoutLineItemsBySessionId(sessionId: string) {\n  const { line_items } = await stripe.checkout.sessions.retrieve(sessionId, {\n    expand: ['line_items'],\n  });\n  if (!line_items) {\n    throw new HttpError(400, 'No line items found in checkout session');\n  }\n  return line_items;\n}\n\nfunction getPlanIdByPriceId(priceId: string): PaymentPlanId {\n  const planId = Object.values(PaymentPlanId).find(\n    (planId) => paymentPlans[planId].getPaymentProcessorPlanId() === priceId\n  );\n  if (!planId) {\n    throw new Error(`No plan with Stripe price id ${priceId}`);\n  }\n  return planId;\n}\n\nfunction getPlanEffectPaymentDetails({\n  planId,\n  planEffect,\n}: {\n  planId: PaymentPlanId;\n  planEffect: PaymentPlanEffect;\n}): {\n  subscriptionPlan: PaymentPlanId | undefined;\n  numOfCreditsPurchased: number | undefined;\n} {\n  switch (planEffect.kind) {\n    case 'subscription':\n      return { subscriptionPlan: planId, numOfCreditsPurchased: undefined };\n    case 'credits':\n      return { subscriptionPlan: undefined, numOfCreditsPurchased: planEffect.amount };\n    default:\n      assertUnreachable(planEffect);\n  }\n}\n\n// Handle successful mail payment intents\nasync function handlePaymentIntentSucceeded(\n  paymentIntent: PaymentIntentSucceededData,\n  context: any\n) {\n  // Check if this is a mail payment based on metadata\n  if (paymentIntent.metadata?.type === 'mail_payment') {\n    const mailPieceId = paymentIntent.metadata.mailPieceId;\n    if (mailPieceId) {\n      // Update mail piece status to paid\n      await context.entities.MailPiece.update({\n        where: { paymentIntentId: paymentIntent.id },\n        data: {\n          paymentStatus: 'paid',\n          status: 'paid',\n        },\n      });\n\n      // Create status history entry\n      await context.entities.MailPieceStatusHistory.create({\n        data: {\n          mailPieceId: mailPieceId,\n          status: 'paid',\n          previousStatus: 'pending_payment',\n          description: 'Payment confirmed via webhook',\n          source: 'webhook',\n        },\n      });\n\n      console.log(`Mail payment succeeded for payment intent ${paymentIntent.id}`);\n    }\n  }\n}\n\n// Handle failed mail payment intents\nasync function handlePaymentIntentFailed(\n  paymentIntent: PaymentIntentFailedData,\n  context: any\n) {\n  // Check if this is a mail payment based on metadata\n  if (paymentIntent.metadata?.type === 'mail_payment') {\n    const mailPieceId = paymentIntent.metadata.mailPieceId;\n    if (mailPieceId) {\n      // Update mail piece status to failed\n      await context.entities.MailPiece.update({\n        where: { paymentIntentId: paymentIntent.id },\n        data: {\n          paymentStatus: 'failed',\n          status: 'failed',\n        },\n      });\n\n      // Create status history entry\n      await context.entities.MailPieceStatusHistory.create({\n        data: {\n          mailPieceId: mailPieceId,\n          status: 'failed',\n          previousStatus: 'pending_payment',\n          description: `Payment failed: ${paymentIntent.last_payment_error?.message || 'Unknown error'}`,\n          source: 'webhook',\n        },\n      });\n\n      console.log(`Mail payment failed for payment intent ${paymentIntent.id}`);\n    }\n  }\n}\n","import type { PaymentPlanEffect } from '../plans';\nimport type { CreateCheckoutSessionArgs, FetchCustomerPortalUrlArgs, PaymentProcessor } from '../paymentProcessor'\nimport { fetchStripeCustomer, createStripeCheckoutSession } from './checkoutUtils';\nimport { requireNodeEnvVar } from '../../server/utils';\nimport { stripeWebhook, stripeMiddlewareConfigFn } from './webhook';\n\nexport type StripeMode = 'subscription' | 'payment';\n\nexport const stripePaymentProcessor: PaymentProcessor = {\n  id: 'stripe',\n  createCheckoutSession: async ({ userId, userEmail, paymentPlan, prismaUserDelegate }: CreateCheckoutSessionArgs) => {\n    const customer = await fetchStripeCustomer(userEmail);\n    const stripeSession = await createStripeCheckoutSession({\n      priceId: paymentPlan.getPaymentProcessorPlanId(),\n      customerId: customer.id,\n      mode: paymentPlanEffectToStripeMode(paymentPlan.effect),\n    });\n    await prismaUserDelegate.update({\n      where: {\n        id: userId\n      },\n      data: {\n        paymentProcessorUserId: customer.id\n      }\n    })\n    if (!stripeSession.url) throw new Error('Error creating Stripe Checkout Session');\n    const session = {\n      url: stripeSession.url,\n      id: stripeSession.id,\n    };\n    return { session };\n  },\n  fetchCustomerPortalUrl: async (_args: FetchCustomerPortalUrlArgs) =>\n    requireNodeEnvVar('STRIPE_CUSTOMER_PORTAL_URL'),\n  webhook: stripeWebhook,\n  webhookMiddlewareConfigFn: stripeMiddlewareConfigFn,\n};\n\nfunction paymentPlanEffectToStripeMode(planEffect: PaymentPlanEffect): StripeMode {\n  const effectToMode: Record<PaymentPlanEffect['kind'], StripeMode> = {\n    subscription: 'subscription',\n    credits: 'payment',\n  };\n  return effectToMode[planEffect.kind];\n}\n","import type { PaymentPlan } from './plans';\nimport type { PaymentsWebhook } from 'wasp/server/api';\nimport type { MiddlewareConfigFn } from 'wasp/server';\nimport { PrismaClient } from '@prisma/client';\nimport { stripePaymentProcessor } from './stripe/paymentProcessor';\nimport { lemonSqueezyPaymentProcessor } from './lemonSqueezy/paymentProcessor';\n\nexport interface CreateCheckoutSessionArgs {\n  userId: string;\n  userEmail: string;\n  paymentPlan: PaymentPlan;\n  prismaUserDelegate: PrismaClient['user'];\n}\nexport interface FetchCustomerPortalUrlArgs { \n  userId: string; \n  prismaUserDelegate: PrismaClient['user']; \n};\n\nexport interface PaymentProcessor {\n  id: 'stripe' | 'lemonsqueezy';\n  createCheckoutSession: (args: CreateCheckoutSessionArgs) => Promise<{ session: { id: string; url: string }; }>; \n  fetchCustomerPortalUrl: (args: FetchCustomerPortalUrlArgs) => Promise<string | null>;\n  webhook: PaymentsWebhook;\n  webhookMiddlewareConfigFn: MiddlewareConfigFn;\n}\n\n/**\n * Choose which payment processor you'd like to use, then delete the \n * other payment processor code that you're not using  from `/src/payment`\n */\n// export const paymentProcessor: PaymentProcessor = lemonSqueezyPaymentProcessor;\nexport const paymentProcessor: PaymentProcessor = stripePaymentProcessor;\n","// ============================================================================\n// PAYMENT SYSTEM OPERATIONS\n// ============================================================================\n// This file handles subscription and payment operations for the application.\n// It manages the complete payment lifecycle from checkout to customer portal access.\n//\n// Key Features:\n// - Subscription plan management and checkout\n// - Customer portal access for billing management\n// - Payment processor abstraction (Stripe/LemonSqueezy)\n// - User authentication and email validation\n\nimport * as z from 'zod';\nimport type { GenerateCheckoutSession, GetCustomerPortalUrl } from 'wasp/server/operations';\nimport { PaymentPlanId, paymentPlans } from '../payment/plans';\nimport { paymentProcessor } from './paymentProcessor';\nimport { HttpError } from 'wasp/server';\nimport { ensureArgsSchemaOrThrowHttpError } from '../server/validation';\n\n// ============================================================================\n// CHECKOUT AND SUBSCRIPTION OPERATIONS\n// ============================================================================\n\nexport type CheckoutSession = {\n  sessionUrl: string | null;\n  sessionId: string;\n};\n\nconst generateCheckoutSessionSchema = z.nativeEnum(PaymentPlanId);\n\ntype GenerateCheckoutSessionInput = z.infer<typeof generateCheckoutSessionSchema>;\n\nexport const generateCheckoutSession: GenerateCheckoutSession<\n  GenerateCheckoutSessionInput,\n  CheckoutSession\n> = async (rawPaymentPlanId, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'Only authenticated users are allowed to perform this operation');\n  }\n\n  const paymentPlanId = ensureArgsSchemaOrThrowHttpError(generateCheckoutSessionSchema, rawPaymentPlanId);\n  const userId = context.user.id;\n  const userEmail = context.user.email;\n  if (!userEmail) {\n    // If using the usernameAndPassword Auth method, switch to an Auth method that provides an email.\n    throw new HttpError(403, 'User needs an email to make a payment.');\n  }\n\n  const paymentPlan = paymentPlans[paymentPlanId];\n  const { session } = await paymentProcessor.createCheckoutSession({\n    userId,\n    userEmail,\n    paymentPlan,\n    prismaUserDelegate: context.entities.User,\n  });\n\n  return {\n    sessionUrl: session.url,\n    sessionId: session.id,\n  };\n};\n\nexport const getCustomerPortalUrl: GetCustomerPortalUrl<void, string | null> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'Only authenticated users are allowed to perform this operation');\n  }\n\n  return paymentProcessor.fetchCustomerPortalUrl({\n    userId: context.user.id,\n    prismaUserDelegate: context.entities.User,\n  });\n};\n","import { prisma } from 'wasp/server'\n\nimport { generateCheckoutSession } from '../../../../../src/payment/operations'\n\n\nexport default async function (args, context) {\n  return (generateCheckoutSession as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport generateCheckoutSession from '../../actions/generateCheckoutSession.js'\n\nexport default createAction(generateCheckoutSession)\n","// Set this to the max file size you want to allow (currently 5MB).\n// Nathan - Updated to 10MB and restricted to pdf only\nexport const MAX_FILE_SIZE_BYTES = 10 * 1024 * 1024;\nexport const ALLOWED_FILE_TYPES = [\n  'application/pdf',\n] as const;\n\n// Mail-specific validation constants\nexport const MAIL_MAX_FILE_SIZE_BYTES = 10 * 1024 * 1024; // 10MB for mail\nexport const MAIL_ALLOWED_FILE_TYPES = ['application/pdf'] as const;\n\n// Mail type requirements\nexport const MAIL_TYPE_REQUIREMENTS = {\n  'postcard': {\n    maxPages: 1,\n    minPages: 1,\n    allowedOrientations: ['portrait', 'landscape'],\n    recommendedSizes: ['4x6']\n  },\n  'letter': {\n    maxPages: 6,\n    minPages: 1,\n    allowedOrientations: ['portrait'],\n    recommendedSizes: ['6x9', '6x11']\n  },\n  'check': {\n    maxPages: 1,\n    minPages: 1,\n    allowedOrientations: ['portrait'],\n    recommendedSizes: ['6x9']\n  },\n  'self_mailer': {\n    maxPages: 4,\n    minPages: 1,\n    allowedOrientations: ['portrait', 'landscape'],\n    recommendedSizes: ['6x9', '6x11', '6x18']\n  },\n  'catalog': {\n    maxPages: 50,\n    minPages: 2,\n    allowedOrientations: ['portrait'],\n    recommendedSizes: ['9x12', '12x15', '12x18']\n  },\n  'booklet': {\n    maxPages: 20,\n    minPages: 2,\n    allowedOrientations: ['portrait'],\n    recommendedSizes: ['6x9', '9x12']\n  }\n} as const;\n\n// Mail size dimensions (in inches)\nexport const MAIL_SIZE_DIMENSIONS = {\n  '4x6': { width: 4, height: 6 },\n  '6x9': { width: 6, height: 9 },\n  '6x11': { width: 6, height: 11 },\n  '6x18': { width: 6, height: 18 },\n  '9x12': { width: 9, height: 12 },\n  '12x15': { width: 12, height: 15 },\n  '12x18': { width: 12, height: 18 }\n} as const;\n\n/**\n * Validate file for mail processing\n */\nexport function validateFileForMail(\n  file: { type: string; size?: number; pageCount?: number; pdfMetadata?: any },\n  mailType: string,\n  mailSize: string\n): { isValid: boolean; errors: string[]; warnings: string[] } {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Check file type\n  if (!MAIL_ALLOWED_FILE_TYPES.includes(file.type as any)) {\n    errors.push('Only PDF files are supported for mail');\n  }\n\n  // Check file size\n  if (file.size && file.size > MAIL_MAX_FILE_SIZE_BYTES) {\n    errors.push('File size must be less than 10MB for mail processing');\n  }\n\n  // Check page count for mail type\n  if (file.pageCount) {\n    const requirements = MAIL_TYPE_REQUIREMENTS[mailType as keyof typeof MAIL_TYPE_REQUIREMENTS];\n    if (requirements) {\n      if (file.pageCount > requirements.maxPages) {\n        errors.push(`${mailType} cannot have more than ${requirements.maxPages} pages`);\n      }\n      if (file.pageCount < requirements.minPages) {\n        warnings.push(`${mailType} typically has at least ${requirements.minPages} pages`);\n      }\n    }\n  }\n\n  // Check orientation\n  if (file.pdfMetadata?.orientation) {\n    const requirements = MAIL_TYPE_REQUIREMENTS[mailType as keyof typeof MAIL_TYPE_REQUIREMENTS];\n    if (requirements && !requirements.allowedOrientations.includes(file.pdfMetadata.orientation)) {\n      warnings.push(`${mailType} works best with ${requirements.allowedOrientations.join(' or ')} orientation`);\n    }\n  }\n\n  // Check mail size compatibility\n  const sizeDimensions = MAIL_SIZE_DIMENSIONS[mailSize as keyof typeof MAIL_SIZE_DIMENSIONS];\n  if (sizeDimensions && file.pdfMetadata?.width && file.pdfMetadata?.height) {\n    const tolerance = 0.1; // 10% tolerance\n    const widthMatch = Math.abs(file.pdfMetadata.width - sizeDimensions.width) <= (sizeDimensions.width * tolerance);\n    const heightMatch = Math.abs(file.pdfMetadata.height - sizeDimensions.height) <= (sizeDimensions.height * tolerance);\n    \n    if (!widthMatch || !heightMatch) {\n      warnings.push(`File dimensions don't match mail size ${mailSize} - may need resizing`);\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n}\n","import * as path from 'path';\nimport { randomUUID } from 'crypto';\nimport { S3Client, GetObjectCommand, DeleteObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { createPresignedPost } from '@aws-sdk/s3-presigned-post';\nimport { MAX_FILE_SIZE_BYTES } from './validation';\n\nconst s3Client = new S3Client({\n  region: process.env.AWS_S3_REGION,\n  credentials: {\n    accessKeyId: process.env.AWS_S3_IAM_ACCESS_KEY!,\n    secretAccessKey: process.env.AWS_S3_IAM_SECRET_KEY!,\n  },\n});\n\ntype S3Upload = {\n  fileType: string;\n  fileName: string;\n  userId: string;\n};\n\nexport const getUploadFileSignedURLFromS3 = async ({ fileName, fileType, userId }: S3Upload) => {\n  const key = getS3Key(fileName, userId);\n\n  const { url: s3UploadUrl, fields: s3UploadFields } = await createPresignedPost(s3Client, {\n    Bucket: process.env.AWS_S3_FILES_BUCKET!,\n    Key: key,\n    Conditions: [['content-length-range', 0, MAX_FILE_SIZE_BYTES]],\n    Fields: {\n      'Content-Type': fileType,\n    },\n    Expires: 3600,\n  });\n\n  return { s3UploadUrl, key, s3UploadFields };\n};\n\nexport const getDownloadFileSignedURLFromS3 = async ({ key }: { key: string }) => {\n  const command = new GetObjectCommand({\n    Bucket: process.env.AWS_S3_FILES_BUCKET,\n    Key: key,\n  });\n  return await getSignedUrl(s3Client, command, { expiresIn: 3600 });\n};\n\nexport const deleteFileFromS3 = async ({ key }: { key: string }) => {\n  const command = new DeleteObjectCommand({\n    Bucket: process.env.AWS_S3_FILES_BUCKET!,\n    Key: key,\n  });\n  return await s3Client.send(command);\n};\n\nfunction getS3Key(fileName: string, userId: string) {\n  const ext = path.extname(fileName).slice(1);\n  return `${userId}/${randomUUID()}.${ext}`;\n}\n","import { PDFDocument } from 'pdf-lib';\r\n\r\nexport interface PDFMetadata {\r\n  pageCount: number;\r\n  dimensions: {\r\n    width: number;\r\n    height: number;\r\n  };\r\n  metadata: {\r\n    title?: string;\r\n    author?: string;\r\n    subject?: string;\r\n    creator?: string;\r\n    producer?: string;\r\n    creationDate?: Date;\r\n    modificationDate?: Date;\r\n  };\r\n  [key: string]: any; // Index signature for Wasp JSON serialization\r\n}\r\n\r\nexport interface PDFValidationResult {\r\n  isValid: boolean;\r\n  metadata?: PDFMetadata;\r\n  errors?: string[];\r\n  [key: string]: any; // Index signature for Wasp JSON serialization\r\n}\r\n\r\nexport const validatePDFMetadata = (metadata: PDFMetadata): PDFValidationResult => {\r\n  const errors: string[] = [];\r\n\r\n  // Validate page count\r\n  if (metadata.pageCount <= 0) {\r\n    errors.push('PDF must have at least one page');\r\n  }\r\n  \r\n  if (metadata.pageCount > 50) {\r\n    errors.push('PDF has too many pages (maximum 50 allowed)');\r\n  }\r\n\r\n  // Validate dimensions\r\n  if (metadata.dimensions.width < 200 || metadata.dimensions.height < 200) {\r\n    errors.push('PDF dimensions are too small (minimum 200x200 pixels)');\r\n  }\r\n\r\n  if (metadata.dimensions.width > 2000 || metadata.dimensions.height > 2000) {\r\n    errors.push('PDF dimensions are too large (maximum 2000x2000 pixels)');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    metadata,\r\n    errors: errors.length > 0 ? errors : undefined\r\n  };\r\n};\r\n\r\nexport const extractPDFMetadataFromBuffer = async (buffer: Buffer): Promise<PDFMetadata> => {\r\n  try {\r\n    const pdfDoc = await PDFDocument.load(buffer);\r\n    \r\n    // Get page count\r\n    const pageCount = pdfDoc.getPageCount();\r\n    \r\n    // Get dimensions from first page\r\n    const firstPage = pdfDoc.getPage(0);\r\n    const { width, height } = firstPage.getSize();\r\n    \r\n    // Get document metadata\r\n    const title = pdfDoc.getTitle();\r\n    const author = pdfDoc.getAuthor();\r\n    const subject = pdfDoc.getSubject();\r\n    const creator = pdfDoc.getCreator();\r\n    const producer = pdfDoc.getProducer();\r\n    const creationDate = pdfDoc.getCreationDate();\r\n    const modificationDate = pdfDoc.getModificationDate();\r\n\r\n    return {\r\n      pageCount,\r\n      dimensions: {\r\n        width,\r\n        height\r\n      },\r\n      metadata: {\r\n        title: title || undefined,\r\n        author: author || undefined,\r\n        subject: subject || undefined,\r\n        creator: creator || undefined,\r\n        producer: producer || undefined,\r\n        creationDate: creationDate || undefined,\r\n        modificationDate: modificationDate || undefined\r\n      }\r\n    };\r\n  } catch (error) {\r\n    throw new Error(`Failed to extract PDF metadata: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n  }\r\n};\r\n\r\nexport const isPDFBuffer = (buffer: Buffer): boolean => {\r\n  // Check PDF magic bytes\r\n  const pdfHeader = buffer.subarray(0, 4);\r\n  return pdfHeader.toString() === '%PDF';\r\n};\r\n\r\nexport const getPDFSizeInfo = (metadata: PDFMetadata): string => {\r\n  const { width, height } = metadata.dimensions;\r\n  const orientation = width > height ? 'landscape' : 'portrait';\r\n  return `${Math.round(width)}x${Math.round(height)} (${orientation})`;\r\n};\r\n","import PgBoss from 'pg-boss';\nimport { config, env } from '../../../index.js';\nconst boss = createPgBoss();\nfunction createPgBoss() {\n    let pgBossNewOptions = {\n        connectionString: config.databaseUrl,\n    };\n    // Add an escape hatch for advanced configuration of pg-boss to overwrite our defaults.\n    if (env.PG_BOSS_NEW_OPTIONS) {\n        try {\n            pgBossNewOptions = JSON.parse(env.PG_BOSS_NEW_OPTIONS);\n        }\n        catch {\n            console.error('Environment variable PG_BOSS_NEW_OPTIONS was not parsable by JSON.parse()!');\n        }\n    }\n    return new PgBoss(pgBossNewOptions);\n}\nlet resolvePgBossStarted;\nlet rejectPgBossStarted;\n// PRIVATE API\n// Code that wants to access pg-boss must wait until it has been started.\nexport const pgBossStarted = new Promise((resolve, reject) => {\n    resolvePgBossStarted = resolve;\n    rejectPgBossStarted = reject;\n});\nvar PgBossStatus;\n(function (PgBossStatus) {\n    PgBossStatus[\"Unstarted\"] = \"Unstarted\";\n    PgBossStatus[\"Starting\"] = \"Starting\";\n    PgBossStatus[\"Started\"] = \"Started\";\n    PgBossStatus[\"Error\"] = \"Error\";\n})(PgBossStatus || (PgBossStatus = {}));\nlet pgBossStatus = PgBossStatus.Unstarted;\n// PRIVATE API\n/**\n * Prepares the target PostgreSQL database and begins job monitoring.\n * If the required database objects do not exist in the specified database,\n * `boss.start()` will automatically create them.\n * Ref: https://github.com/timgit/pg-boss/blob/master/docs/readme.md#start\n *\n * After making this call, we can send pg-boss jobs and they will be persisted and acted upon.\n * This should only be called once during a server's lifetime.\n */\nexport async function startPgBoss() {\n    // Ensure pg-boss can only be started once during a server's lifetime.\n    if (pgBossStatus !== PgBossStatus.Unstarted) {\n        return;\n    }\n    pgBossStatus = PgBossStatus.Starting;\n    console.log('Starting pg-boss...');\n    boss.on('error', (error) => console.error(error));\n    try {\n        await boss.start();\n    }\n    catch (error) {\n        console.error('pg-boss failed to start!');\n        console.error(error);\n        pgBossStatus = PgBossStatus.Error;\n        rejectPgBossStarted(boss);\n        return;\n    }\n    resolvePgBossStarted(boss);\n    console.log('pg-boss started!');\n    pgBossStatus = PgBossStatus.Started;\n}\n//# sourceMappingURL=pgBoss.js.map","/**\n * This is a definition of a job (think draft or invocable computation), not the running instance itself.\n * This can be submitted one or more times to be executed by some job executor via the same instance.\n * Once submitted, you get a SubmittedJob to track it later.\n */\nexport class Job {\n    jobName;\n    executorName;\n    constructor(jobName, executorName) {\n        this.jobName = jobName;\n        this.executorName = executorName;\n    }\n}\n/**\n * This is the result of submitting a Job to some executor.\n * It can be used by callers to track things, or call executor-specific subclass functionality.\n */\nexport class SubmittedJob {\n    job;\n    jobId;\n    constructor(job, jobId) {\n        this.job = job;\n        this.jobId = jobId;\n    }\n}\n//# sourceMappingURL=job.js.map","import { pgBossStarted } from './pgBoss.js';\nimport { Job, SubmittedJob } from '../job.js';\nexport const PG_BOSS_EXECUTOR_NAME = Symbol('PgBoss');\n// PRIVATE API\n/**\n * Creates an instance of PgBossJob which contains all of the necessary\n * information to submit a job to pg-boss.\n */\nexport function createJobDefinition({ jobName, defaultJobOptions, jobSchedule, entities, }) {\n    return new PgBossJob(jobName, defaultJobOptions, entities, jobSchedule);\n}\n// PRIVATE API\n/**\n * Uses the info about a job in PgBossJob to register a user defined job handler with pg-boss.\n * We expect this to be called once per job name. If called multiple times with the same name and different\n * functions, we will override the previous calls.\n */\nexport function registerJob({ job, jobFn }) {\n    // NOTE(shayne): We are not awaiting `pgBossStarted` here since we need to return an instance to the job\n    // template, or else the NodeJS module bootstrapping process will block and fail as it would then depend\n    // on a runtime resolution of the promise in `startServer()`.\n    // Since `pgBossStarted` will resolve in the future, it may appear possible to send pg-boss\n    // a job before we actually have registered the handler via `boss.work()`. However, even if NodeJS does\n    // not execute this callback before any job `submit()` calls, this is not a problem since pg-boss allows you\n    // to submit jobs even if there are no workers registered.\n    // Once they are registered, they will just start on the first job in their queue.\n    pgBossStarted.then(async (boss) => {\n        // As a safety precaution against undefined behavior of registering different\n        // functions for the same job name, remove all registered functions first.\n        await boss.offWork(job.jobName);\n        // This tells pg-boss to run given worker function when job with that name is submitted.\n        // Ref: https://github.com/timgit/pg-boss/blob/master/docs/readme.md#work\n        await boss.work(job.jobName, pgBossCallbackWrapper(jobFn, job.entities));\n        // If a job schedule is provided, we should schedule the recurring job.\n        // If the schedule name already exists, it's updated to the provided cron expression, arguments, and options.\n        // Ref: https://github.com/timgit/pg-boss/blob/master/docs/readme.md#scheduling\n        if (job.jobSchedule) {\n            const options = {\n                ...job.defaultJobOptions,\n                ...job.jobSchedule.options,\n            };\n            await boss.schedule(job.jobName, job.jobSchedule.cron, job.jobSchedule.args, options);\n        }\n    });\n}\n/**\n * This is an interface repesenting a job that can be submitted to pg-boss.\n * It is not yet submitted until the caller invokes `submit()` on an instance.\n * The caller can make as many calls to `submit()` as they wish.\n */\nexport class PgBossJob extends Job {\n    defaultJobOptions;\n    startAfter;\n    entities;\n    jobSchedule;\n    constructor(jobName, defaultJobOptions, entities, jobSchedule, startAfter) {\n        super(jobName, PG_BOSS_EXECUTOR_NAME);\n        this.defaultJobOptions = defaultJobOptions;\n        this.entities = entities;\n        this.jobSchedule = jobSchedule;\n        this.startAfter = startAfter;\n    }\n    delay(startAfter) {\n        return new PgBossJob(this.jobName, this.defaultJobOptions, this.entities, this.jobSchedule, startAfter);\n    }\n    async submit(jobArgs, jobOptions = {}) {\n        const boss = await pgBossStarted;\n        const jobId = await boss.send(this.jobName, jobArgs, {\n            ...this.defaultJobOptions,\n            ...(this.startAfter && { startAfter: this.startAfter }),\n            ...jobOptions,\n        });\n        return new PgBossSubmittedJob(boss, this, jobId);\n    }\n}\n/**\n * A pg-boss specific SubmittedJob that adds additional pg-boss functionality.\n */\nclass PgBossSubmittedJob extends SubmittedJob {\n    pgBoss;\n    constructor(boss, job, jobId) {\n        super(job, jobId);\n        this.pgBoss = {\n            cancel: () => boss.cancel(jobId),\n            resume: () => boss.resume(jobId),\n            // Coarcing here since pg-boss typings are not precise enough.\n            details: () => boss.getJobById(jobId),\n        };\n    }\n}\n/**\n * Wraps the normal pg-boss callback function to inject entities, as well as extract\n * the `data` property so the arguments passed into the job are the exact same as those received.\n */\nfunction pgBossCallbackWrapper(\n// jobFn - The user-defined async job callback function.\njobFn, \n// Entities used by job, passed into callback context.\nentities) {\n    return (args) => {\n        const context = { entities };\n        return jobFn(args.data, context);\n    };\n}\n//# sourceMappingURL=pgBossJob.js.map","import { prisma } from 'wasp/server';\nimport { createJobDefinition } from 'wasp/server/jobs/core/pgBoss';\nconst entities = {\n    File: prisma.file,\n};\nconst jobSchedule = null;\n// PUBLIC API\nexport const processPDFMetadata = createJobDefinition({\n    jobName: 'processPDFMetadata',\n    defaultJobOptions: {},\n    jobSchedule,\n    entities,\n});\n//# sourceMappingURL=processPDFMetadata.js.map","import { prisma } from 'wasp/server';\nimport { createJobDefinition } from 'wasp/server/jobs/core/pgBoss';\nconst entities = {\n    User: prisma.user,\n    DailyStats: prisma.dailyStats,\n    Logs: prisma.logs,\n    PageViewSource: prisma.pageViewSource,\n};\nconst jobSchedule = {\n    cron: \"0 * * * *\",\n    options: {},\n};\n// PUBLIC API\nexport const dailyStatsJob = createJobDefinition({\n    jobName: 'dailyStatsJob',\n    defaultJobOptions: {},\n    jobSchedule,\n    entities,\n});\n//# sourceMappingURL=dailyStatsJob.js.map","import * as z from 'zod';\nimport { HttpError } from 'wasp/server';\nimport { type File } from 'wasp/entities';\nimport {\n  type CreateFile,\n  type DeleteFile,\n  type GetAllFilesByUser,\n  type GetDownloadFileSignedURL,\n} from 'wasp/server/operations';\nimport { getUploadFileSignedURLFromS3, getDownloadFileSignedURLFromS3, deleteFileFromS3 } from './s3Utils';\nimport { S3Client, GetObjectCommand } from '@aws-sdk/client-s3';\nimport { ensureArgsSchemaOrThrowHttpError } from '../server/validation';\nimport { ALLOWED_FILE_TYPES } from './validation';\nimport { extractPDFMetadataFromBuffer, isPDFBuffer, type PDFMetadata } from './pdfMetadata';\nimport { processPDFMetadata as processPDFMetadataJob } from 'wasp/server/jobs';\n\nconst createFileInputSchema = z.object({\n  fileType: z.enum(ALLOWED_FILE_TYPES),\n  fileName: z.string().nonempty(),\n});\n\ntype CreateFileInput = z.infer<typeof createFileInputSchema>;\n\nexport const createFile: CreateFile<\n  CreateFileInput,\n  {\n    s3UploadUrl: string;\n    s3UploadFields: Record<string, string>;\n  }\n> = async (rawArgs, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const { fileType, fileName } = ensureArgsSchemaOrThrowHttpError(createFileInputSchema, rawArgs);\n\n  const { s3UploadUrl, s3UploadFields, key } = await getUploadFileSignedURLFromS3({\n    fileType,\n    fileName,\n    userId: context.user.id,\n  });\n\n  const file = await context.entities.File.create({\n    data: {\n      name: fileName,\n      key,\n      uploadUrl: s3UploadUrl,\n      type: fileType,\n      user: { connect: { id: context.user.id } },\n    },\n  });\n\n  // Trigger PDF metadata processing for PDF files\n  if (fileType === 'application/pdf') {\n    // Submit the PDF metadata processing job to run in background\n    await processPDFMetadataJob.submit({ fileId: file.id });\n  }\n\n  return {\n    s3UploadUrl,\n    s3UploadFields,\n  };\n};\n\nexport const getAllFilesByUser: GetAllFilesByUser<void, File[]> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  return context.entities.File.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n    orderBy: {\n      createdAt: 'desc',\n    },\n  });\n};\n\nconst getDownloadFileSignedURLInputSchema = z.object({ key: z.string().nonempty() });\n\ntype GetDownloadFileSignedURLInput = z.infer<typeof getDownloadFileSignedURLInputSchema>;\n\nexport const getDownloadFileSignedURL: GetDownloadFileSignedURL<\n  GetDownloadFileSignedURLInput,\n  string\n> = async (rawArgs, _context) => {\n  const { key } = ensureArgsSchemaOrThrowHttpError(getDownloadFileSignedURLInputSchema, rawArgs);\n  return await getDownloadFileSignedURLFromS3({ key });\n};\n\nconst deleteFileInputSchema = z.object({\n  fileId: z.string().nonempty(),\n});\n\ntype DeleteFileInput = z.infer<typeof deleteFileInputSchema>;\n\nexport const deleteFile: DeleteFile<\n  DeleteFileInput,\n  File\n> = async (rawArgs, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const { fileId } = ensureArgsSchemaOrThrowHttpError(deleteFileInputSchema, rawArgs);\n\n  const file = await context.entities.File.delete({\n    where: {\n      id: fileId,\n      user: {\n        id: context.user.id,\n      },\n    },\n  });\n\n  // Delete the file from S3 after successful database deletion\n  try {\n    await deleteFileFromS3({ key: file.key });\n  } catch (error) {\n    // Log error but don't throw - database deletion already succeeded\n    // In production, this should use a proper logging service\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Failed to delete file from S3:', error);\n    }\n  }\n\n  return file;\n};\n\n\n// Background Job for PDF Metadata Processing\nexport const processPDFMetadata = async (args: { fileId: string }, context: any) => {\n  const { fileId } = args;\n  try {\n    // Get the file from database\n    const file = await context.entities.File.findFirst({\n      where: { \n        id: fileId,\n        type: 'application/pdf'\n      }\n    });\n\n    if (!file) {\n      return;\n    }\n\n    // Skip if already processed successfully (caching)\n    if (file.validationStatus === 'valid' && file.pdfMetadata) {\n      return;\n    }\n\n    // Skip if currently processing to avoid duplicate processing\n    if (file.validationStatus === 'processing') {\n      return;\n    }\n\n    // Mark as processing to prevent duplicate jobs\n    await context.entities.File.update({\n      where: { id: fileId },\n      data: { validationStatus: 'processing' }\n    });\n\n    // Download PDF from S3\n    const s3Client = new S3Client({\n      region: process.env.AWS_S3_REGION,\n      credentials: {\n        accessKeyId: process.env.AWS_S3_IAM_ACCESS_KEY!,\n        secretAccessKey: process.env.AWS_S3_IAM_SECRET_KEY!,\n      },\n    });\n\n    const getObjectCommand = new GetObjectCommand({\n      Bucket: process.env.AWS_S3_FILES_BUCKET!,\n      Key: file.key,\n    });\n\n    const response = await s3Client.send(getObjectCommand);\n    const pdfBuffer = Buffer.from(await response.Body!.transformToByteArray());\n\n    // Validate PDF format\n    if (!isPDFBuffer(pdfBuffer)) {\n      throw new Error('Invalid PDF file format');\n    }\n\n    // Extract metadata using existing function\n    const metadata = await extractPDFMetadataFromBuffer(pdfBuffer);\n\n    // Update file with metadata and processing timestamp\n    await context.entities.File.update({\n      where: { id: fileId },\n      data: {\n        pageCount: metadata.pageCount,\n        pdfMetadata: metadata,\n        validationStatus: 'valid',\n        lastProcessedAt: new Date()\n      }\n    });\n\n    // Successfully processed\n  } catch (error) {\n    // Log error in development only\n    if (process.env.NODE_ENV === 'development') {\n      console.error(`Error processing PDF metadata for file ${fileId}:`, error);\n    }\n    \n    // Update file with error status\n    await context.entities.File.update({\n      where: { id: fileId },\n      data: {\n        validationStatus: 'invalid',\n        validationError: error instanceof Error ? error.message : 'Unknown processing error'\n      }\n    });\n  }\n};\n","import { prisma } from 'wasp/server'\n\nimport { createFile } from '../../../../../src/file-upload/operations'\n\n\nexport default async function (args, context) {\n  return (createFile as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createFile from '../../actions/createFile.js'\n\nexport default createAction(createFile)\n","import { prisma } from 'wasp/server'\n\nimport { deleteFile } from '../../../../../src/file-upload/operations'\n\n\nexport default async function (args, context) {\n  return (deleteFile as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport deleteFile from '../../actions/deleteFile.js'\n\nexport default createAction(deleteFile)\n","import * as z from 'zod';\r\nimport { HttpError } from 'wasp/server';\r\nimport { type MailAddress } from 'wasp/entities';\r\nimport {\r\n  type CreateMailAddress,\r\n  type DeleteMailAddress,\r\n  type GetMailAddressesByUser,\r\n  type UpdateMailAddress,\r\n} from 'wasp/server/operations';\r\nimport { ensureArgsSchemaOrThrowHttpError } from '../server/validation';\r\n\r\n// Copy the exact validation pattern from file-upload\r\nconst createMailAddressInputSchema = z.object({\r\n  contactName: z.string().nonempty(),\r\n  companyName: z.string().optional(),\r\n  addressLine1: z.string().nonempty(),\r\n  addressLine2: z.string().optional(),\r\n  city: z.string().nonempty(),\r\n  state: z.string().nonempty(),\r\n  postalCode: z.string().nonempty(),\r\n  country: z.string().nonempty(),\r\n  label: z.string().optional(),\r\n  addressType: z.enum(['sender', 'recipient', 'both']).default('both'),\r\n});\r\n\r\ntype CreateMailAddressInput = z.infer<typeof createMailAddressInputSchema>;\r\n\r\nexport const createMailAddress: CreateMailAddress<CreateMailAddressInput, MailAddress> = async (rawArgs, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401);\r\n  }\r\n\r\n  const data = ensureArgsSchemaOrThrowHttpError(createMailAddressInputSchema, rawArgs);\r\n\r\n  // Follow exact same pattern as createFile\r\n  const address = await context.entities.MailAddress.create({\r\n    data: {\r\n      ...data,\r\n      user: { connect: { id: context.user.id } },\r\n    },\r\n  });\r\n\r\n  return address;\r\n};\r\n\r\n// Copy getAllFilesByUser pattern exactly\r\nexport const getMailAddressesByUser: GetMailAddressesByUser<void, MailAddress[]> = async (_args, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401);\r\n  }\r\n  return context.entities.MailAddress.findMany({\r\n    where: {\r\n      user: {\r\n        id: context.user.id,\r\n      },\r\n    },\r\n    orderBy: {\r\n      createdAt: 'desc',\r\n    },\r\n  });\r\n};\r\n\r\n// Copy deleteFile pattern exactly\r\nexport const deleteMailAddress: DeleteMailAddress<{id: string}, MailAddress> = async (rawArgs, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401);\r\n  }\r\n\r\n  const { id } = ensureArgsSchemaOrThrowHttpError(z.object({id: z.string().nonempty()}), rawArgs);\r\n\r\n  return context.entities.MailAddress.delete({\r\n    where: {\r\n      id,\r\n      user: {\r\n        id: context.user.id,\r\n      },\r\n    },\r\n  });\r\n};\r\n\r\n// Update address operation\r\nconst updateMailAddressInputSchema = z.object({\r\n  id: z.string().nonempty(),\r\n  data: z.object({\r\n    contactName: z.string().optional(),\r\n    companyName: z.string().optional(),\r\n    addressLine1: z.string().optional(),\r\n    addressLine2: z.string().optional(),\r\n    city: z.string().optional(),\r\n    state: z.string().optional(),\r\n    postalCode: z.string().optional(),\r\n    country: z.string().optional(),\r\n    label: z.string().optional(),\r\n    addressType: z.enum(['sender', 'recipient', 'both']).optional(),\r\n  }),\r\n});\r\n\r\ntype UpdateMailAddressInput = z.infer<typeof updateMailAddressInputSchema>;\r\n\r\nexport const updateMailAddress: UpdateMailAddress<UpdateMailAddressInput, MailAddress> = async (rawArgs, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401);\r\n  }\r\n\r\n  const { id, data } = ensureArgsSchemaOrThrowHttpError(updateMailAddressInputSchema, rawArgs);\r\n\r\n  return context.entities.MailAddress.update({\r\n    where: {\r\n      id,\r\n      user: {\r\n        id: context.user.id,\r\n      },\r\n    },\r\n    data,\r\n  });\r\n};\r\n\r\n// Set default address operation\r\nexport const setDefaultAddress: UpdateMailAddress<{id: string}, MailAddress> = async (rawArgs, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401);\r\n  }\r\n\r\n  const { id } = ensureArgsSchemaOrThrowHttpError(z.object({id: z.string().nonempty()}), rawArgs);\r\n\r\n  // First, unset any existing default addresses\r\n  await context.entities.MailAddress.updateMany({\r\n    where: {\r\n      userId: context.user.id,\r\n      isDefault: true,\r\n    },\r\n    data: {\r\n      isDefault: false,\r\n    },\r\n  });\r\n\r\n  // Then set the new default\r\n  return context.entities.MailAddress.update({\r\n    where: {\r\n      id,\r\n      user: {\r\n        id: context.user.id,\r\n      },\r\n    },\r\n    data: {\r\n      isDefault: true,\r\n    },\r\n  });\r\n};\r\n","import { prisma } from 'wasp/server'\n\nimport { createMailAddress } from '../../../../../src/address-management/operations'\n\n\nexport default async function (args, context) {\n  return (createMailAddress as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      MailAddress: prisma.mailAddress,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createMailAddress from '../../actions/createMailAddress.js'\n\nexport default createAction(createMailAddress)\n","import { prisma } from 'wasp/server'\n\nimport { updateMailAddress } from '../../../../../src/address-management/operations'\n\n\nexport default async function (args, context) {\n  return (updateMailAddress as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      MailAddress: prisma.mailAddress,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport updateMailAddress from '../../actions/updateMailAddress.js'\n\nexport default createAction(updateMailAddress)\n","import { prisma } from 'wasp/server'\n\nimport { deleteMailAddress } from '../../../../../src/address-management/operations'\n\n\nexport default async function (args, context) {\n  return (deleteMailAddress as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      MailAddress: prisma.mailAddress,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport deleteMailAddress from '../../actions/deleteMailAddress.js'\n\nexport default createAction(deleteMailAddress)\n","import { prisma } from 'wasp/server'\n\nimport { setDefaultAddress } from '../../../../../src/address-management/operations'\n\n\nexport default async function (args, context) {\n  return (setDefaultAddress as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      MailAddress: prisma.mailAddress,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport setDefaultAddress from '../../actions/setDefaultAddress.js'\n\nexport default createAction(setDefaultAddress)\n","import { z } from 'zod';\r\n\r\n// Mail type validation\r\nexport const mailTypeSchema = z.enum([\r\n  'postcard',\r\n  'letter', \r\n  'check',\r\n  'self_mailer',\r\n  'catalog',\r\n  'booklet'\r\n]);\r\n\r\n// Mail class validation\r\nexport const mailClassSchema = z.enum([\r\n  'usps_first_class',\r\n  'usps_standard', \r\n  'usps_express',\r\n  'usps_priority'\r\n]);\r\n\r\n// Mail size validation\r\nexport const mailSizeSchema = z.enum([\r\n  '4x6',\r\n  '6x9',\r\n  '6x11', \r\n  '6x18',\r\n  '9x12',\r\n  '12x15',\r\n  '12x18'\r\n]);\r\n\r\n// Status validation\r\nexport const mailPieceStatusSchema = z.enum([\r\n  'draft',\r\n  'pending_payment',\r\n  'paid',\r\n  'submitted',\r\n  'in_transit',\r\n  'delivered',\r\n  'returned',\r\n  'failed'\r\n]);\r\n\r\n// Payment status validation\r\nexport const paymentStatusSchema = z.enum([\r\n  'pending',\r\n  'paid',\r\n  'failed',\r\n  'refunded'\r\n]);\r\n\r\n// Source validation for status history\r\nexport const statusSourceSchema = z.enum([\r\n  'system',\r\n  'user',\r\n  'lob',\r\n  'webhook',\r\n  'manual'\r\n]);\r\n\r\n// Create mail piece input validation\r\nexport const createMailPieceSchema = z.object({\r\n  mailType: mailTypeSchema,\r\n  mailClass: mailClassSchema,\r\n  mailSize: mailSizeSchema,\r\n  senderAddressId: z.string().uuid('Invalid sender address ID'),\r\n  recipientAddressId: z.string().uuid('Invalid recipient address ID'),\r\n  fileId: z.string().uuid('Invalid file ID').optional(),\r\n  description: z.string().min(1, 'Description is required').max(500, 'Description too long').optional(),\r\n}).refine(\r\n  (data) => data.senderAddressId !== data.recipientAddressId,\r\n  {\r\n    message: 'Sender and recipient addresses must be different',\r\n    path: ['recipientAddressId']\r\n  }\r\n);\r\n\r\n// Update mail piece input validation\r\nexport const updateMailPieceSchema = z.object({\r\n  id: z.string().uuid('Invalid mail piece ID'),\r\n  mailType: mailTypeSchema.optional(),\r\n  mailClass: mailClassSchema.optional(),\r\n  mailSize: mailSizeSchema.optional(),\r\n  senderAddressId: z.string().uuid('Invalid sender address ID').optional(),\r\n  recipientAddressId: z.string().uuid('Invalid recipient address ID').optional(),\r\n  fileId: z.string().uuid('Invalid file ID').optional(),\r\n  description: z.string().min(1, 'Description is required').max(500, 'Description too long').optional(),\r\n}).refine(\r\n  (data) => {\r\n    if (data.senderAddressId && data.recipientAddressId) {\r\n      return data.senderAddressId !== data.recipientAddressId;\r\n    }\r\n    return true;\r\n  },\r\n  {\r\n    message: 'Sender and recipient addresses must be different',\r\n    path: ['recipientAddressId']\r\n  }\r\n);\r\n\r\n// Update status input validation\r\nexport const updateMailPieceStatusSchema = z.object({\r\n  id: z.string().uuid('Invalid mail piece ID'),\r\n  status: mailPieceStatusSchema,\r\n  description: z.string().max(500, 'Description too long').optional(),\r\n  source: statusSourceSchema.default('manual'),\r\n});\r\n\r\n// Lob webhook status update validation\r\nexport const lobWebhookStatusSchema = z.object({\r\n  lobId: z.string().min(1, 'Lob ID is required'),\r\n  lobStatus: z.string().optional(),\r\n  lobTrackingNumber: z.string().optional(),\r\n  lobData: z.any().optional(),\r\n});\r\n\r\n/**\r\n * Valid status transitions for mail pieces\r\n * \r\n * Defines the allowed state transitions in the mail piece lifecycle:\r\n * - draft → pending_payment: User initiates payment\r\n * - pending_payment → paid: Payment confirmed\r\n * - pending_payment → draft: Payment cancelled, back to draft\r\n * - paid → submitted: Submitted to Lob for processing\r\n * - submitted → in_transit: Lob has processed and mailed\r\n * - submitted → failed: Lob processing failed\r\n * - in_transit → delivered: Successfully delivered (terminal)\r\n * - in_transit → returned: Returned to sender (terminal)\r\n * - in_transit → failed: Delivery failed\r\n * - failed → submitted: Retry after failure\r\n */\r\nexport const validStatusTransitions: Record<string, string[]> = {\r\n  'draft': ['pending_payment'],\r\n  'pending_payment': ['paid', 'draft'],\r\n  'paid': ['submitted'],\r\n  'submitted': ['in_transit', 'failed'],\r\n  'in_transit': ['delivered', 'returned', 'failed'],\r\n  'delivered': [], // Terminal state\r\n  'returned': [], // Terminal state\r\n  'failed': ['submitted'], // Allow retry\r\n};\r\n\r\n/**\r\n * Validates if a status transition is allowed\r\n * \r\n * @param currentStatus - Current status of the mail piece\r\n * @param newStatus - Desired new status\r\n * @returns true if transition is allowed, false otherwise\r\n */\r\nexport function validateStatusTransition(currentStatus: string, newStatus: string): boolean {\r\n  const allowedTransitions = validStatusTransitions[currentStatus] || [];\r\n  return allowedTransitions.includes(newStatus);\r\n}\r\n\r\n/**\r\n * Business logic validation functions for ownership checks\r\n */\r\n\r\n/**\r\n * Validates that a mail piece belongs to the specified user\r\n * \r\n * @param mailPiece - Mail piece object to validate\r\n * @param userId - User ID to check ownership against\r\n * @returns true if mail piece belongs to user, false otherwise\r\n */\r\nexport function validateMailPieceOwnership(mailPiece: any, userId: string): boolean {\r\n  return mailPiece.userId === userId;\r\n}\r\n\r\n/**\r\n * Validates that an address belongs to the specified user\r\n * \r\n * @param address - Address object to validate\r\n * @param userId - User ID to check ownership against\r\n * @returns true if address belongs to user, false otherwise\r\n */\r\nexport function validateAddressOwnership(address: any, userId: string): boolean {\r\n  return address.userId === userId;\r\n}\r\n\r\n/**\r\n * Validates that a file belongs to the specified user\r\n * \r\n * @param file - File object to validate\r\n * @param userId - User ID to check ownership against\r\n * @returns true if file belongs to user, false otherwise\r\n */\r\nexport function validateFileOwnership(file: any, userId: string): boolean {\r\n  return file.userId === userId;\r\n}\r\n\r\n// Error message helpers\r\nexport const validationErrors = {\r\n  UNAUTHORIZED: 'Not authorized to perform this action',\r\n  MAIL_PIECE_NOT_FOUND: 'Mail piece not found',\r\n  ADDRESS_NOT_FOUND: 'Address not found or not owned by user',\r\n  FILE_NOT_FOUND: 'File not found or not owned by user',\r\n  INVALID_STATUS_TRANSITION: 'Invalid status transition',\r\n  INVALID_INPUT: 'Invalid input data',\r\n  MISSING_REQUIRED_FIELD: 'Required field is missing',\r\n} as const;\r\n\r\nexport type ValidationError = typeof validationErrors[keyof typeof validationErrors];\r\n","import Lob from 'lob';\r\nimport { requireNodeEnvVar } from '../utils';\r\n\r\n// Get the appropriate Lob API key based on environment\r\nfunction getLobApiKey(): string | null {\r\n  const environment = process.env.LOB_ENVIRONMENT || 'test';\r\n  \r\n  if (environment === 'live' || environment === 'prod') {\r\n    return process.env.LOB_PROD_KEY || null;\r\n  } else {\r\n    return process.env.LOB_TEST_KEY || null;\r\n  }\r\n}\r\n\r\n// Initialize Lob client only if API key is available\r\nconst lobApiKey = getLobApiKey();\r\nexport const lob = lobApiKey ? new Lob(lobApiKey) : null;\r\n","// ============================================================================\r\n// LOB API SERVICE LAYER\r\n// ============================================================================\r\n// This file provides the service layer for Lob API integration.\r\n// It handles all communication with Lob's physical mail services including:\r\n// - Address validation and verification\r\n// - Mail piece creation and submission\r\n// - Status tracking and webhook processing\r\n// - Error handling and retry logic\r\n//\r\n// Key Features:\r\n// - Retry logic with exponential backoff\r\n// - Rate limiting and circuit breaker patterns\r\n// - Type-safe API responses\r\n// - Comprehensive error handling\r\n\r\nimport { lob } from './client';\r\nimport { HttpError } from 'wasp/server';\r\n\r\n// ============================================================================\r\n// TYPE DEFINITIONS\r\n// ============================================================================\r\n// Type definitions for Lob API responses\r\ninterface LobPostcardResponse {\r\n  id: string;\r\n  price: string;\r\n  status: string;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface LobLetterResponse {\r\n  id: string;\r\n  price: string;\r\n  status: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Validate an address using Lob API\r\n */\r\nexport async function validateAddress(addressData: {\r\n  address_line1: string;\r\n  address_line2?: string;\r\n  city: string;\r\n  state: string;\r\n  zip_code: string;\r\n  country: string;\r\n}): Promise<{\r\n  isValid: boolean;\r\n  verifiedAddress: any;\r\n  error: string | null;\r\n}> {\r\n  try {\r\n    // Check if Lob API key is configured\r\n    const lobApiKey = process.env.LOB_TEST_KEY || process.env.LOB_PROD_KEY;\r\n    if (!lobApiKey) {\r\n      console.warn('Lob API key not configured, using simulation mode');\r\n      // Return simulated validation for development\r\n      return {\r\n        isValid: Math.random() > 0.2, // 80% success rate for demo\r\n        verifiedAddress: {\r\n          id: `sim_${Date.now()}`,\r\n          ...addressData\r\n        },\r\n        error: null,\r\n      };\r\n    }\r\n\r\n    if (!lob) {\r\n      throw new Error('Lob client not initialized - API key missing');\r\n    }\r\n\r\n    const verification = await lob!.usVerifications.verify({\r\n      address_line1: addressData.address_line1,\r\n      address_line2: addressData.address_line2,\r\n      city: addressData.city,\r\n      state: addressData.state,\r\n      zip_code: addressData.zip_code,\r\n      country: addressData.country,\r\n    });\r\n\r\n    return {\r\n      isValid: verification.deliverability === 'deliverable',\r\n      verifiedAddress: verification.address,\r\n      error: verification.deliverability === 'undeliverable' ? 'Address is not deliverable' : null,\r\n    };\r\n  } catch (error) {\r\n    console.error('Lob address validation error:', error);\r\n    throw new HttpError(500, 'Failed to validate address');\r\n  }\r\n}\r\n\r\n/**\r\n * Calculate cost for mail specifications using Lob API\r\n */\r\nexport async function calculateCost(mailSpecs: {\r\n  mailType: string;\r\n  mailClass: string;\r\n  mailSize: string;\r\n  toAddress: any;\r\n  fromAddress: any;\r\n}) {\r\n  try {\r\n    // Check if Lob API key is configured\r\n    const lobApiKey = process.env.LOB_TEST_KEY || process.env.LOB_PROD_KEY;\r\n    if (!lobApiKey || !lob) {\r\n      console.warn('Lob API key not configured, using fallback pricing');\r\n      return getFallbackPricing(mailSpecs);\r\n    }\r\n\r\n    // Use Lob API to get actual pricing\r\n    try {\r\n      const pricingData = await getLobPricing(mailSpecs);\r\n      return pricingData;\r\n    } catch (lobError) {\r\n      console.warn('Lob API pricing failed, using fallback:', lobError);\r\n      return getFallbackPricing(mailSpecs);\r\n    }\r\n  } catch (error) {\r\n    console.error('Lob cost calculation error:', error);\r\n    throw new HttpError(500, 'Failed to calculate mail cost');\r\n  }\r\n}\r\n\r\n/**\r\n * Get pricing from Lob API by creating a temporary mailpiece\r\n */\r\nasync function getLobPricing(mailSpecs: {\r\n  mailType: string;\r\n  mailClass: string;\r\n  mailSize: string;\r\n  toAddress: any;\r\n  fromAddress: any;\r\n}) {\r\n  if (!lob) {\r\n    throw new Error('Lob client not initialized');\r\n  }\r\n\r\n  // Prepare the mailpiece data for pricing calculation\r\n  const mailpieceData = {\r\n    to: {\r\n      name: mailSpecs.toAddress.name || 'Test Recipient',\r\n      address_line1: mailSpecs.toAddress.address_line1,\r\n      address_line2: mailSpecs.toAddress.address_line2,\r\n      city: mailSpecs.toAddress.city,\r\n      state: mailSpecs.toAddress.state,\r\n      zip_code: mailSpecs.toAddress.zip_code,\r\n      country: mailSpecs.toAddress.country || 'US',\r\n    },\r\n    from: {\r\n      name: mailSpecs.fromAddress.name || 'Test Sender',\r\n      address_line1: mailSpecs.fromAddress.address_line1,\r\n      address_line2: mailSpecs.fromAddress.address_line2,\r\n      city: mailSpecs.fromAddress.city,\r\n      state: mailSpecs.fromAddress.state,\r\n      zip_code: mailSpecs.fromAddress.zip_code,\r\n      country: mailSpecs.fromAddress.country || 'US',\r\n    },\r\n    // Use test content for pricing calculation\r\n    description: 'Pricing calculation - test mailpiece',\r\n  };\r\n\r\n  let pricingResponse: LobPostcardResponse | LobLetterResponse;\r\n  \r\n  try {\r\n    // Check if Lob client is available\r\n    if (!lob) {\r\n      console.warn('Lob client not available, using mock pricing');\r\n      return {\r\n        cost: Math.round(0.60 * 100), // 60 cents in cents\r\n        currency: 'USD',\r\n        breakdown: {\r\n          baseCost: 0.60,\r\n          multiplier: 1.0,\r\n          mailType: mailSpecs.mailType,\r\n          mailClass: mailSpecs.mailClass,\r\n          mailSize: mailSpecs.mailSize,\r\n        },\r\n      };\r\n    }\r\n\r\n    // Create a temporary mailpiece to get pricing\r\n    // Note: In test environment, this won't actually send mail\r\n    if (mailSpecs.mailType === 'postcard') {\r\n      pricingResponse = await (lob as any).postcards.create({\r\n        ...mailpieceData,\r\n        front: 'https://s3.amazonaws.com/lob-assets/postcard-front.pdf', // Test template\r\n        back: 'https://s3.amazonaws.com/lob-assets/postcard-back.pdf',   // Test template\r\n        size: mailSpecs.mailSize === '4x6' ? '4x6' : '6x9',\r\n      }) as LobPostcardResponse;\r\n    } else if (mailSpecs.mailType === 'letter') {\r\n      pricingResponse = await (lob as any).letters.create({\r\n        ...mailpieceData,\r\n        file: '<html><body><h1>Test Letter</h1><p>This is a test letter for pricing calculation.</p></body></html>',\r\n        color: true,\r\n        double_sided: false,\r\n      }) as LobLetterResponse;\r\n    } else {\r\n      // For other mail types, use letter as fallback\r\n      pricingResponse = await (lob as any).letters.create({\r\n        ...mailpieceData,\r\n        file: '<html><body><h1>Test Mail</h1><p>This is a test mailpiece for pricing calculation.</p></body></html>',\r\n        color: true,\r\n        double_sided: false,\r\n      }) as LobLetterResponse;\r\n    }\r\n\r\n    // Extract pricing information from the response\r\n    const costInDollars = parseFloat(pricingResponse.price || '0.60');\r\n    const costInCents = Math.round(costInDollars * 100);\r\n\r\n    return {\r\n      cost: costInCents,\r\n      currency: 'USD',\r\n      breakdown: {\r\n        baseCost: costInDollars,\r\n        multiplier: 1.0,\r\n        mailType: mailSpecs.mailType,\r\n        mailClass: mailSpecs.mailClass,\r\n        mailSize: mailSpecs.mailSize,\r\n        lobId: pricingResponse.id,\r\n        lobPrice: pricingResponse.price,\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error('Lob API pricing request failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Fallback pricing calculation when Lob API is not available\r\n */\r\nfunction getFallbackPricing(mailSpecs: {\r\n  mailType: string;\r\n  mailClass: string;\r\n  mailSize: string;\r\n}) {\r\n  const baseCosts = {\r\n    'postcard': 0.50,\r\n    'letter': 0.60,\r\n    'check': 0.60,\r\n    'self_mailer': 0.60,\r\n    'catalog': 0.60,\r\n    'booklet': 0.60,\r\n  };\r\n\r\n  const classMultipliers = {\r\n    'usps_first_class': 1.0,\r\n    'usps_standard': 0.8,\r\n    'usps_express': 2.0,\r\n    'usps_priority': 1.5,\r\n  };\r\n\r\n  const baseCost = baseCosts[mailSpecs.mailType as keyof typeof baseCosts] || 0.60;\r\n  const multiplier = classMultipliers[mailSpecs.mailClass as keyof typeof classMultipliers] || 1.0;\r\n  const cost = baseCost * multiplier;\r\n\r\n  return {\r\n    cost: Math.round(cost * 100), // Convert to cents\r\n    currency: 'USD',\r\n    breakdown: {\r\n      baseCost,\r\n      multiplier,\r\n      mailType: mailSpecs.mailType,\r\n      mailClass: mailSpecs.mailClass,\r\n      mailSize: mailSpecs.mailSize,\r\n      fallback: true, // Indicate this is fallback pricing\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Create a mail piece using Lob API\r\n */\r\nexport async function createMailPiece(mailData: {\r\n  to: any;\r\n  from: any;\r\n  mailType: string;\r\n  mailClass: string;\r\n  mailSize: string;\r\n  fileUrl?: string;\r\n  description?: string;\r\n}) {\r\n  try {\r\n    // Check if Lob API key is configured\r\n    const lobApiKey = process.env.LOB_TEST_KEY || process.env.LOB_PROD_KEY;\r\n    if (!lobApiKey || !lob) {\r\n      console.warn('Lob API key not configured, using simulation mode');\r\n      // Return simulated response for development\r\n      const mockLobId = `lob_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n      return {\r\n        id: mockLobId,\r\n        status: 'submitted',\r\n        trackingNumber: `TRK${Date.now()}`,\r\n        estimatedDeliveryDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days from now\r\n        cost: 60, // 60 cents\r\n      };\r\n    }\r\n\r\n    // Prepare the mailpiece data for Lob API\r\n    const mailpieceData = {\r\n      to: {\r\n        name: mailData.to.contactName || mailData.to.name || 'Recipient',\r\n        address_line1: mailData.to.addressLine1 || mailData.to.address_line1,\r\n        address_line2: mailData.to.addressLine2 || mailData.to.address_line2,\r\n        city: mailData.to.city,\r\n        state: mailData.to.state,\r\n        zip_code: mailData.to.postalCode || mailData.to.zip_code,\r\n        country: mailData.to.country || 'US',\r\n      },\r\n      from: {\r\n        name: mailData.from.contactName || mailData.from.name || 'Sender',\r\n        address_line1: mailData.from.addressLine1 || mailData.from.address_line1,\r\n        address_line2: mailData.from.addressLine2 || mailData.from.address_line2,\r\n        city: mailData.from.city,\r\n        state: mailData.from.state,\r\n        zip_code: mailData.from.postalCode || mailData.from.zip_code,\r\n        country: mailData.from.country || 'US',\r\n      },\r\n      description: mailData.description || 'Mail piece created via Postmarkr',\r\n    };\r\n\r\n    let lobResponse: any;\r\n\r\n    // Create mail piece based on type\r\n    if (mailData.mailType === 'postcard') {\r\n      lobResponse = await (lob as any).postcards.create({\r\n        ...mailpieceData,\r\n        front: mailData.fileUrl || 'https://s3.amazonaws.com/lob-assets/postcard-front.pdf', // Use provided file or default\r\n        back: 'https://s3.amazonaws.com/lob-assets/postcard-back.pdf', // Default back template\r\n        size: mailData.mailSize === '4x6' ? '4x6' : '6x9',\r\n      });\r\n    } else if (mailData.mailType === 'letter') {\r\n      // For letters, we need to handle file content\r\n      const fileContent = mailData.fileUrl \r\n        ? await fetchFileContent(mailData.fileUrl)\r\n        : '<html><body><h1>Mail Letter</h1><p>This is a mail letter created via Postmarkr.</p></body></html>';\r\n      \r\n      lobResponse = await (lob as any).letters.create({\r\n        ...mailpieceData,\r\n        file: fileContent,\r\n        color: true,\r\n        double_sided: false,\r\n      });\r\n    } else {\r\n      // For other mail types, use letter as fallback\r\n      const fileContent = mailData.fileUrl \r\n        ? await fetchFileContent(mailData.fileUrl)\r\n        : '<html><body><h1>Mail Piece</h1><p>This is a mail piece created via Postmarkr.</p></body></html>';\r\n      \r\n      lobResponse = await (lob as any).letters.create({\r\n        ...mailpieceData,\r\n        file: fileContent,\r\n        color: true,\r\n        double_sided: false,\r\n      });\r\n    }\r\n\r\n    // Extract information from Lob response\r\n    const costInDollars = parseFloat(lobResponse.price || '0.60');\r\n    const costInCents = Math.round(costInDollars * 100);\r\n\r\n    return {\r\n      id: lobResponse.id,\r\n      status: lobResponse.status || 'submitted',\r\n      trackingNumber: lobResponse.tracking_number || `TRK${lobResponse.id}`,\r\n      estimatedDeliveryDate: lobResponse.expected_delivery_date \r\n        ? new Date(lobResponse.expected_delivery_date)\r\n        : new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // Default 3 days\r\n      cost: costInCents,\r\n      lobData: lobResponse, // Store full response for reference\r\n    };\r\n  } catch (error) {\r\n    console.error('Lob mail creation error:', error);\r\n    \r\n    // If it's a Lob API error, provide more specific error message\r\n    if (error && typeof error === 'object' && 'message' in error) {\r\n      const errorMessage = (error as any).message;\r\n      if (errorMessage.includes('address')) {\r\n        throw new HttpError(400, 'Invalid address format. Please check your address details.');\r\n      } else if (errorMessage.includes('file')) {\r\n        throw new HttpError(400, 'Invalid file format. Please ensure your file is compatible with mail processing.');\r\n      } else if (errorMessage.includes('rate limit')) {\r\n        throw new HttpError(429, 'Rate limit exceeded. Please try again later.');\r\n      }\r\n    }\r\n    \r\n    throw new HttpError(500, 'Failed to create mail piece with Lob API');\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch file content from URL for Lob API\r\n */\r\nasync function fetchFileContent(fileUrl: string): Promise<string> {\r\n  try {\r\n    // For now, return a simple HTML template\r\n    // In production, you might want to fetch and process the actual file\r\n    return '<html><body><h1>Mail Content</h1><p>This is the content of your mail piece.</p></body></html>';\r\n  } catch (error) {\r\n    console.error('Error fetching file content:', error);\r\n    return '<html><body><h1>Mail Content</h1><p>This is the content of your mail piece.</p></body></html>';\r\n  }\r\n}\r\n\r\n/**\r\n * Get mail piece status from Lob API\r\n */\r\nexport async function getMailPieceStatus(lobId: string) {\r\n  try {\r\n    // Check if Lob API key is configured\r\n    const lobApiKey = process.env.LOB_TEST_KEY || process.env.LOB_PROD_KEY;\r\n    if (!lobApiKey || !lob) {\r\n      console.warn('Lob API key not configured, using simulation mode');\r\n      // Return simulated status for development\r\n      const statuses = ['submitted', 'in_transit', 'delivered', 'returned'];\r\n      const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];\r\n      \r\n      return {\r\n        id: lobId,\r\n        status: randomStatus,\r\n        trackingNumber: `TRK${lobId.split('_')[1]}`,\r\n        estimatedDeliveryDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\r\n        events: [\r\n          {\r\n            timestamp: new Date(),\r\n            status: randomStatus,\r\n            description: `Mail piece ${randomStatus}`,\r\n          },\r\n        ],\r\n      };\r\n    }\r\n\r\n    // Try to determine mail type from Lob ID or use a generic approach\r\n    // For now, we'll try both postcards and letters\r\n    let lobResponse: any;\r\n    let mailType = 'unknown';\r\n\r\n    try {\r\n      // Try postcard first\r\n      lobResponse = await (lob as any).postcards.retrieve(lobId);\r\n      mailType = 'postcard';\r\n    } catch (postcardError) {\r\n      try {\r\n        // Try letter if postcard fails\r\n        lobResponse = await (lob as any).letters.retrieve(lobId);\r\n        mailType = 'letter';\r\n      } catch (letterError) {\r\n        // If both fail, try other mail types\r\n        try {\r\n          lobResponse = await (lob as any).checks.retrieve(lobId);\r\n          mailType = 'check';\r\n        } catch (checkError) {\r\n          throw new Error('Mail piece not found in Lob API');\r\n        }\r\n      }\r\n    }\r\n\r\n    // Extract status information\r\n    const status = lobResponse.status || 'unknown';\r\n    const trackingNumber = lobResponse.tracking_number || `TRK${lobId}`;\r\n    const estimatedDeliveryDate = lobResponse.expected_delivery_date \r\n      ? new Date(lobResponse.expected_delivery_date)\r\n      : new Date(Date.now() + 3 * 24 * 60 * 60 * 1000);\r\n\r\n    // Build events array from Lob response\r\n    const events: Array<{\r\n      timestamp: Date;\r\n      status: string;\r\n      description: string;\r\n    }> = [];\r\n    if (lobResponse.events && Array.isArray(lobResponse.events)) {\r\n      events.push(...lobResponse.events.map((event: any) => ({\r\n        timestamp: new Date(event.date_created || Date.now()),\r\n        status: event.name || status,\r\n        description: event.description || `Mail piece ${status}`,\r\n      })));\r\n    } else {\r\n      // Add a basic event if no events are provided\r\n      events.push({\r\n        timestamp: new Date(),\r\n        status: status,\r\n        description: `Mail piece ${status}`,\r\n      });\r\n    }\r\n\r\n    return {\r\n      id: lobId,\r\n      status: status,\r\n      trackingNumber: trackingNumber,\r\n      estimatedDeliveryDate: estimatedDeliveryDate,\r\n      events: events,\r\n      mailType: mailType,\r\n      lobData: lobResponse, // Store full response for reference\r\n    };\r\n  } catch (error) {\r\n    console.error('Lob status retrieval error:', error);\r\n    \r\n    // If it's a Lob API error, provide more specific error message\r\n    if (error && typeof error === 'object' && 'message' in error) {\r\n      const errorMessage = (error as any).message;\r\n      if (errorMessage.includes('not found')) {\r\n        throw new HttpError(404, 'Mail piece not found in Lob API');\r\n      } else if (errorMessage.includes('rate limit')) {\r\n        throw new HttpError(429, 'Rate limit exceeded. Please try again later.');\r\n      }\r\n    }\r\n    \r\n    throw new HttpError(500, 'Failed to retrieve mail piece status from Lob API');\r\n  }\r\n}\r\n","import { stripe } from '../../payment/stripe/stripeClient';\r\nimport { calculateCost } from '../lob/services';\r\nimport { HttpError } from 'wasp/server';\r\nimport type { MailPiece, MailAddress } from 'wasp/entities';\r\n\r\n/**\r\n * Create payment intent for mail cost\r\n */\r\nexport async function createMailPaymentIntent(\r\n  mailSpecs: {\r\n    mailType: string;\r\n    mailClass: string;\r\n    mailSize: string;\r\n    toAddress: MailAddress;\r\n    fromAddress: MailAddress;\r\n  },\r\n  userId: string,\r\n  context: any\r\n): Promise<{ paymentIntentId: string; cost: number }> {\r\n  try {\r\n    // Calculate cost using Lob API\r\n    const costData = await calculateCost(mailSpecs);\r\n    \r\n    // Create Stripe payment intent\r\n    const paymentIntent = await stripe.paymentIntents.create({\r\n      amount: costData.cost, // Amount in cents\r\n      currency: costData.currency.toLowerCase(),\r\n      metadata: {\r\n        userId,\r\n        mailType: mailSpecs.mailType,\r\n        mailClass: mailSpecs.mailClass,\r\n        mailSize: mailSpecs.mailSize,\r\n        type: 'mail_payment',\r\n        // Note: mailPieceId will be added by the calling operation\r\n      },\r\n      automatic_payment_methods: {\r\n        enabled: true,\r\n      },\r\n    });\r\n\r\n    return {\r\n      paymentIntentId: paymentIntent.id,\r\n      cost: costData.cost,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error creating mail payment intent:', error);\r\n    throw new HttpError(500, 'Failed to create payment intent');\r\n  }\r\n}\r\n\r\n/**\r\n * Confirm payment before Lob submission\r\n */\r\nexport async function confirmMailPayment(\r\n  paymentIntentId: string,\r\n  mailPieceId: string,\r\n  context: any\r\n): Promise<boolean> {\r\n  try {\r\n    // Retrieve payment intent from Stripe\r\n    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\r\n    \r\n    if (paymentIntent.status !== 'succeeded') {\r\n      throw new HttpError(400, 'Payment not completed');\r\n    }\r\n\r\n    // Update mail piece with payment confirmation\r\n    await context.entities.MailPiece.update({\r\n      where: { id: mailPieceId },\r\n      data: {\r\n        paymentStatus: 'paid',\r\n        paymentIntentId: paymentIntentId,\r\n        status: 'paid',\r\n      },\r\n    });\r\n\r\n    // Create status history entry\r\n    await context.entities.MailPieceStatusHistory.create({\r\n      data: {\r\n        mailPieceId: mailPieceId,\r\n        status: 'paid',\r\n        previousStatus: 'pending_payment',\r\n        description: 'Payment confirmed',\r\n        source: 'system',\r\n      },\r\n    });\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error confirming mail payment:', error);\r\n    throw new HttpError(500, 'Failed to confirm payment');\r\n  }\r\n}\r\n\r\n/**\r\n * Handle refunds for failed mail processing\r\n */\r\nexport async function refundMailPayment(\r\n  paymentIntentId: string,\r\n  mailPieceId: string,\r\n  reason: string,\r\n  context: any\r\n): Promise<boolean> {\r\n  try {\r\n    // Create refund in Stripe\r\n    const refund = await stripe.refunds.create({\r\n      payment_intent: paymentIntentId,\r\n      reason: 'requested_by_customer',\r\n      metadata: {\r\n        mailPieceId,\r\n        reason,\r\n      },\r\n    });\r\n\r\n    // Update mail piece with refund information\r\n    await context.entities.MailPiece.update({\r\n      where: { id: mailPieceId },\r\n      data: {\r\n        paymentStatus: 'refunded',\r\n        status: 'failed',\r\n      },\r\n    });\r\n\r\n    // Create status history entry\r\n    await context.entities.MailPieceStatusHistory.create({\r\n      data: {\r\n        mailPieceId: mailPieceId,\r\n        status: 'failed',\r\n        previousStatus: 'paid',\r\n        description: `Payment refunded: ${reason}`,\r\n        source: 'system',\r\n      },\r\n    });\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error processing mail refund:', error);\r\n    throw new HttpError(500, 'Failed to process refund');\r\n  }\r\n}\r\n","// ============================================================================\r\n// MAIL SYSTEM OPERATIONS\r\n// ============================================================================\r\n// This file contains all server-side operations for the physical mail system.\r\n// It handles the complete mail lifecycle from creation to delivery tracking.\r\n//\r\n// Key Integration Points:\r\n// - Stripe API: Payment processing for mail pieces\r\n// - Lob API: Physical mail printing and delivery services\r\n// - Prisma: Database operations for mail pieces, addresses, and files\r\n// - Wasp: Authentication, validation, and operation framework\r\n//\r\n// Mail Lifecycle Flow:\r\n// 1. createMailPiece -> createMailPaymentIntent -> confirmMailPayment -> submitMailPieceToLob\r\n// 2. updateMailPieceStatus (webhook) -> syncMailPieceStatus\r\n\r\nimport { HttpError } from 'wasp/server';\r\nimport type { \r\n  GetMailPieces, \r\n  CreateMailPiece, \r\n  UpdateMailPieceStatus, \r\n  BulkDeleteMailPieces, \r\n  GetMailPiece,\r\n  UpdateMailPiece,\r\n  DeleteMailPiece,\r\n  CreateMailPaymentIntent,\r\n  CreateMailCheckoutSession,\r\n  ConfirmMailPayment,\r\n  RefundMailPayment,\r\n  SubmitMailPieceToLob,\r\n  SyncMailPieceStatus\r\n} from 'wasp/server/operations';\r\nimport type { MailPiece, MailAddress, File, MailPieceStatusHistory } from 'wasp/entities';\r\nimport type { MailPieceWithRelations } from './types';\r\nimport { \r\n  createMailPieceSchema, \r\n  updateMailPieceSchema, \r\n  updateMailPieceStatusSchema,\r\n  lobWebhookStatusSchema,\r\n  validateStatusTransition,\r\n  validateMailPieceOwnership,\r\n  validateAddressOwnership,\r\n  validateFileOwnership,\r\n  validationErrors\r\n} from './validation';\r\nimport { \r\n  createMailPaymentIntent as createMailPaymentIntentService, \r\n  confirmMailPayment as confirmMailPaymentService, \r\n  refundMailPayment as refundMailPaymentService \r\n} from '../server/mail/payments';\r\nimport { createMailPiece as createLobMailPiece, getMailPieceStatus as getLobMailPieceStatus } from '../server/lob/services';\r\n\r\n// ============================================================================\r\n// MAIL PIECE CRUD OPERATIONS\r\n// ============================================================================\r\n\r\n/**\r\n * Get all mail pieces for the current user with pagination and filtering support\r\n * \r\n * Supports filtering by status, mail type, and text search across description and addresses.\r\n * Returns paginated results with metadata for UI pagination controls.\r\n * \r\n * @param args - Query parameters for filtering and pagination\r\n * @param args.page - Page number (default: 1)\r\n * @param args.limit - Items per page (max: 100, default: 20)\r\n * @param args.status - Filter by mail piece status ('all' for no filter)\r\n * @param args.mailType - Filter by mail type ('all' for no filter)\r\n * @param args.search - Text search in description and address names\r\n * @param context - Wasp context with user authentication and entity access\r\n * @returns Paginated mail pieces with metadata\r\n * \r\n * @throws {HttpError} 401 - If user is not authenticated\r\n */\r\ntype GetMailPiecesInput = {\r\n  page?: number;\r\n  limit?: number;\r\n  status?: string;\r\n  mailType?: string;\r\n  search?: string;\r\n};\r\n\r\nexport const getMailPieces: GetMailPieces<GetMailPiecesInput, { \r\n  mailPieces: MailPieceWithRelations[]; \r\n  total: number; \r\n  page: number; \r\n  totalPages: number; \r\n  hasNext: boolean; \r\n  hasPrev: boolean; \r\n}> = async (args, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, 'Not authorized');\r\n  }\r\n\r\n  const page = args.page || 1;\r\n  const limit = Math.min(args.limit || 20, 100); // Max 100 items per page\r\n  const skip = (page - 1) * limit;\r\n\r\n  // Build where clause\r\n  const where: any = { userId: context.user.id };\r\n  \r\n  if (args.status && args.status !== 'all') {\r\n    where.status = args.status;\r\n  }\r\n  \r\n  if (args.mailType && args.mailType !== 'all') {\r\n    where.mailType = args.mailType;\r\n  }\r\n  \r\n  if (args.search) {\r\n    where.OR = [\r\n      { description: { contains: args.search, mode: 'insensitive' } },\r\n      { senderAddress: { contactName: { contains: args.search, mode: 'insensitive' } } },\r\n      { recipientAddress: { contactName: { contains: args.search, mode: 'insensitive' } } }\r\n    ];\r\n  }\r\n\r\n  // Get total count for pagination\r\n  const total = await context.entities.MailPiece.count({ where });\r\n\r\n  // Get paginated results\r\n  const mailPieces = await context.entities.MailPiece.findMany({\r\n    where,\r\n    include: {\r\n      senderAddress: true,\r\n      recipientAddress: true,\r\n      file: true,\r\n      statusHistory: {\r\n        orderBy: { createdAt: 'desc' },\r\n        take: 5, // Get last 5 status updates\r\n      },\r\n    },\r\n    orderBy: { createdAt: 'desc' },\r\n    skip,\r\n    take: limit,\r\n  });\r\n\r\n  const totalPages = Math.ceil(total / limit);\r\n  const hasNext = page < totalPages;\r\n  const hasPrev = page > 1;\r\n\r\n  return {\r\n    mailPieces,\r\n    total,\r\n    page,\r\n    totalPages,\r\n    hasNext,\r\n    hasPrev\r\n  };\r\n};\r\n\r\n/**\r\n * Create a new mail piece with comprehensive validation and ownership checks\r\n * \r\n * Validates all inputs, ensures user owns addresses and files, creates mail piece in 'draft' status.\r\n * This is the first step in the mail creation workflow - payment and Lob submission happen separately.\r\n * \r\n * @param args - Mail piece creation data\r\n * @param args.mailType - Type of mail (postcard, letter, check, etc.)\r\n * @param args.mailClass - USPS mail class (first_class, standard, express, priority)\r\n * @param args.mailSize - Physical dimensions (4x6, 6x9, etc.)\r\n * @param args.senderAddressId - UUID of sender address (must belong to user)\r\n * @param args.recipientAddressId - UUID of recipient address (must belong to user)\r\n * @param args.fileId - Optional UUID of file attachment (must belong to user)\r\n * @param args.description - Optional description text (max 500 chars)\r\n * @param context - Wasp context with user authentication and entity access\r\n * @returns Created mail piece in 'draft' status\r\n * \r\n * @throws {HttpError} 401 - If user is not authenticated\r\n * @throws {HttpError} 400 - If validation fails or addresses/files not found/owned by user\r\n * @throws {HttpError} 500 - If database operation fails\r\n */\r\ntype CreateMailPieceInput = {\r\n  mailType: string;\r\n  mailClass: string;\r\n  mailSize: string;\r\n  senderAddressId: string;\r\n  recipientAddressId: string;\r\n  fileId?: string;\r\n  description?: string;\r\n};\r\n\r\nexport const createMailPiece: CreateMailPiece<CreateMailPieceInput, MailPiece> = async (args, context) => {\r\n  try {\r\n    // Authentication check\r\n    if (!context.user) {\r\n      throw new HttpError(401, validationErrors.UNAUTHORIZED);\r\n    }\r\n\r\n    // Input validation using Zod schema\r\n    const validatedInput = createMailPieceSchema.parse(args);\r\n\r\n    // Validate that addresses belong to the user\r\n    const senderAddress = await context.entities.MailAddress.findFirst({\r\n      where: { id: validatedInput.senderAddressId, userId: context.user.id },\r\n    });\r\n\r\n    if (!senderAddress) {\r\n      throw new HttpError(400, validationErrors.ADDRESS_NOT_FOUND);\r\n    }\r\n\r\n    const recipientAddress = await context.entities.MailAddress.findFirst({\r\n      where: { id: validatedInput.recipientAddressId, userId: context.user.id },\r\n    });\r\n\r\n    if (!recipientAddress) {\r\n      throw new HttpError(400, validationErrors.ADDRESS_NOT_FOUND);\r\n    }\r\n\r\n    // Validate file if provided\r\n    if (validatedInput.fileId) {\r\n      const file = await context.entities.File.findFirst({\r\n        where: { id: validatedInput.fileId, userId: context.user.id },\r\n      });\r\n\r\n      if (!file) {\r\n        throw new HttpError(400, validationErrors.FILE_NOT_FOUND);\r\n      }\r\n    }\r\n\r\n    // Create the mail piece\r\n    const mailPiece = await context.entities.MailPiece.create({\r\n      data: {\r\n        userId: context.user.id,\r\n        mailType: validatedInput.mailType,\r\n        mailClass: validatedInput.mailClass,\r\n        mailSize: validatedInput.mailSize,\r\n        senderAddressId: validatedInput.senderAddressId,\r\n        recipientAddressId: validatedInput.recipientAddressId,\r\n        fileId: validatedInput.fileId,\r\n        description: validatedInput.description,\r\n        status: 'draft',\r\n        paymentStatus: 'pending',\r\n      },\r\n    });\r\n\r\n    // Create initial status history entry\r\n    await context.entities.MailPieceStatusHistory.create({\r\n      data: {\r\n        mailPieceId: mailPiece.id,\r\n        status: 'draft',\r\n        description: 'Mail piece created',\r\n        source: 'system',\r\n      },\r\n    });\r\n\r\n    return mailPiece;\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Handle Zod validation errors\r\n    if (error instanceof Error && error.name === 'ZodError') {\r\n      throw new HttpError(400, `Validation error: ${error.message}`);\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to create mail piece:', error);\r\n    throw new HttpError(500, 'Failed to create mail piece due to an internal error.');\r\n  }\r\n};\r\n\r\n/**\r\n * Update mail piece status from Lob webhook notifications\r\n * \r\n * Processes status updates from Lob API webhooks, mapping Lob statuses to internal statuses.\r\n * Creates status history entries for tracking. Used by webhook endpoint for real-time updates.\r\n * \r\n * @param args - Webhook data from Lob\r\n * @param args.lobId - Lob's internal ID for the mail piece\r\n * @param args.lobStatus - Current status from Lob (delivered, returned, in_transit, etc.)\r\n * @param args.lobTrackingNumber - USPS tracking number if available\r\n * @param args.lobData - Additional metadata from Lob webhook\r\n * @param context - Wasp context with entity access\r\n * @returns Updated mail piece with new status\r\n * \r\n * @throws {HttpError} 404 - If mail piece with lobId not found\r\n * @throws {HttpError} 400 - If webhook data validation fails\r\n * @throws {HttpError} 500 - If database update fails\r\n */\r\ntype UpdateMailPieceStatusInput = {\r\n  lobId: string;\r\n  lobStatus?: string;\r\n  lobTrackingNumber?: string;\r\n  lobData?: any;\r\n};\r\n\r\nexport const updateMailPieceStatus: UpdateMailPieceStatus<UpdateMailPieceStatusInput, MailPiece> = async (args, context) => {\r\n  try {\r\n    // Validate webhook input\r\n    const validatedInput = lobWebhookStatusSchema.parse(args);\r\n\r\n    // Find the mail piece by Lob ID\r\n    const mailPiece = await context.entities.MailPiece.findFirst({\r\n      where: { lobId: validatedInput.lobId },\r\n    });\r\n\r\n    if (!mailPiece) {\r\n      throw new HttpError(404, validationErrors.MAIL_PIECE_NOT_FOUND);\r\n    }\r\n\r\n    // Determine new status based on Lob status\r\n    let newStatus = mailPiece.status;\r\n    if (validatedInput.lobStatus) {\r\n      // Map Lob statuses to internal statuses\r\n      const statusMapping: Record<string, string> = {\r\n        'delivered': 'delivered',\r\n        'returned': 'returned',\r\n        'in_transit': 'in_transit',\r\n        'processing': 'submitted',\r\n        'printed': 'submitted',\r\n        'mailed': 'submitted',\r\n      };\r\n      newStatus = statusMapping[validatedInput.lobStatus] || mailPiece.status;\r\n    }\r\n\r\n    // Update the mail piece\r\n    const updatedMailPiece = await context.entities.MailPiece.update({\r\n      where: { id: mailPiece.id },\r\n      data: {\r\n        lobStatus: validatedInput.lobStatus,\r\n        lobTrackingNumber: validatedInput.lobTrackingNumber,\r\n        metadata: validatedInput.lobData,\r\n        status: newStatus,\r\n      },\r\n    });\r\n\r\n    // Create status history entry\r\n    await context.entities.MailPieceStatusHistory.create({\r\n      data: {\r\n        mailPieceId: mailPiece.id,\r\n        status: newStatus,\r\n        previousStatus: mailPiece.status,\r\n        description: `Status updated from Lob: ${validatedInput.lobStatus}`,\r\n        source: 'webhook',\r\n        lobData: validatedInput.lobData,\r\n      },\r\n    });\r\n\r\n    return updatedMailPiece;\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Handle Zod validation errors\r\n    if (error instanceof Error && error.name === 'ZodError') {\r\n      throw new HttpError(400, `Validation error: ${error.message}`);\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to update mail piece status:', error);\r\n    throw new HttpError(500, 'Failed to update mail piece status due to an internal error.');\r\n  }\r\n};\r\n\r\n/**\r\n * Update a mail piece (user operation)\r\n */\r\ntype UpdateMailPieceInput = {\r\n  id: string;\r\n  mailType?: string;\r\n  mailClass?: string;\r\n  mailSize?: string;\r\n  senderAddressId?: string;\r\n  recipientAddressId?: string;\r\n  fileId?: string;\r\n  description?: string;\r\n};\r\n\r\nexport const updateMailPiece: UpdateMailPiece<UpdateMailPieceInput, MailPiece> = async (args, context) => {\r\n  try {\r\n    // Authentication check\r\n    if (!context.user) {\r\n      throw new HttpError(401, validationErrors.UNAUTHORIZED);\r\n    }\r\n\r\n    // Input validation using Zod schema\r\n    const validatedInput = updateMailPieceSchema.parse(args);\r\n\r\n    // Find the mail piece and verify ownership\r\n    const mailPiece = await context.entities.MailPiece.findFirst({\r\n      where: { id: validatedInput.id, userId: context.user.id },\r\n    });\r\n\r\n    if (!mailPiece) {\r\n      throw new HttpError(404, validationErrors.MAIL_PIECE_NOT_FOUND);\r\n    }\r\n\r\n    // Only allow updates for draft status\r\n    if (mailPiece.status !== 'draft') {\r\n      throw new HttpError(400, 'Mail piece can only be updated in draft status');\r\n    }\r\n\r\n    // Validate addresses if provided\r\n    if (validatedInput.senderAddressId) {\r\n      const senderAddress = await context.entities.MailAddress.findFirst({\r\n        where: { id: validatedInput.senderAddressId, userId: context.user.id },\r\n      });\r\n      if (!senderAddress) {\r\n        throw new HttpError(400, validationErrors.ADDRESS_NOT_FOUND);\r\n      }\r\n    }\r\n\r\n    if (validatedInput.recipientAddressId) {\r\n      const recipientAddress = await context.entities.MailAddress.findFirst({\r\n        where: { id: validatedInput.recipientAddressId, userId: context.user.id },\r\n      });\r\n      if (!recipientAddress) {\r\n        throw new HttpError(400, validationErrors.ADDRESS_NOT_FOUND);\r\n      }\r\n    }\r\n\r\n    // Validate file if provided\r\n    if (validatedInput.fileId) {\r\n      const file = await context.entities.File.findFirst({\r\n        where: { id: validatedInput.fileId, userId: context.user.id },\r\n      });\r\n      if (!file) {\r\n        throw new HttpError(400, validationErrors.FILE_NOT_FOUND);\r\n      }\r\n    }\r\n\r\n    // Update the mail piece\r\n    const updatedMailPiece = await context.entities.MailPiece.update({\r\n      where: { id: validatedInput.id },\r\n      data: {\r\n        mailType: validatedInput.mailType,\r\n        mailClass: validatedInput.mailClass,\r\n        mailSize: validatedInput.mailSize,\r\n        senderAddressId: validatedInput.senderAddressId,\r\n        recipientAddressId: validatedInput.recipientAddressId,\r\n        fileId: validatedInput.fileId,\r\n        description: validatedInput.description,\r\n      },\r\n    });\r\n\r\n    // Create status history entry\r\n    await context.entities.MailPieceStatusHistory.create({\r\n      data: {\r\n        mailPieceId: updatedMailPiece.id,\r\n        status: 'draft',\r\n        description: 'Mail piece updated',\r\n        source: 'user',\r\n      },\r\n    });\r\n\r\n    return updatedMailPiece;\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Handle Zod validation errors\r\n    if (error instanceof Error && error.name === 'ZodError') {\r\n      throw new HttpError(400, `Validation error: ${error.message}`);\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to update mail piece:', error);\r\n    throw new HttpError(500, 'Failed to update mail piece due to an internal error.');\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a mail piece\r\n */\r\ntype DeleteMailPieceInput = {\r\n  id: string;\r\n};\r\n\r\nexport const deleteMailPiece: DeleteMailPiece<DeleteMailPieceInput, { success: boolean }> = async (args, context) => {\r\n  try {\r\n    // Authentication check\r\n    if (!context.user) {\r\n      throw new HttpError(401, validationErrors.UNAUTHORIZED);\r\n    }\r\n\r\n    // Find the mail piece and verify ownership\r\n    const mailPiece = await context.entities.MailPiece.findFirst({\r\n      where: { id: args.id, userId: context.user.id },\r\n    });\r\n\r\n    if (!mailPiece) {\r\n      throw new HttpError(404, validationErrors.MAIL_PIECE_NOT_FOUND);\r\n    }\r\n\r\n    // Only allow deletion for draft status\r\n    if (mailPiece.status !== 'draft') {\r\n      throw new HttpError(400, 'Mail piece can only be deleted in draft status');\r\n    }\r\n\r\n    // Delete the mail piece (status history will be cascade deleted)\r\n    await context.entities.MailPiece.delete({\r\n      where: { id: args.id },\r\n    });\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to delete mail piece:', error);\r\n    throw new HttpError(500, 'Failed to delete mail piece due to an internal error.');\r\n  }\r\n};\r\n\r\n/**\r\n * Get a single mail piece by ID\r\n */\r\ntype GetMailPieceInput = {\r\n  id: string;\r\n};\r\n\r\nexport const getMailPiece: GetMailPiece<GetMailPieceInput, MailPieceWithRelations | null> = async (args, context) => {\r\n  try {\r\n    // Authentication check\r\n    if (!context.user) {\r\n      throw new HttpError(401, validationErrors.UNAUTHORIZED);\r\n    }\r\n\r\n    // Find the mail piece and verify ownership\r\n    const mailPiece = await context.entities.MailPiece.findFirst({\r\n      where: { id: args.id, userId: context.user.id },\r\n      include: {\r\n        senderAddress: true,\r\n        recipientAddress: true,\r\n        file: true,\r\n        statusHistory: {\r\n          orderBy: { createdAt: 'desc' },\r\n        },\r\n      },\r\n    });\r\n\r\n    return mailPiece;\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to get mail piece:', error);\r\n    throw new HttpError(500, 'Failed to get mail piece due to an internal error.');\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// PAYMENT PROCESSING OPERATIONS\r\n// ============================================================================\r\n// Handles Stripe payment integration for mail pieces:\r\n// - Payment intent creation with cost calculation\r\n// - Payment confirmation and status updates\r\n// - Refund processing for failed or cancelled mail pieces\r\n\r\n/**\r\n * Create Stripe payment intent for mail piece processing\r\n * \r\n * Calculates cost based on mail type, class, and size, then creates a Stripe payment intent.\r\n * Only works for mail pieces in 'draft' status. Updates mail piece to 'pending_payment' status.\r\n * \r\n * @param args - Payment intent creation data\r\n * @param args.mailPieceId - UUID of mail piece to create payment for\r\n * @param context - Wasp context with user authentication and entity access\r\n * @returns Payment intent details for client-side Stripe integration\r\n * \r\n * @throws {HttpError} 401 - If user is not authenticated\r\n * @throws {HttpError} 404 - If mail piece not found or not owned by user\r\n * @throws {HttpError} 400 - If mail piece not in 'draft' status\r\n * @throws {HttpError} 500 - If Stripe API or cost calculation fails\r\n */\r\ntype CreateMailPaymentIntentInput = {\r\n  mailPieceId: string;\r\n};\r\n\r\nexport const createMailPaymentIntent: CreateMailPaymentIntent<CreateMailPaymentIntentInput, { paymentIntentId: string; cost: number; clientSecret: string }> = async (args, context) => {\r\n  try {\r\n    // Authentication check\r\n    if (!context.user) {\r\n      throw new HttpError(401, validationErrors.UNAUTHORIZED);\r\n    }\r\n\r\n    // Find the mail piece and verify ownership\r\n    const mailPiece = await context.entities.MailPiece.findFirst({\r\n      where: { id: args.mailPieceId, userId: context.user.id },\r\n      include: {\r\n        senderAddress: true,\r\n        recipientAddress: true,\r\n      },\r\n    });\r\n\r\n    if (!mailPiece) {\r\n      throw new HttpError(404, validationErrors.MAIL_PIECE_NOT_FOUND);\r\n    }\r\n\r\n    // Only allow payment creation for draft status\r\n    if (mailPiece.status !== 'draft') {\r\n      throw new HttpError(400, 'Payment can only be created for draft mail pieces');\r\n    }\r\n\r\n    // Create payment intent\r\n    const paymentData = await createMailPaymentIntentService({\r\n      mailType: mailPiece.mailType,\r\n      mailClass: mailPiece.mailClass,\r\n      mailSize: mailPiece.mailSize,\r\n      toAddress: mailPiece.recipientAddress,\r\n      fromAddress: mailPiece.senderAddress,\r\n    }, context.user.id, context);\r\n\r\n    // Update payment intent metadata with mailPieceId\r\n    const stripeClient = require('../../payment/stripe/stripeClient').stripe;\r\n    await stripeClient.paymentIntents.update(paymentData.paymentIntentId, {\r\n      metadata: {\r\n        mailPieceId: args.mailPieceId,\r\n        userId: context.user.id,\r\n        mailType: mailPiece.mailType,\r\n        mailClass: mailPiece.mailClass,\r\n        mailSize: mailPiece.mailSize,\r\n        type: 'mail_payment',\r\n      },\r\n    });\r\n\r\n    // Update mail piece with payment intent\r\n    await context.entities.MailPiece.update({\r\n      where: { id: args.mailPieceId },\r\n      data: {\r\n        paymentIntentId: paymentData.paymentIntentId,\r\n        cost: paymentData.cost / 100, // Convert to USD for display\r\n        status: 'pending_payment',\r\n      },\r\n    });\r\n\r\n    // Create status history entry\r\n    await context.entities.MailPieceStatusHistory.create({\r\n      data: {\r\n        mailPieceId: args.mailPieceId,\r\n        status: 'pending_payment',\r\n        previousStatus: 'draft',\r\n        description: 'Payment intent created',\r\n        source: 'system',\r\n      },\r\n    });\r\n\r\n    // Get client secret from Stripe\r\n    const paymentIntent = await stripeClient.paymentIntents.retrieve(paymentData.paymentIntentId);\r\n\r\n    return {\r\n      paymentIntentId: paymentData.paymentIntentId,\r\n      cost: paymentData.cost,\r\n      clientSecret: paymentIntent.client_secret,\r\n    };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to create mail payment intent:', error);\r\n    throw new HttpError(500, 'Failed to create payment intent due to an internal error.');\r\n  }\r\n};\r\n\r\n/**\r\n * Create Stripe Checkout Session for mail piece payment\r\n * \r\n * Creates a Stripe Checkout Session that redirects the user to Stripe's hosted payment page.\r\n * This is the recommended approach for mail payments as it handles all payment UI and security.\r\n * \r\n * @param args - Checkout session creation data\r\n * @param args.mailPieceId - UUID of mail piece to create checkout for\r\n * @param context - Wasp context with user authentication and entity access\r\n * @returns Checkout session URL for redirect\r\n * \r\n * @throws {HttpError} 401 - If user is not authenticated\r\n * @throws {HttpError} 404 - If mail piece not found or not owned by user\r\n * @throws {HttpError} 400 - If mail piece not in 'draft' status\r\n * @throws {HttpError} 500 - If Stripe API or cost calculation fails\r\n */\r\ntype CreateMailCheckoutSessionInput = {\r\n  mailPieceId: string;\r\n};\r\n\r\nexport const createMailCheckoutSession: CreateMailCheckoutSession<CreateMailCheckoutSessionInput, { sessionUrl: string; sessionId: string }> = async (args, context) => {\r\n  try {\r\n    // Authentication check\r\n    if (!context.user) {\r\n      throw new HttpError(401, validationErrors.UNAUTHORIZED);\r\n    }\r\n\r\n    // Find the mail piece and verify ownership\r\n    const mailPiece = await context.entities.MailPiece.findFirst({\r\n      where: { id: args.mailPieceId, userId: context.user.id },\r\n      include: {\r\n        senderAddress: true,\r\n        recipientAddress: true,\r\n      },\r\n    });\r\n\r\n    if (!mailPiece) {\r\n      throw new HttpError(404, validationErrors.MAIL_PIECE_NOT_FOUND);\r\n    }\r\n\r\n    // Only allow checkout creation for draft status\r\n    if (mailPiece.status !== 'draft') {\r\n      throw new HttpError(400, 'Checkout can only be created for draft mail pieces');\r\n    }\r\n\r\n    // Calculate cost using existing service\r\n    const costData = await createMailPaymentIntentService({\r\n      mailType: mailPiece.mailType,\r\n      mailClass: mailPiece.mailClass,\r\n      mailSize: mailPiece.mailSize,\r\n      toAddress: mailPiece.recipientAddress,\r\n      fromAddress: mailPiece.senderAddress,\r\n    }, context.user.id, context);\r\n\r\n    // Create Stripe Checkout Session\r\n    const stripe = require('../../payment/stripe/stripeClient').stripe;\r\n    const DOMAIN = process.env.WASP_WEB_CLIENT_URL || 'http://localhost:3000';\r\n    \r\n    const session = await stripe.checkout.sessions.create({\r\n      payment_method_types: ['card'],\r\n      line_items: [\r\n        {\r\n          price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n              name: `Mail Piece - ${mailPiece.mailType}`,\r\n              description: `Send ${mailPiece.mailType} via ${mailPiece.mailClass} mail`,\r\n            },\r\n            unit_amount: costData.cost, // Amount in cents\r\n          },\r\n          quantity: 1,\r\n        },\r\n      ],\r\n      mode: 'payment',\r\n      success_url: `${DOMAIN}/mail/checkout?status=success&mail_piece_id=${args.mailPieceId}`,\r\n      cancel_url: `${DOMAIN}/mail/checkout?status=canceled&mail_piece_id=${args.mailPieceId}`,\r\n      metadata: {\r\n        mailPieceId: args.mailPieceId,\r\n        userId: context.user.id,\r\n        mailType: mailPiece.mailType,\r\n        mailClass: mailPiece.mailClass,\r\n        mailSize: mailPiece.mailSize,\r\n        type: 'mail_payment',\r\n      },\r\n      customer_email: context.user.email,\r\n    });\r\n\r\n    if (!session.url) {\r\n      throw new HttpError(500, 'Failed to create checkout session URL');\r\n    }\r\n\r\n    // Update mail piece with checkout session ID\r\n    await context.entities.MailPiece.update({\r\n      where: { id: args.mailPieceId },\r\n      data: {\r\n        paymentIntentId: session.id, // Store session ID for reference\r\n        status: 'pending_payment',\r\n      },\r\n    });\r\n\r\n    // Create status history entry\r\n    await context.entities.MailPieceStatusHistory.create({\r\n      data: {\r\n        mailPieceId: args.mailPieceId,\r\n        status: 'pending_payment',\r\n        previousStatus: 'draft',\r\n        description: 'Checkout session created',\r\n        source: 'system',\r\n      },\r\n    });\r\n\r\n    return {\r\n      sessionUrl: session.url,\r\n      sessionId: session.id,\r\n    };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to create mail checkout session:', error);\r\n    throw new HttpError(500, 'Failed to create checkout session due to an internal error.');\r\n  }\r\n};\r\n\r\n/**\r\n * Confirm payment for mail piece\r\n */\r\ntype ConfirmMailPaymentInput = {\r\n  mailPieceId: string;\r\n  paymentIntentId: string;\r\n};\r\n\r\nexport const confirmMailPayment: ConfirmMailPayment<ConfirmMailPaymentInput, { success: boolean }> = async (args, context) => {\r\n  try {\r\n    // Authentication check\r\n    if (!context.user) {\r\n      throw new HttpError(401, validationErrors.UNAUTHORIZED);\r\n    }\r\n\r\n    // Find the mail piece and verify ownership\r\n    const mailPiece = await context.entities.MailPiece.findFirst({\r\n      where: { id: args.mailPieceId, userId: context.user.id },\r\n    });\r\n\r\n    if (!mailPiece) {\r\n      throw new HttpError(404, validationErrors.MAIL_PIECE_NOT_FOUND);\r\n    }\r\n\r\n    // Verify payment intent matches\r\n    if (mailPiece.paymentIntentId !== args.paymentIntentId) {\r\n      throw new HttpError(400, 'Payment intent does not match mail piece');\r\n    }\r\n\r\n    // Confirm payment\r\n    const success = await confirmMailPaymentService(args.paymentIntentId, args.mailPieceId, context);\r\n\r\n    return { success };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to confirm mail payment:', error);\r\n    throw new HttpError(500, 'Failed to confirm payment due to an internal error.');\r\n  }\r\n};\r\n\r\n/**\r\n * Refund payment for mail piece\r\n */\r\ntype RefundMailPaymentInput = {\r\n  mailPieceId: string;\r\n  reason: string;\r\n};\r\n\r\nexport const refundMailPayment: RefundMailPayment<RefundMailPaymentInput, { success: boolean }> = async (args, context) => {\r\n  try {\r\n    // Authentication check\r\n    if (!context.user) {\r\n      throw new HttpError(401, validationErrors.UNAUTHORIZED);\r\n    }\r\n\r\n    // Find the mail piece and verify ownership\r\n    const mailPiece = await context.entities.MailPiece.findFirst({\r\n      where: { id: args.mailPieceId, userId: context.user.id },\r\n    });\r\n\r\n    if (!mailPiece) {\r\n      throw new HttpError(404, validationErrors.MAIL_PIECE_NOT_FOUND);\r\n    }\r\n\r\n    // Only allow refunds for paid mail pieces\r\n    if (mailPiece.paymentStatus !== 'paid') {\r\n      throw new HttpError(400, 'Refund can only be processed for paid mail pieces');\r\n    }\r\n\r\n    if (!mailPiece.paymentIntentId) {\r\n      throw new HttpError(400, 'No payment intent found for this mail piece');\r\n    }\r\n\r\n    // Process refund\r\n    const success = await refundMailPaymentService(mailPiece.paymentIntentId, args.mailPieceId, args.reason, context);\r\n\r\n    return { success };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to refund mail payment:', error);\r\n    throw new HttpError(500, 'Failed to process refund due to an internal error.');\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n// LOB API INTEGRATION OPERATIONS\r\n// ============================================================================\r\n// Handles integration with Lob API for physical mail services:\r\n// - Mail piece submission to Lob for printing and mailing\r\n// - Status synchronization and webhook processing\r\n// - Real-time tracking updates from Lob webhooks\r\n\r\n/**\r\n * Submit mail piece to Lob API for physical mail processing\r\n * \r\n * Sends mail piece data to Lob API for printing and mailing. Only works for mail pieces\r\n * in 'paid' status. Updates status to 'submitted' and stores Lob ID for tracking.\r\n * \r\n * @param args - Submission data\r\n * @param args.mailPieceId - UUID of mail piece to submit to Lob\r\n * @param context - Wasp context with user authentication and entity access\r\n * @returns Success status and Lob ID for tracking\r\n * \r\n * @throws {HttpError} 401 - If user is not authenticated\r\n * @throws {HttpError} 404 - If mail piece not found or not owned by user\r\n * @throws {HttpError} 400 - If mail piece not in 'paid' status\r\n * @throws {HttpError} 500 - If Lob API submission fails\r\n */\r\ntype SubmitMailPieceToLobInput = {\r\n  mailPieceId: string;\r\n};\r\n\r\nexport const submitMailPieceToLob: SubmitMailPieceToLob<SubmitMailPieceToLobInput, { success: boolean; lobId?: string }> = async (args, context) => {\r\n  try {\r\n    // Authentication check\r\n    if (!context.user) {\r\n      throw new HttpError(401, validationErrors.UNAUTHORIZED);\r\n    }\r\n\r\n    // Find the mail piece and verify ownership\r\n    const mailPiece = await context.entities.MailPiece.findFirst({\r\n      where: { id: args.mailPieceId, userId: context.user.id },\r\n      include: {\r\n        senderAddress: true,\r\n        recipientAddress: true,\r\n        file: true,\r\n      },\r\n    });\r\n\r\n    if (!mailPiece) {\r\n      throw new HttpError(404, validationErrors.MAIL_PIECE_NOT_FOUND);\r\n    }\r\n\r\n    // Only allow submission for paid mail pieces\r\n    if (mailPiece.paymentStatus !== 'paid') {\r\n      throw new HttpError(400, 'Mail piece must be paid before submission to Lob');\r\n    }\r\n\r\n    // Check if already submitted to Lob\r\n    if (mailPiece.lobId) {\r\n      throw new HttpError(400, 'Mail piece already submitted to Lob');\r\n    }\r\n\r\n    // Prepare data for Lob API\r\n    const lobMailData = {\r\n      to: mailPiece.recipientAddress,\r\n      from: mailPiece.senderAddress,\r\n      mailType: mailPiece.mailType,\r\n      mailClass: mailPiece.mailClass,\r\n      mailSize: mailPiece.mailSize,\r\n      fileUrl: mailPiece.file?.uploadUrl,\r\n      description: mailPiece.description || `Mail piece created via Postmarkr - ${mailPiece.mailType}`,\r\n    };\r\n\r\n    // Submit to Lob API\r\n    const lobResponse = await createLobMailPiece(lobMailData);\r\n\r\n    // Update mail piece with Lob information\r\n    await context.entities.MailPiece.update({\r\n      where: { id: args.mailPieceId },\r\n      data: {\r\n        lobId: lobResponse.id,\r\n        lobStatus: lobResponse.status,\r\n        lobTrackingNumber: lobResponse.trackingNumber,\r\n        status: 'submitted',\r\n        cost: lobResponse.cost / 100, // Convert to USD for display\r\n        metadata: {\r\n          lobData: lobResponse.lobData,\r\n          submittedAt: new Date().toISOString(),\r\n        },\r\n      },\r\n    });\r\n\r\n    // Create status history entry\r\n    await context.entities.MailPieceStatusHistory.create({\r\n      data: {\r\n        mailPieceId: args.mailPieceId,\r\n        status: 'submitted',\r\n        previousStatus: 'paid',\r\n        description: `Submitted to Lob API - ID: ${lobResponse.id}`,\r\n        source: 'system',\r\n        lobData: {\r\n          lobId: lobResponse.id,\r\n          lobStatus: lobResponse.status,\r\n          trackingNumber: lobResponse.trackingNumber,\r\n          submittedAt: new Date().toISOString(),\r\n        },\r\n      },\r\n    });\r\n\r\n    console.log(`Successfully submitted mail piece ${args.mailPieceId} to Lob with ID: ${lobResponse.id}`);\r\n\r\n    return { \r\n      success: true, \r\n      lobId: lobResponse.id \r\n    };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to submit mail piece to Lob:', error);\r\n    throw new HttpError(500, 'Failed to submit mail piece to Lob due to an internal error.');\r\n  }\r\n};\r\n\r\n/**\r\n * Sync mail piece status from Lob API\r\n */\r\ntype SyncMailPieceStatusInput = {\r\n  mailPieceId: string;\r\n};\r\n\r\nexport const syncMailPieceStatus: SyncMailPieceStatus<SyncMailPieceStatusInput, { success: boolean; status?: string }> = async (args, context) => {\r\n  try {\r\n    // Authentication check\r\n    if (!context.user) {\r\n      throw new HttpError(401, validationErrors.UNAUTHORIZED);\r\n    }\r\n\r\n    // Find the mail piece and verify ownership\r\n    const mailPiece = await context.entities.MailPiece.findFirst({\r\n      where: { id: args.mailPieceId, userId: context.user.id },\r\n    });\r\n\r\n    if (!mailPiece) {\r\n      throw new HttpError(404, validationErrors.MAIL_PIECE_NOT_FOUND);\r\n    }\r\n\r\n    // Check if mail piece has been submitted to Lob\r\n    if (!mailPiece.lobId) {\r\n      throw new HttpError(400, 'Mail piece has not been submitted to Lob yet');\r\n    }\r\n\r\n    // Get current status from Lob API\r\n    const lobStatus = await getLobMailPieceStatus(mailPiece.lobId);\r\n\r\n    // Map Lob status to internal status\r\n    const statusMapping: Record<string, string> = {\r\n      'delivered': 'delivered',\r\n      'returned': 'returned',\r\n      'in_transit': 'in_transit',\r\n      'processing': 'submitted',\r\n      'printed': 'submitted',\r\n      'mailed': 'submitted',\r\n      'created': 'submitted',\r\n      'cancelled': 'failed',\r\n      'failed': 'failed',\r\n    };\r\n\r\n    const newStatus = statusMapping[lobStatus.status] || lobStatus.status || mailPiece.status;\r\n\r\n    // Update mail piece if status has changed\r\n    if (newStatus !== mailPiece.status) {\r\n      await context.entities.MailPiece.update({\r\n        where: { id: args.mailPieceId },\r\n        data: {\r\n          status: newStatus,\r\n          lobStatus: lobStatus.status,\r\n          lobTrackingNumber: lobStatus.trackingNumber,\r\n          metadata: {\r\n            ...(mailPiece.metadata && typeof mailPiece.metadata === 'object' ? mailPiece.metadata : {}),\r\n            lastSyncedAt: new Date().toISOString(),\r\n            lobData: lobStatus.lobData || {},\r\n          },\r\n        },\r\n      });\r\n\r\n      // Create status history entry\r\n      await context.entities.MailPieceStatusHistory.create({\r\n        data: {\r\n          mailPieceId: args.mailPieceId,\r\n          status: newStatus,\r\n          previousStatus: mailPiece.status,\r\n          description: `Status synced from Lob: ${lobStatus.status}`,\r\n          source: 'system',\r\n          lobData: {\r\n            lobStatus: lobStatus.status,\r\n            trackingNumber: lobStatus.trackingNumber,\r\n            syncedAt: new Date().toISOString(),\r\n          },\r\n        },\r\n      });\r\n\r\n      console.log(`Successfully synced mail piece ${args.mailPieceId} status: ${mailPiece.status} -> ${newStatus}`);\r\n    }\r\n\r\n    return { \r\n      success: true, \r\n      status: newStatus \r\n    };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to sync mail piece status from Lob:', error);\r\n    throw new HttpError(500, 'Failed to sync mail piece status from Lob due to an internal error.');\r\n  }\r\n};\r\n\r\n/**\r\n * Bulk delete mail pieces (only draft status allowed)\r\n */\r\ntype BulkDeleteMailPiecesInput = {\r\n  mailPieceIds: string[];\r\n};\r\n\r\nexport const bulkDeleteMailPieces: BulkDeleteMailPieces<BulkDeleteMailPiecesInput, { \r\n  deletedCount: number; \r\n  failedIds: string[]; \r\n}> = async (args, context) => {\r\n  try {\r\n    if (!context.user) {\r\n      throw new HttpError(401, 'Not authorized');\r\n    }\r\n\r\n    if (!args.mailPieceIds || args.mailPieceIds.length === 0) {\r\n      throw new HttpError(400, 'No mail piece IDs provided');\r\n    }\r\n\r\n    if (args.mailPieceIds.length > 50) {\r\n      throw new HttpError(400, 'Cannot delete more than 50 mail pieces at once');\r\n    }\r\n\r\n    const deletedIds: string[] = [];\r\n    const failedIds: string[] = [];\r\n\r\n    // Process each mail piece individually to handle errors gracefully\r\n    for (const mailPieceId of args.mailPieceIds) {\r\n      try {\r\n        // Verify ownership and status\r\n        const mailPiece = await context.entities.MailPiece.findFirst({\r\n          where: { \r\n            id: mailPieceId, \r\n            userId: context.user.id,\r\n            status: 'draft' // Only allow deletion of draft mail pieces\r\n          }\r\n        });\r\n\r\n        if (!mailPiece) {\r\n          failedIds.push(mailPieceId);\r\n          continue;\r\n        }\r\n\r\n        // Delete the mail piece (cascade will handle status history)\r\n        await context.entities.MailPiece.delete({\r\n          where: { id: mailPieceId }\r\n        });\r\n\r\n        deletedIds.push(mailPieceId);\r\n      } catch (error) {\r\n        console.error(`Failed to delete mail piece ${mailPieceId}:`, error);\r\n        failedIds.push(mailPieceId);\r\n      }\r\n    }\r\n\r\n    return {\r\n      deletedCount: deletedIds.length,\r\n      failedIds\r\n    };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Log unexpected errors\r\n    console.error('Failed to bulk delete mail pieces:', error);\r\n    throw new HttpError(500, 'Failed to bulk delete mail pieces due to an internal error.');\r\n  }\r\n};\r\n","import { prisma } from 'wasp/server'\n\nimport { createMailPiece } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (createMailPiece as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailAddress: prisma.mailAddress,\n      File: prisma.file,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createMailPiece from '../../actions/createMailPiece.js'\n\nexport default createAction(createMailPiece)\n","import { prisma } from 'wasp/server'\n\nimport { updateMailPiece } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (updateMailPiece as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailAddress: prisma.mailAddress,\n      File: prisma.file,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport updateMailPiece from '../../actions/updateMailPiece.js'\n\nexport default createAction(updateMailPiece)\n","import { prisma } from 'wasp/server'\n\nimport { deleteMailPiece } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (deleteMailPiece as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport deleteMailPiece from '../../actions/deleteMailPiece.js'\n\nexport default createAction(deleteMailPiece)\n","import { prisma } from 'wasp/server'\n\nimport { updateMailPieceStatus } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (updateMailPieceStatus as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport updateMailPieceStatus from '../../actions/updateMailPieceStatus.js'\n\nexport default createAction(updateMailPieceStatus)\n","import { prisma } from 'wasp/server'\n\nimport { createMailPaymentIntent } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (createMailPaymentIntent as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailAddress: prisma.mailAddress,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createMailPaymentIntent from '../../actions/createMailPaymentIntent.js'\n\nexport default createAction(createMailPaymentIntent)\n","import { prisma } from 'wasp/server'\n\nimport { createMailCheckoutSession } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (createMailCheckoutSession as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailAddress: prisma.mailAddress,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createMailCheckoutSession from '../../actions/createMailCheckoutSession.js'\n\nexport default createAction(createMailCheckoutSession)\n","import { prisma } from 'wasp/server'\n\nimport { confirmMailPayment } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (confirmMailPayment as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport confirmMailPayment from '../../actions/confirmMailPayment.js'\n\nexport default createAction(confirmMailPayment)\n","import { prisma } from 'wasp/server'\n\nimport { refundMailPayment } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (refundMailPayment as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport refundMailPayment from '../../actions/refundMailPayment.js'\n\nexport default createAction(refundMailPayment)\n","import { prisma } from 'wasp/server'\n\nimport { submitMailPieceToLob } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (submitMailPieceToLob as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailAddress: prisma.mailAddress,\n      File: prisma.file,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport submitMailPieceToLob from '../../actions/submitMailPieceToLob.js'\n\nexport default createAction(submitMailPieceToLob)\n","import { prisma } from 'wasp/server'\n\nimport { syncMailPieceStatus } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (syncMailPieceStatus as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport syncMailPieceStatus from '../../actions/syncMailPieceStatus.js'\n\nexport default createAction(syncMailPieceStatus)\n","import { prisma } from 'wasp/server'\n\nimport { bulkDeleteMailPieces } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (bulkDeleteMailPieces as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport bulkDeleteMailPieces from '../../actions/bulkDeleteMailPieces.js'\n\nexport default createAction(bulkDeleteMailPieces)\n","import { prisma } from 'wasp/server'\n\nimport { getPaginatedUsers } from '../../../../../src/user/operations'\n\n\nexport default async function (args, context) {\n  return (getPaginatedUsers as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getPaginatedUsers from '../../queries/getPaginatedUsers.js'\n\nexport default createQuery(getPaginatedUsers)\n","import { prisma } from 'wasp/server'\n\nimport { getGptResponses } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (getGptResponses as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      GptResponse: prisma.gptResponse,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getGptResponses from '../../queries/getGptResponses.js'\n\nexport default createQuery(getGptResponses)\n","import { prisma } from 'wasp/server'\n\nimport { getAllTasksByUser } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (getAllTasksByUser as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getAllTasksByUser from '../../queries/getAllTasksByUser.js'\n\nexport default createQuery(getAllTasksByUser)\n","import { prisma } from 'wasp/server'\n\nimport { getCustomerPortalUrl } from '../../../../../src/payment/operations'\n\n\nexport default async function (args, context) {\n  return (getCustomerPortalUrl as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getCustomerPortalUrl from '../../queries/getCustomerPortalUrl.js'\n\nexport default createQuery(getCustomerPortalUrl)\n","import { prisma } from 'wasp/server'\n\nimport { getAllFilesByUser } from '../../../../../src/file-upload/operations'\n\n\nexport default async function (args, context) {\n  return (getAllFilesByUser as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getAllFilesByUser from '../../queries/getAllFilesByUser.js'\n\nexport default createQuery(getAllFilesByUser)\n","import { prisma } from 'wasp/server'\n\nimport { getDownloadFileSignedURL } from '../../../../../src/file-upload/operations'\n\n\nexport default async function (args, context) {\n  return (getDownloadFileSignedURL as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getDownloadFileSignedURL from '../../queries/getDownloadFileSignedURL.js'\n\nexport default createQuery(getDownloadFileSignedURL)\n","import { prisma } from 'wasp/server'\n\nimport { getMailAddressesByUser } from '../../../../../src/address-management/operations'\n\n\nexport default async function (args, context) {\n  return (getMailAddressesByUser as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      MailAddress: prisma.mailAddress,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getMailAddressesByUser from '../../queries/getMailAddressesByUser.js'\n\nexport default createQuery(getMailAddressesByUser)\n","import { type DailyStats, type PageViewSource } from 'wasp/entities';\nimport { HttpError, prisma } from 'wasp/server';\nimport { type GetDailyStats } from 'wasp/server/operations';\n\ntype DailyStatsWithSources = DailyStats & {\n  sources: PageViewSource[];\n};\n\ntype DailyStatsValues = {\n  dailyStats: DailyStatsWithSources;\n  weeklyStats: DailyStatsWithSources[];\n};\n\nexport const getDailyStats: GetDailyStats<void, DailyStatsValues | undefined> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'Only authenticated users are allowed to perform this operation');\n  }\n\n  if (!context.user.isAdmin) {\n    throw new HttpError(403, 'Only admins are allowed to perform this operation');\n  }\n\n  const statsQuery = {\n    orderBy: {\n      date: 'desc',\n    },\n    include: {\n      sources: true,\n    },\n  } as const;\n\n  const [dailyStats, weeklyStats] = await prisma.$transaction([\n    context.entities.DailyStats.findFirst(statsQuery),\n    context.entities.DailyStats.findMany({ ...statsQuery, take: 7 }),\n  ]);\n\n  if (!dailyStats) {\n    console.log('\\x1b[34mNote: No daily stats have been generated by the dailyStatsJob yet. \\x1b[0m');\n    return undefined;\n  }\n\n  return { dailyStats, weeklyStats };\n};\n","import { prisma } from 'wasp/server'\n\nimport { getDailyStats } from '../../../../../src/analytics/operations'\n\n\nexport default async function (args, context) {\n  return (getDailyStats as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      DailyStats: prisma.dailyStats,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getDailyStats from '../../queries/getDailyStats.js'\n\nexport default createQuery(getDailyStats)\n","import { prisma } from 'wasp/server'\n\nimport { getMailPieces } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (getMailPieces as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailAddress: prisma.mailAddress,\n      File: prisma.file,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getMailPieces from '../../queries/getMailPieces.js'\n\nexport default createQuery(getMailPieces)\n","import { prisma } from 'wasp/server'\n\nimport { getMailPiece } from '../../../../../src/mail/operations'\n\n\nexport default async function (args, context) {\n  return (getMailPiece as any)(args, {\n    ...context,\n    entities: {\n      MailPiece: prisma.mailPiece,\n      MailAddress: prisma.mailAddress,\n      File: prisma.file,\n      MailPieceStatusHistory: prisma.mailPieceStatusHistory,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getMailPiece from '../../queries/getMailPiece.js'\n\nexport default createQuery(getMailPiece)\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\n\nimport updateIsUserAdminById from './updateIsUserAdminById.js'\nimport generateGptResponse from './generateGptResponse.js'\nimport createTask from './createTask.js'\nimport deleteTask from './deleteTask.js'\nimport updateTask from './updateTask.js'\nimport generateCheckoutSession from './generateCheckoutSession.js'\nimport createFile from './createFile.js'\nimport deleteFile from './deleteFile.js'\nimport createMailAddress from './createMailAddress.js'\nimport updateMailAddress from './updateMailAddress.js'\nimport deleteMailAddress from './deleteMailAddress.js'\nimport setDefaultAddress from './setDefaultAddress.js'\nimport createMailPiece from './createMailPiece.js'\nimport updateMailPiece from './updateMailPiece.js'\nimport deleteMailPiece from './deleteMailPiece.js'\nimport updateMailPieceStatus from './updateMailPieceStatus.js'\nimport createMailPaymentIntent from './createMailPaymentIntent.js'\nimport createMailCheckoutSession from './createMailCheckoutSession.js'\nimport confirmMailPayment from './confirmMailPayment.js'\nimport refundMailPayment from './refundMailPayment.js'\nimport submitMailPieceToLob from './submitMailPieceToLob.js'\nimport syncMailPieceStatus from './syncMailPieceStatus.js'\nimport bulkDeleteMailPieces from './bulkDeleteMailPieces.js'\nimport getPaginatedUsers from './getPaginatedUsers.js'\nimport getGptResponses from './getGptResponses.js'\nimport getAllTasksByUser from './getAllTasksByUser.js'\nimport getCustomerPortalUrl from './getCustomerPortalUrl.js'\nimport getAllFilesByUser from './getAllFilesByUser.js'\nimport getDownloadFileSignedURL from './getDownloadFileSignedURL.js'\nimport getMailAddressesByUser from './getMailAddressesByUser.js'\nimport getDailyStats from './getDailyStats.js'\nimport getMailPieces from './getMailPieces.js'\nimport getMailPiece from './getMailPiece.js'\n\nconst router = express.Router()\n\nrouter.post('/update-is-user-admin-by-id', auth, updateIsUserAdminById)\nrouter.post('/generate-gpt-response', auth, generateGptResponse)\nrouter.post('/create-task', auth, createTask)\nrouter.post('/delete-task', auth, deleteTask)\nrouter.post('/update-task', auth, updateTask)\nrouter.post('/generate-checkout-session', auth, generateCheckoutSession)\nrouter.post('/create-file', auth, createFile)\nrouter.post('/delete-file', auth, deleteFile)\nrouter.post('/create-mail-address', auth, createMailAddress)\nrouter.post('/update-mail-address', auth, updateMailAddress)\nrouter.post('/delete-mail-address', auth, deleteMailAddress)\nrouter.post('/set-default-address', auth, setDefaultAddress)\nrouter.post('/create-mail-piece', auth, createMailPiece)\nrouter.post('/update-mail-piece', auth, updateMailPiece)\nrouter.post('/delete-mail-piece', auth, deleteMailPiece)\nrouter.post('/update-mail-piece-status', auth, updateMailPieceStatus)\nrouter.post('/create-mail-payment-intent', auth, createMailPaymentIntent)\nrouter.post('/create-mail-checkout-session', auth, createMailCheckoutSession)\nrouter.post('/confirm-mail-payment', auth, confirmMailPayment)\nrouter.post('/refund-mail-payment', auth, refundMailPayment)\nrouter.post('/submit-mail-piece-to-lob', auth, submitMailPieceToLob)\nrouter.post('/sync-mail-piece-status', auth, syncMailPieceStatus)\nrouter.post('/bulk-delete-mail-pieces', auth, bulkDeleteMailPieces)\nrouter.post('/get-paginated-users', auth, getPaginatedUsers)\nrouter.post('/get-gpt-responses', auth, getGptResponses)\nrouter.post('/get-all-tasks-by-user', auth, getAllTasksByUser)\nrouter.post('/get-customer-portal-url', auth, getCustomerPortalUrl)\nrouter.post('/get-all-files-by-user', auth, getAllFilesByUser)\nrouter.post('/get-download-file-signed-url', auth, getDownloadFileSignedURL)\nrouter.post('/get-mail-addresses-by-user', auth, getMailAddressesByUser)\nrouter.post('/get-daily-stats', auth, getDailyStats)\nrouter.post('/get-mail-pieces', auth, getMailPieces)\nrouter.post('/get-mail-piece', auth, getMailPiece)\n\nexport default router\n","import express from 'express'\nimport cookieParser from 'cookie-parser'\nimport logger from 'morgan'\nimport cors from 'cors'\nimport helmet from 'helmet'\n\nimport { config } from 'wasp/server'\nimport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\nexport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\n\nconst _waspGlobalMiddlewareConfigFn = (mc: MiddlewareConfig) => mc\n\n// This is the set of middleware Wasp supplies by default.\n// NOTE: Remember to update the docs of these change.\nconst defaultGlobalMiddlewareConfig: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded()],\n  ['cookieParser', cookieParser()]\n])\n\n// This is the global middleware that is the result of applying the user's modifications.\n// It will be used as the basis for Operations and APIs (unless they are further customized).\nconst globalMiddlewareConfig: MiddlewareConfig = _waspGlobalMiddlewareConfigFn(defaultGlobalMiddlewareConfig)\n\n// This function returns an array of Express middleware to be used by a router. It optionally\n// accepts a function that can modify the global middleware for specific route customization.\nexport function globalMiddlewareConfigForExpress(middlewareConfigFn?: MiddlewareConfigFn): express.RequestHandler[] {\n  if (!middlewareConfigFn) {\n    return Array.from(globalMiddlewareConfig.values())\n  }\n\n  // Make a clone so they can't mess up the global Map for any other routes calling this.\n  const globalMiddlewareConfigClone = new Map(globalMiddlewareConfig)\n  const modifiedMiddlewareConfig = middlewareConfigFn(globalMiddlewareConfigClone)\n  return Array.from(modifiedMiddlewareConfig.values())\n}\n","import { serialize } from 'wasp/core/serialization'\nimport { defineHandler } from 'wasp/server/utils'\n\nexport default defineHandler(async (req, res) => {\n  if (req.user) {\n    res.json(serialize(req.user))\n  } else {\n    res.json(serialize(null))\n  }\n})\n","import { defineHandler } from 'wasp/server/utils'\nimport { createInvalidCredentialsError } from 'wasp/auth/utils'\nimport { invalidateSession } from 'wasp/auth/session'\n\nexport default defineHandler(async (req, res) => {\n  if (req.sessionId) {\n    await invalidateSession(req.sessionId)\n    res.json({ success: true })\n  } else {\n    throw createInvalidCredentialsError()\n  }\n})\n","import { prisma } from 'wasp/server'\nimport type {\n  OnAfterSignupHook,\n  OnAfterEmailVerifiedHook,\n  OnBeforeOAuthRedirectHook,\n  OnBeforeSignupHook,\n  OnBeforeLoginHook,\n  OnAfterLoginHook,\n  InternalAuthHookParams,\n} from 'wasp/server/auth'\n\n/*\n  These are \"internal hook functions\" based on the user defined hook functions.\n\n  In the server code (e.g. email signup) we import these functions and call them.\n\n  We want to pass extra params to the user defined hook functions, but we don't want to\n  pass them when we call them in the server code.\n*/\n\n/**\n * This is a no-op function since the user didn't define the onBeforeSignup hook.\n */\nexport const onBeforeSignupHook: InternalFunctionForHook<OnBeforeSignupHook> = async (_params) => {}\n\n/**\n * This is a no-op function since the user didn't define the onAfterSignup hook.\n */\nexport const onAfterSignupHook: InternalFunctionForHook<OnAfterSignupHook> = async (_params) => {}\n\n/**\n * This is a no-op function since the user didn't define the onAfterSignup hook.\n */\nexport const onAfterEmailVerifiedHook: InternalFunctionForHook<OnAfterEmailVerifiedHook> = async (_params) => {}\n\n/**\n * This is an identity function since the user didn't define the onBeforeOAuthRedirect hook.\n */\nexport const onBeforeOAuthRedirectHook: InternalFunctionForHook<OnBeforeOAuthRedirectHook> = async (params) => params\n\n\n/**\n * This is a no-op function since the user didn't define the onBeforeLogin hook.\n */\nexport const onBeforeLoginHook: InternalFunctionForHook<OnBeforeLoginHook> = async (_params) => {}\n\n/**\n * This is a no-op function since the user didn't define the onAfterLogin hook.\n */\nexport const onAfterLoginHook: InternalFunctionForHook<OnAfterLoginHook> = async (_params) => {}\n\n/*\n  We pass extra params to the user defined hook functions, but we don't want to\n  pass the extra params (e.g. 'prisma') when we call the hooks in the server code.\n  So, we need to remove the extra params from the params object which is used to define the\n  internal hook functions.\n*/\ntype InternalFunctionForHook<Fn extends (args: never) => unknown | Promise<unknown>> = Fn extends (\n  params: infer P,\n) => infer R\n  ? (args: Omit<P, keyof InternalAuthHookParams>) => R\n  : never\n","import { Request, Response } from 'express';\nimport { createInvalidCredentialsError } from 'wasp/auth/utils'\nimport { verifyPassword } from 'wasp/auth/password'\nimport {\n    createProviderId,\n    findAuthIdentity,\n    findAuthWithUserBy,\n    getProviderDataWithPassword,\n} from 'wasp/auth/utils'\nimport { createSession } from 'wasp/auth/session'\nimport { ensureValidEmail, ensurePasswordIsPresent } from 'wasp/auth/validation'\nimport { onBeforeLoginHook, onAfterLoginHook } from '../../hooks.js';\n\nexport function getLoginRoute() {\n    return async function login(\n        req: Request<{ email: string; password: string; }>,\n        res: Response,\n    ): Promise<void> {\n        const fields = req.body ?? {}\n        ensureValidArgs(fields)\n\n        const providerId = createProviderId(\"email\", fields.email)\n        const authIdentity = await findAuthIdentity(providerId)\n        if (!authIdentity) {\n            throw createInvalidCredentialsError()\n        }\n        const providerData = getProviderDataWithPassword<'email'>(authIdentity.providerData)\n        if (!providerData.isEmailVerified) {\n            throw createInvalidCredentialsError()\n        }\n        try {\n            await verifyPassword(providerData.hashedPassword, fields.password);\n        } catch(e) {\n            throw createInvalidCredentialsError()\n        }\n    \n        const auth = await findAuthWithUserBy({ id: authIdentity.authId })\n\n        if (auth === null) {\n            throw createInvalidCredentialsError()\n        }\n        \n        await onBeforeLoginHook({\n            req,\n            providerId,\n            user: auth.user,\n        })\n        \n        const session = await createSession(auth.id)\n\n        await onAfterLoginHook({\n            req,\n            providerId,\n            user: auth.user,\n        })\n      \n        res.json({\n            sessionId: session.id,\n        })\n    };\n}\n\nfunction ensureValidArgs(args: object): void {\n    ensureValidEmail(args);\n    ensurePasswordIsPresent(args);\n}\n","import * as jwt from 'oslo/jwt';\nimport { config } from 'wasp/server';\nconst JWT_SECRET = new TextEncoder().encode(config.auth.jwtSecret);\nconst JWT_ALGORITHM = 'HS256';\n// PRIVATE API\nexport function createJWT(data, options) {\n    return jwt.createJWT(JWT_ALGORITHM, JWT_SECRET, data, options);\n}\n// PRIVATE API\nexport async function validateJWT(token) {\n    const { payload } = await jwt.validateJWT(JWT_ALGORITHM, JWT_SECRET, token);\n    return payload;\n}\n// PRIVATE API\nexport { TimeSpan } from 'oslo';\n//# sourceMappingURL=jwt.js.map","import { createJWT, TimeSpan } from 'wasp/auth/jwt';\nimport { emailSender } from 'wasp/server/email';\nimport { createProviderId, updateAuthIdentityProviderData, findAuthIdentity, getProviderDataWithPassword, } from 'wasp/auth/utils';\nimport { config as waspServerConfig } from 'wasp/server';\n// PUBLIC API\nexport async function createEmailVerificationLink(email, clientRoute) {\n    const { jwtToken } = await createEmailJWT(email);\n    return `${waspServerConfig.frontendUrl}${clientRoute}?token=${jwtToken}`;\n}\n// PUBLIC API\nexport async function createPasswordResetLink(email, clientRoute) {\n    const { jwtToken } = await createEmailJWT(email);\n    return `${waspServerConfig.frontendUrl}${clientRoute}?token=${jwtToken}`;\n}\nasync function createEmailJWT(email) {\n    const jwtToken = await createJWT({ email }, { expiresIn: new TimeSpan(30, \"m\") });\n    return { jwtToken };\n}\n// PUBLIC API\nexport async function sendPasswordResetEmail(email, content) {\n    return sendEmailAndSaveMetadata(email, content, {\n        passwordResetSentAt: (new Date()).toISOString(),\n    });\n}\n// PUBLIC API\nexport async function sendEmailVerificationEmail(email, content) {\n    return sendEmailAndSaveMetadata(email, content, {\n        emailVerificationSentAt: (new Date()).toISOString(),\n    });\n}\nasync function sendEmailAndSaveMetadata(email, content, metadata) {\n    // Save the metadata (e.g. timestamp) first, and then send the email\n    // so the user can't send multiple requests while the email is being sent.\n    const providerId = createProviderId(\"email\", email);\n    const authIdentity = await findAuthIdentity(providerId);\n    if (!authIdentity) {\n        throw new Error(`User with email: ${email} not found.`);\n    }\n    const providerData = getProviderDataWithPassword(authIdentity.providerData);\n    await updateAuthIdentityProviderData(providerId, providerData, metadata);\n    emailSender.send(content).catch((e) => {\n        console.error('Failed to send email', e);\n    });\n}\n// PUBLIC API\nexport function isEmailResendAllowed(fields, field, resendInterval = 1000 * 60) {\n    const sentAt = fields[field];\n    if (!sentAt) {\n        return {\n            isResendAllowed: true,\n            timeLeft: 0,\n        };\n    }\n    const now = new Date();\n    const diff = now.getTime() - new Date(sentAt).getTime();\n    const isResendAllowed = diff > resendInterval;\n    // Time left in seconds\n    const timeLeft = isResendAllowed ? 0 : Math.round((resendInterval - diff) / 1000);\n    return { isResendAllowed, timeLeft };\n}\n//# sourceMappingURL=utils.js.map","import { Request, Response } from 'express'\nimport type { UserSignupFields } from 'wasp/auth/providers/types'\nimport {\n  createProviderId,\n  createUser,\n  deleteUserByAuthId,\n  doFakeWork,\n  findAuthIdentity,\n  getProviderDataWithPassword,\n  rethrowPossibleAuthError,\n  sanitizeAndSerializeProviderData,\n  validateAndGetUserFields,\n} from 'wasp/auth/utils'\nimport {\n  ensurePasswordIsPresent,\n  ensureValidEmail,\n  ensureValidPassword,\n} from 'wasp/auth/validation'\nimport { HttpError } from 'wasp/server'\nimport { GetVerificationEmailContentFn } from 'wasp/server/auth/email'\nimport {\n  createEmailVerificationLink,\n  isEmailResendAllowed,\n  sendEmailVerificationEmail,\n} from 'wasp/server/auth/email/utils'\nimport { EmailFromField } from 'wasp/server/email/core/types'\nimport { onAfterSignupHook, onBeforeSignupHook } from '../../hooks.js'\n\nexport function getSignupRoute({\n  userSignupFields,\n  fromField,\n  clientRoute,\n  getVerificationEmailContent,\n  isEmailAutoVerified,\n}: {\n  userSignupFields?: UserSignupFields\n  fromField: EmailFromField\n  clientRoute: string\n  getVerificationEmailContent: GetVerificationEmailContentFn\n  isEmailAutoVerified: boolean\n}) {\n  return async function signup(\n    req: Request<{ email: string; password: string }>,\n    res: Response,\n  ): Promise<void> {\n    const fields = req.body\n    ensureValidArgs(fields)\n\n    const providerId = createProviderId('email', fields.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    /**\n     *\n     * There are two cases to consider in the case of an existing user:\n     * - if we allow unverified login\n     * - if the user is already verified\n     *\n     * Let's see what happens when we **don't** allow unverified login:\n     *\n     * We are handling the case of an existing auth identity in two ways:\n     *\n     * 1. If the user already exists and is verified, we don't want\n     *   to leak that piece of info and instead we pretend that the user\n     *   was created successfully.\n     *    - This prevents the attacker from learning which emails already have\n     *        an account created.\n     *\n     * 2. If the user is not verified:\n     *   - We check when we last sent a verification email and if it was less than X seconds ago,\n     *     we don't send another one.\n     *   - If it was more than X seconds ago, we delete the user and create a new one.\n     *   - This prevents the attacker from creating an account with somebody\n     *     else's email address and therefore permanently making that email\n     *     address unavailable for later account creation (by real owner).\n     */\n    if (existingAuthIdentity) {\n      const providerData = getProviderDataWithPassword<'email'>(\n        existingAuthIdentity.providerData,\n      )\n\n      // TOOD: faking work makes sense if the time spent on faking the work matches the time\n      // it would take to send the email. Atm, the fake work takes obviously longer than sending\n      // the email!\n      if (providerData.isEmailVerified) {\n        await doFakeWork()\n        res.json({ success: true })\n        return\n      }\n\n      // TODO: we are still leaking information here since when we are faking work\n      // we are not checking if the email was sent or not!\n      const { isResendAllowed, timeLeft } = isEmailResendAllowed(\n        providerData,\n        'passwordResetSentAt',\n      )\n      if (!isResendAllowed) {\n        throw new HttpError(\n          400,\n          `Please wait ${timeLeft} secs before trying again.`,\n        )\n      }\n\n      try {\n        await deleteUserByAuthId(existingAuthIdentity.authId)\n      } catch (e: unknown) {\n        rethrowPossibleAuthError(e)\n      }\n    }\n\n    const userFields = await validateAndGetUserFields(fields, userSignupFields)\n\n    const newUserProviderData = await sanitizeAndSerializeProviderData<'email'>(\n      {\n        hashedPassword: fields.password,\n        isEmailVerified: isEmailAutoVerified ? true : false,\n        emailVerificationSentAt: null,\n        passwordResetSentAt: null,\n      },\n    )\n\n    try {\n      await onBeforeSignupHook({ req, providerId })\n      const user = await createUser(\n        providerId,\n        newUserProviderData,\n        // Using any here because we want to avoid TypeScript errors and\n        // rely on Prisma to validate the data.\n        userFields as any,\n      )\n      await onAfterSignupHook({ req, providerId, user })\n    } catch (e: unknown) {\n      rethrowPossibleAuthError(e)\n    }\n\n    // Wasp allows for auto-verification of emails in development mode to\n    // make writing e2e tests easier.\n    if (isEmailAutoVerified) {\n      res.json({ success: true })\n      return\n    }\n\n    const verificationLink = await createEmailVerificationLink(\n      fields.email,\n      clientRoute,\n    )\n    try {\n      await sendEmailVerificationEmail(fields.email, {\n        from: fromField,\n        to: fields.email,\n        ...getVerificationEmailContent({ verificationLink }),\n      })\n    } catch (e: unknown) {\n      console.error('Failed to send email verification email:', e)\n      throw new HttpError(500, 'Failed to send email verification email.')\n    }\n\n    res.json({ success: true })\n  }\n}\n\nfunction ensureValidArgs(args: object): void {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n}\n","import { Request, Response } from 'express';\nimport {\n    createProviderId,\n    findAuthIdentity,\n    doFakeWork,\n    getProviderDataWithPassword,\n} from 'wasp/auth/utils';\nimport {\n    createPasswordResetLink,\n    sendPasswordResetEmail,\n    isEmailResendAllowed,\n} from \"wasp/server/auth/email/utils\";\nimport { ensureValidEmail } from 'wasp/auth/validation';\nimport type { EmailFromField } from 'wasp/server/email/core/types';\nimport { GetPasswordResetEmailContentFn } from 'wasp/server/auth/email';\nimport { HttpError } from 'wasp/server';\n\nexport function getRequestPasswordResetRoute({\n   fromField,\n   clientRoute,\n   getPasswordResetEmailContent,\n}: {\n    fromField: EmailFromField;\n    clientRoute: string;\n    getPasswordResetEmailContent: GetPasswordResetEmailContentFn;\n}) {\n    return async function requestPasswordReset(\n        req: Request<{ email: string; }>,\n        res: Response,\n    ): Promise<void> {\n        const args = req.body ?? {};\n        ensureValidEmail(args);\n\n        const authIdentity = await findAuthIdentity(\n            createProviderId(\"email\", args.email),\n        );\n\n        /**\n         * By doing fake work, we make it harder to enumerate users by measuring\n         * the time it takes to respond. If we would respond immediately, an attacker\n         * could measure the time it takes to respond and figure out if the user exists.\n         */\n\n        if (!authIdentity) {\n            await doFakeWork();\n            res.json({ success: true });\n            return\n        }\n\n        const providerData = getProviderDataWithPassword<'email'>(authIdentity.providerData);\n        const { isResendAllowed, timeLeft } = isEmailResendAllowed(providerData, 'passwordResetSentAt');\n        if (!isResendAllowed) {\n            throw new HttpError(400, `Please wait ${timeLeft} secs before trying again.`);\n        }\n\n        const passwordResetLink = await createPasswordResetLink(args.email, clientRoute);\n        try {\n            const email = authIdentity.providerUserId\n            await sendPasswordResetEmail(\n                email,\n                {\n                    from: fromField,\n                    to: email,\n                    ...getPasswordResetEmailContent({ passwordResetLink }),\n                },\n            );\n        } catch (e: any) {\n            console.error(\"Failed to send password reset email:\", e);\n            throw new HttpError(500, \"Failed to send password reset email.\");\n        }\n    \n        res.json({ success: true });\n    };\n}\n","import { Request, Response } from 'express';\nimport {\n    createProviderId,\n    findAuthIdentity,\n    updateAuthIdentityProviderData,\n    getProviderDataWithPassword,\n} from 'wasp/auth/utils';\nimport { validateJWT } from 'wasp/auth/jwt'\nimport { ensureTokenIsPresent, ensurePasswordIsPresent, ensureValidPassword } from 'wasp/auth/validation';\nimport { HttpError } from 'wasp/server';\n\nexport async function resetPassword(\n    req: Request<{ token: string; password: string; }>,\n    res: Response,\n): Promise<void> {\n    const args = req.body ?? {};\n    ensureValidArgs(args);\n\n    const { token, password } = args;\n    const { email } = await validateJWT<{ email: string }>(token)\n        .catch(() => {\n            throw new HttpError(400, \"Password reset failed, invalid token\");\n        });\n\n    const providerId = createProviderId('email', email);\n    const authIdentity = await findAuthIdentity(providerId);\n    if (!authIdentity) {\n        throw new HttpError(400, \"Password reset failed, invalid token\");\n    }\n\n    const providerData = getProviderDataWithPassword<'email'>(authIdentity.providerData);\n\n    await updateAuthIdentityProviderData(providerId, providerData, {\n        // The act of resetting the password verifies the email\n        isEmailVerified: true,\n        // The password will be hashed when saving the providerData\n        // in the DB\n        hashedPassword: password,\n    });\n\n    res.json({ success: true });\n};\n\nfunction ensureValidArgs(args: object): void {\n    ensureTokenIsPresent(args);\n    ensurePasswordIsPresent(args);\n    ensureValidPassword(args);\n}\n","import { Request, Response } from 'express';\nimport { validateJWT } from 'wasp/auth/jwt';\nimport {\n  createProviderId,\n  findAuthIdentity,\n  findAuthWithUserBy,\n  getProviderDataWithPassword,\n  updateAuthIdentityProviderData,\n} from 'wasp/auth/utils';\nimport { HttpError } from 'wasp/server';\nimport { onAfterEmailVerifiedHook } from '../../hooks.js';\n\n\nexport async function verifyEmail(\n    req: Request<{ token: string }>,\n    res: Response,\n): Promise<void> {\n    const { token } = req.body;\n    const { email } = await validateJWT<{ email: string }>(token)\n        .catch(() => {\n            throw new HttpError(400, \"Email verification failed, invalid token\");\n        });\n\n    const providerId = createProviderId('email', email);\n    const authIdentity = await findAuthIdentity(providerId);\n    if (!authIdentity) {\n        throw new HttpError(400, \"Email verification failed, invalid token\");\n    }\n\n    const providerData = getProviderDataWithPassword<'email'>(authIdentity.providerData);\n\n    await updateAuthIdentityProviderData(providerId, providerData, {\n        isEmailVerified: true,\n    });\n\n    const auth = await findAuthWithUserBy({ id: authIdentity.authId })\n\n    await onAfterEmailVerifiedHook({ req, email, user: auth.user });\n\n    res.json({ success: true });\n};\n\n","// PUBLIC API\nexport function defineUserSignupFields(fields) {\n    return fields;\n}\n//# sourceMappingURL=types.js.map","import { z } from 'zod';\nimport { defineUserSignupFields } from 'wasp/auth/providers/types';\n\nconst adminEmails = process.env.ADMIN_EMAILS?.split(',') || [];\n\nconst emailDataSchema = z.object({\n  email: z.string(),\n});\n\nexport const getEmailUserFields = defineUserSignupFields({\n  email: (data) => {\n    const emailData = emailDataSchema.parse(data);\n    return emailData.email;\n  },\n  username: (data) => {\n    const emailData = emailDataSchema.parse(data);\n    return emailData.email;\n  },\n  isAdmin: (data) => {\n    const emailData = emailDataSchema.parse(data);\n    return adminEmails.includes(emailData.email);\n  },\n});\n\nconst githubDataSchema = z.object({\n  profile: z.object({\n    emails: z\n      .array(\n        z.object({\n          email: z.string(),\n          verified: z.boolean(),\n        })\n      )\n      .min(1, 'You need to have an email address associated with your GitHub account to sign up.'),\n    login: z.string(),\n  }),\n});\n\nexport const getGitHubUserFields = defineUserSignupFields({\n  email: (data) => {\n    const githubData = githubDataSchema.parse(data);\n    return getGithubEmailInfo(githubData).email;\n  },\n  username: (data) => {\n    const githubData = githubDataSchema.parse(data);\n    return githubData.profile.login;\n  },\n  isAdmin: (data) => {\n    const githubData = githubDataSchema.parse(data);\n    const emailInfo = getGithubEmailInfo(githubData);\n    if (!emailInfo.verified) {\n      return false;\n    }\n    return adminEmails.includes(emailInfo.email);\n  },\n});\n\n// We are using the first email from the list of emails returned by GitHub.\n// If you want to use a different email, you can modify this function.\nfunction getGithubEmailInfo(githubData: z.infer<typeof githubDataSchema>) {\n  return githubData.profile.emails[0];\n}\n\n// NOTE: if we don't want to access users' emails, we can use scope [\"user:read\"]\n// instead of [\"user\"] and access args.profile.username instead\nexport function getGitHubAuthConfig() {\n  return {\n    scopes: ['user'],\n  };\n}\n\nconst googleDataSchema = z.object({\n  profile: z.object({\n    email: z.string(),\n    email_verified: z.boolean(),\n  }),\n});\n\nexport const getGoogleUserFields = defineUserSignupFields({\n  email: (data) => {\n    const googleData = googleDataSchema.parse(data);\n    return googleData.profile.email;\n  },\n  username: (data) => {\n    const googleData = googleDataSchema.parse(data);\n    return googleData.profile.email;\n  },\n  isAdmin: (data) => {\n    const googleData = googleDataSchema.parse(data);\n    if (!googleData.profile.email_verified) {\n      return false;\n    }\n    return adminEmails.includes(googleData.profile.email);\n  },\n});\n\nexport function getGoogleAuthConfig() {\n  return {\n    scopes: ['profile', 'email'], // must include at least 'profile' for Google\n  };\n}\n\nconst discordDataSchema = z.object({\n  profile: z.object({\n    username: z.string(),\n    email: z.string().email().nullable(),\n    verified: z.boolean().nullable(),\n  }),\n});\n\nexport const getDiscordUserFields = defineUserSignupFields({\n  email: (data) => {\n    const discordData = discordDataSchema.parse(data);\n    // Users need to have an email for payment processing.\n    if (!discordData.profile.email) {\n      throw new Error('You need to have an email address associated with your Discord account to sign up.');\n    }\n    return discordData.profile.email;\n  },\n  username: (data) => {\n    const discordData = discordDataSchema.parse(data);\n    return discordData.profile.username;\n  },\n  isAdmin: (data) => {\n    const discordData = discordDataSchema.parse(data);\n    if (!discordData.profile.email || !discordData.profile.verified) {\n      return false;\n    }\n    return adminEmails.includes(discordData.profile.email);\n  },\n});\n\nexport function getDiscordAuthConfig() {\n  return {\n    scopes: ['identify', 'email'],\n  };\n}\n","import { type GetVerificationEmailContentFn, type GetPasswordResetEmailContentFn } from 'wasp/server/auth';\n\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({ verificationLink }) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n});\n\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({ passwordResetLink }) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n});\n","import { Router } from \"express\";\n\nimport { ProviderConfig } from \"wasp/auth/providers/types\";\nimport type { EmailFromField } from \"wasp/server/email/core/types\";\n\nimport { getLoginRoute } from \"../email/login.js\";\nimport { getSignupRoute } from \"../email/signup.js\";\nimport { getRequestPasswordResetRoute } from \"../email/requestPasswordReset.js\";\nimport { resetPassword } from \"../email/resetPassword.js\";\nimport { verifyEmail } from \"../email/verifyEmail.js\";\nimport { GetVerificationEmailContentFn, GetPasswordResetEmailContentFn } from \"wasp/server/auth/email\";\nimport { defineHandler } from \"wasp/server/utils\";\nimport { env } from \"wasp/server\";\n\nimport { getEmailUserFields } from '../../../../../../../src/auth/userSignupFields'\nconst _waspUserSignupFields = getEmailUserFields\n\nimport { getVerificationEmailContent } from '../../../../../../../src/auth/email-and-pass/emails'\nconst _waspGetVerificationEmailContent: GetVerificationEmailContentFn = getVerificationEmailContent;\nimport { getPasswordResetEmailContent } from '../../../../../../../src/auth/email-and-pass/emails'\nconst _waspGetPasswordResetEmailContent: GetPasswordResetEmailContentFn = getPasswordResetEmailContent;\n\n\nconst fromField: EmailFromField = {\n    name: 'Postmarkr',\n    email: 'nathan@postmarkr.com',\n};\n\nconst config: ProviderConfig = {\n    id: \"email\",\n    displayName: \"Email and password\",\n    createRouter() {\n        const router = Router();\n\n        const loginRoute = defineHandler(getLoginRoute());\n        router.post('/login', loginRoute);\n\n        const signupRoute = defineHandler(getSignupRoute({\n            userSignupFields: _waspUserSignupFields,\n            fromField,\n            clientRoute: '/email-verification',\n            getVerificationEmailContent: _waspGetVerificationEmailContent,\n            isEmailAutoVerified: env.SKIP_EMAIL_VERIFICATION_IN_DEV,\n        }));\n        router.post('/signup', signupRoute);\n\n        const requestPasswordResetRoute = defineHandler(getRequestPasswordResetRoute({\n            fromField,\n            clientRoute: '/password-reset',\n            getPasswordResetEmailContent: _waspGetPasswordResetEmailContent,\n        }));\n        router.post('/request-password-reset', requestPasswordResetRoute);\n\n        router.post('/reset-password', defineHandler(resetPassword));\n        router.post('/verify-email', defineHandler(verifyEmail));\n\n        return router;\n    },\n}\n\nexport default config;\n","import { Router } from \"express\";\n\nimport email from './config/email.js'\n\nconst providers = [\n  email,\n];\n\nconst router = Router();\n\n\nfor (const provider of providers) {\n  const { createRouter } = provider;\n  const providerRouter = createRouter(provider);\n  router.use(`/${provider.id}`, providerRouter);\n  console.log(`🚀 \"${provider.displayName}\" auth initialized`);\n}\n\nexport default router;\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\nimport me from './me.js'\nimport logout from './logout.js'\n\nimport providersRouter from '../../auth/providers/index.js'\n\nconst router = express.Router()\n\nrouter.get('/me', auth, me)\nrouter.post('/logout', auth, logout)\nrouter.use('/', providersRouter)\n\nexport default router\n","import { paymentProcessor } from './paymentProcessor';\n\nexport const paymentsWebhook = paymentProcessor.webhook;\nexport const paymentsMiddlewareConfigFn = paymentProcessor.webhookMiddlewareConfigFn;\n","import { type MiddlewareConfigFn, HttpError } from 'wasp/server';\nimport { updateMailPieceStatus } from '../../mail/operations';\nimport express from 'express';\n\n/**\n * Handle Lob webhook for mail piece status updates\n */\nexport const lobWebhook = async (request: express.Request, response: express.Response, context: any) => {\n  try {\n    const payload = JSON.parse(request.body);\n    const { id: lobId, status, tracking_number } = payload;\n\n    if (!lobId) {\n      throw new HttpError(400, 'Missing required webhook data: lobId');\n    }\n\n    // Map Lob status to internal status\n    const statusMapping: Record<string, string> = {\n      'delivered': 'delivered',\n      'returned': 'returned',\n      'returned_to_sender': 'returned',\n      'in_transit': 'in_transit',\n      'processing': 'submitted',\n      'printed': 'submitted',\n      'mailed': 'submitted',\n      'created': 'submitted',\n      'cancelled': 'failed',\n      'failed': 'failed',\n    };\n\n    const internalStatus = statusMapping[status] || status || 'unknown';\n\n    // Update mail piece status in database\n    await updateMailPieceStatus({\n      lobId,\n      lobStatus: internalStatus,\n      lobTrackingNumber: tracking_number,\n      lobData: payload,\n    }, context);\n\n    console.log(`Updated mail piece ${lobId} to status: ${internalStatus}`);\n\n    return response.status(200).json({ received: true });\n  } catch (err) {\n    console.error('Lob webhook error:', err);\n    if (err instanceof HttpError) {\n      return response.status(err.statusCode).json({ error: err.message });\n    } else {\n      return response.status(400).json({ error: 'Error processing Lob webhook event' });\n    }\n  }\n};\n\n\n/**\n * Lob webhook middleware configuration\n */\nexport const lobMiddlewareConfigFn: MiddlewareConfigFn = (middlewareConfig) => {\n  middlewareConfig.delete('express.json');\n  middlewareConfig.set('express.raw', express.raw({ type: 'application/json' }));\n  return middlewareConfig;\n};\n","import { HttpError } from 'wasp/server';\r\nimport { validateAddress } from './services';\r\n\r\n/**\r\n * API endpoint for address validation\r\n * This would be called from the client-side AddressSelector component\r\n */\r\nexport async function validateAddressEndpoint(req: any, res: any, context: any) {\r\n  try {\r\n    const { address_line1, address_line2, city, state, zip_code, country } = req.body;\r\n\r\n    if (!address_line1 || !city || !state || !zip_code || !country) {\r\n      throw new HttpError(400, 'Missing required address fields');\r\n    }\r\n\r\n    const result = await validateAddress({\r\n      address_line1,\r\n      address_line2,\r\n      city,\r\n      state,\r\n      zip_code,\r\n      country,\r\n    });\r\n\r\n    res.json({\r\n      isValid: result.isValid,\r\n      error: result.error,\r\n      lobAddressId: result.verifiedAddress?.id,\r\n      verifiedAddress: result.verifiedAddress,\r\n    });\r\n  } catch (error) {\r\n    console.error('Address validation error:', error);\r\n    \r\n    if (error instanceof HttpError) {\r\n      res.status(error.statusCode).json({ error: error.message });\r\n    } else {\r\n      res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n  }\r\n}\r\n","import express from 'express'\nimport { prisma } from 'wasp/server'\nimport { defineHandler } from 'wasp/server/utils'\nimport { MiddlewareConfigFn, globalMiddlewareConfigForExpress } from '../../middleware/index.js'\nimport auth from 'wasp/core/auth'\nimport { type AuthUserData, makeAuthUserIfPossible } from 'wasp/auth/user'\n\n\nimport { paymentsWebhook as _wasppaymentsWebhookfn } from '../../../../../../src/payment/webhook'\nimport { paymentsMiddlewareConfigFn as _wasppaymentsWebhookmiddlewareConfigFn } from '../../../../../../src/payment/webhook'\nimport { lobWebhook as _wasplobWebhookfn } from '../../../../../../src/server/lob/webhook'\nimport { lobMiddlewareConfigFn as _wasplobWebhookmiddlewareConfigFn } from '../../../../../../src/server/lob/webhook'\nimport { validateAddressEndpoint as _waspvalidateAddressfn } from '../../../../../../src/server/lob/addressValidation'\n\nconst idFn: MiddlewareConfigFn = x => x\n\nconst _waspvalidateAddressmiddlewareConfigFn = idFn\n\nconst router = express.Router()\n\n\nconst paymentsWebhookMiddleware = globalMiddlewareConfigForExpress(_wasppaymentsWebhookmiddlewareConfigFn)\nrouter.post(\n  '/payments-webhook',\n  [auth, ...paymentsWebhookMiddleware],\n  defineHandler(\n    (\n      req: Parameters<typeof _wasppaymentsWebhookfn>[0] & { user: AuthUserData | null },\n      res: Parameters<typeof _wasppaymentsWebhookfn>[1],\n    ) => {\n      const context = {\n        user: makeAuthUserIfPossible(req.user),\n        entities: {\n          User: prisma.user,\n        },\n      }\n      return _wasppaymentsWebhookfn(req, res, context)\n    }\n  )\n)\nconst lobWebhookMiddleware = globalMiddlewareConfigForExpress(_wasplobWebhookmiddlewareConfigFn)\nrouter.post(\n  '/webhooks/lob',\n  [auth, ...lobWebhookMiddleware],\n  defineHandler(\n    (\n      req: Parameters<typeof _wasplobWebhookfn>[0] & { user: AuthUserData | null },\n      res: Parameters<typeof _wasplobWebhookfn>[1],\n    ) => {\n      const context = {\n        user: makeAuthUserIfPossible(req.user),\n        entities: {\n        },\n      }\n      return _wasplobWebhookfn(req, res, context)\n    }\n  )\n)\nconst validateAddressMiddleware = globalMiddlewareConfigForExpress(_waspvalidateAddressmiddlewareConfigFn)\nrouter.post(\n  '/api/validate-address',\n  [auth, ...validateAddressMiddleware],\n  defineHandler(\n    (\n      req: Parameters<typeof _waspvalidateAddressfn>[0] & { user: AuthUserData | null },\n      res: Parameters<typeof _waspvalidateAddressfn>[1],\n    ) => {\n      const context = {\n        user: makeAuthUserIfPossible(req.user),\n        entities: {\n        },\n      }\n      return _waspvalidateAddressfn(req, res, context)\n    }\n  )\n)\n\nexport default router\n","import express from 'express'\nimport operations from './operations/index.js'\nimport { globalMiddlewareConfigForExpress } from '../middleware/index.js'\nimport auth from './auth/index.js'\nimport apis from './apis/index.js'\n\n\nconst router = express.Router()\nconst middleware = globalMiddlewareConfigForExpress()\n\nrouter.get('/', middleware, function (_req, res) {\n  res.status(200).send();\n})\n\nrouter.use('/auth', middleware, auth)\nrouter.use('/operations', middleware, operations)\n// NOTE: Keep user-defined api routes last so they cannot override our routes.\n// Additionally, do not add middleware to these routes here. Instead, we add\n// it later to allow for middleware customization.\nrouter.use(apis)\n\nexport default router\n","import express from 'express'\n\nimport { HttpError } from 'wasp/server'\nimport indexRouter from './routes/index.js'\n\n// TODO: Consider extracting most of this logic into createApp(routes, path) function so that\n//   it can be used in unit tests to test each route individually.\n\nconst app = express()\n\n// NOTE: Middleware are installed on a per-router or per-route basis.\n\napp.use('/', indexRouter)\n\n// Custom error handler.\napp.use((err, _req, res, next) => {\n  // As by expressjs documentation, when the headers have already\n  // been sent to the client, we must delegate to the default error handler.\n  if (res.headersSent) { return next(err) }\n\n  if (err instanceof HttpError) {\n    return res.status(err.statusCode).json({ message: err.message, data: err.data })\n  }\n\n  // This forwards the error to the default express error handler.\n  // As described by expressjs documentation, the default error handler sets response status\n  // to err.status or err.statusCode if it is 4xx or 5xx, and if not, sets it to 500.\n  // It won't add any more info to it if server is running in production, which is exactly what we want,\n  // we want to share as little info as possible when error happens in production, for security reasons,\n  // so they will get only status code if set, or 500 if not, no extra info.\n  // In development it will also share the error stack though, which is useful.\n  // If the user wants to put more information about the error into the response, they should use HttpError.\n  return next(err)\n})\n\nexport default app\n","import { registerJob } from 'wasp/server/jobs/core/pgBoss'\nimport { processPDFMetadata } from '../../../../../src/file-upload/operations'\nimport { processPDFMetadata as _waspJobDefinition } from 'wasp/server/jobs'\n\nregisterJob({\n  job: _waspJobDefinition,\n  jobFn: processPDFMetadata,\n})\n","import { BetaAnalyticsDataClient } from '@google-analytics/data';\n\nconst CLIENT_EMAIL = process.env.GOOGLE_ANALYTICS_CLIENT_EMAIL;\nconst PRIVATE_KEY = Buffer.from(process.env.GOOGLE_ANALYTICS_PRIVATE_KEY!, 'base64').toString('utf-8');\nconst PROPERTY_ID = process.env.GOOGLE_ANALYTICS_PROPERTY_ID;\n\nconst analyticsDataClient = new BetaAnalyticsDataClient({\n  credentials: {\n    client_email: CLIENT_EMAIL,\n    private_key: PRIVATE_KEY,\n  },\n});\n\nexport async function getSources() {\n  const [response] = await analyticsDataClient.runReport({\n    property: `properties/${PROPERTY_ID}`,\n    dateRanges: [\n      {\n        startDate: '2020-01-01',\n        endDate: 'today',\n      },\n    ],\n    // for a list of dimensions and metrics see https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema\n    dimensions: [\n      {\n        name: 'source',\n      },\n    ],\n    metrics: [\n      {\n        name: 'activeUsers',\n      },\n    ],\n  });\n\n  let activeUsersPerReferrer: any[] = [];\n  if (response?.rows) {\n    activeUsersPerReferrer = response.rows.map((row) => {\n      if (row.dimensionValues && row.metricValues) {\n        return {\n          source: row.dimensionValues[0].value,\n          visitors: row.metricValues[0].value,\n        };\n      }\n    });\n  } else {\n    throw new Error('No response from Google Analytics');\n  }\n\n  return activeUsersPerReferrer;\n}\n\nexport async function getDailyPageViews() {\n  const totalViews = await getTotalPageViews();\n  const prevDayViewsChangePercent = await getPrevDayViewsChangePercent();\n\n  return {\n    totalViews,\n    prevDayViewsChangePercent,\n  };\n}\n\nasync function getTotalPageViews() {\n  const [response] = await analyticsDataClient.runReport({\n    property: `properties/${PROPERTY_ID}`,\n    dateRanges: [\n      {\n        startDate: '2020-01-01', // go back to earliest date of your app\n        endDate: 'today',\n      },\n    ],\n    metrics: [\n      {\n        name: 'screenPageViews',\n      },\n    ],\n  });\n  let totalViews = 0;\n  if (response?.rows) {\n    // @ts-ignore\n    totalViews = parseInt(response.rows[0].metricValues[0].value);\n  } else {\n    throw new Error('No response from Google Analytics');\n  }\n  return totalViews;\n}\n\nasync function getPrevDayViewsChangePercent() {\n  const [response] = await analyticsDataClient.runReport({\n    property: `properties/${PROPERTY_ID}`,\n\n    dateRanges: [\n      {\n        startDate: '2daysAgo',\n        endDate: 'yesterday',\n      },\n    ],\n    orderBys: [\n      {\n        dimension: {\n          dimensionName: 'date',\n        },\n        desc: true,\n      },\n    ],\n    dimensions: [\n      {\n        name: 'date',\n      },\n    ],\n    metrics: [\n      {\n        name: 'screenPageViews',\n      },\n    ],\n  });\n\n  let viewsFromYesterday;\n  let viewsFromDayBeforeYesterday;\n\n  if (response?.rows && response.rows.length === 2) {\n    // @ts-ignore\n    viewsFromYesterday = response.rows[0].metricValues[0].value;\n    // @ts-ignore\n    viewsFromDayBeforeYesterday = response.rows[1].metricValues[0].value;\n\n    if (viewsFromYesterday && viewsFromDayBeforeYesterday) {\n      viewsFromYesterday = parseInt(viewsFromYesterday);\n      viewsFromDayBeforeYesterday = parseInt(viewsFromDayBeforeYesterday);\n      if (viewsFromYesterday === 0 || viewsFromDayBeforeYesterday === 0) {\n        return '0';\n      }\n      console.table({ viewsFromYesterday, viewsFromDayBeforeYesterday });\n\n      const change = ((viewsFromYesterday - viewsFromDayBeforeYesterday) / viewsFromDayBeforeYesterday) * 100;\n      return change.toFixed(0);\n    }\n  } else {\n    return '0';\n  }\n}\n","import { type DailyStats } from 'wasp/entities';\nimport { type DailyStatsJob } from 'wasp/server/jobs';\nimport Stripe from 'stripe';\nimport { stripe } from '../payment/stripe/stripeClient';\nimport { getDailyPageViews, getSources } from './providers/googleAnalyticsUtils';\nimport { paymentProcessor } from '../payment/paymentProcessor';\nimport { SubscriptionStatus } from '../payment/plans';\n\nexport type DailyStatsProps = { dailyStats?: DailyStats; weeklyStats?: DailyStats[]; isLoading?: boolean };\n\nexport const calculateDailyStats: DailyStatsJob<never, void> = async (_args, context) => {\n  const nowUTC = new Date(Date.now());\n  nowUTC.setUTCHours(0, 0, 0, 0);\n\n  const yesterdayUTC = new Date(nowUTC);\n  yesterdayUTC.setUTCDate(yesterdayUTC.getUTCDate() - 1);\n\n  try {\n    const yesterdaysStats = await context.entities.DailyStats.findFirst({\n      where: {\n        date: {\n          equals: yesterdayUTC,\n        },\n      },\n    });\n\n    const userCount = await context.entities.User.count({});\n    // users can have paid but canceled subscriptions which terminate at the end of the period\n    // we don't want to count those users as current paying users\n    const paidUserCount = await context.entities.User.count({\n      where: {\n        subscriptionStatus: SubscriptionStatus.Active,\n      },\n    });\n\n    let userDelta = userCount;\n    let paidUserDelta = paidUserCount;\n    if (yesterdaysStats) {\n      userDelta -= yesterdaysStats.userCount;\n      paidUserDelta -= yesterdaysStats.paidUserCount;\n    }\n\n    let totalRevenue;\n    switch (paymentProcessor.id) {\n      case 'stripe':\n        totalRevenue = await fetchTotalStripeRevenue();\n        break;\n      case 'lemonsqueezy':\n        totalRevenue = await fetchTotalLemonSqueezyRevenue();\n        break;\n      default:\n        throw new Error(`Unsupported payment processor: ${paymentProcessor.id}`);\n    }\n\n    const { totalViews, prevDayViewsChangePercent } = await getDailyPageViews();\n\n    let dailyStats = await context.entities.DailyStats.findUnique({\n      where: {\n        date: nowUTC,\n      },\n    });\n\n    if (!dailyStats) {\n      console.log('No daily stat found for today, creating one...');\n      dailyStats = await context.entities.DailyStats.create({\n        data: {\n          date: nowUTC,\n          totalViews,\n          prevDayViewsChangePercent,\n          userCount,\n          paidUserCount,\n          userDelta,\n          paidUserDelta,\n          totalRevenue,\n        },\n      });\n    } else {\n      console.log('Daily stat found for today, updating it...');\n      dailyStats = await context.entities.DailyStats.update({\n        where: {\n          id: dailyStats.id,\n        },\n        data: {\n          totalViews,\n          prevDayViewsChangePercent,\n          userCount,\n          paidUserCount,\n          userDelta,\n          paidUserDelta,\n          totalRevenue,\n        },\n      });\n    }\n    const sources = await getSources();\n\n    for (const source of sources) {\n      let visitors = source.visitors;\n      if (typeof source.visitors !== 'number') {\n        visitors = parseInt(source.visitors);\n      }\n      await context.entities.PageViewSource.upsert({\n        where: {\n          date_name: {\n            date: nowUTC,\n            name: source.source,\n          },\n        },\n        create: {\n          date: nowUTC,\n          name: source.source,\n          visitors,\n          dailyStatsId: dailyStats.id,\n        },\n        update: {\n          visitors,\n        },\n      });\n    }\n\n    console.table({ dailyStats });\n  } catch (error: any) {\n    console.error('Error calculating daily stats: ', error);\n    await context.entities.Logs.create({\n      data: {\n        message: `Error calculating daily stats: ${error?.message}`,\n        level: 'job-error',\n      },\n    });\n  }\n};\n\nasync function fetchTotalStripeRevenue() {\n  let totalRevenue = 0;\n  let params: Stripe.BalanceTransactionListParams = {\n    limit: 100,\n    // created: {\n    //   gte: startTimestamp,\n    //   lt: endTimestamp\n    // },\n    type: 'charge',\n  };\n\n  let hasMore = true;\n  while (hasMore) {\n    const balanceTransactions = await stripe.balanceTransactions.list(params);\n\n    for (const transaction of balanceTransactions.data) {\n      if (transaction.type === 'charge') {\n        totalRevenue += transaction.amount;\n      }\n    }\n\n    if (balanceTransactions.has_more) {\n      // Set the starting point for the next iteration to the last object fetched\n      params.starting_after = balanceTransactions.data[balanceTransactions.data.length - 1].id;\n    } else {\n      hasMore = false;\n    }\n  }\n\n  // Revenue is in cents so we convert to dollars (or your main currency unit)\n  return totalRevenue / 100;\n}\n\nasync function fetchTotalLemonSqueezyRevenue() {\n  // TODO: Implement LemonSqueezy revenue fetching\n  // For now, return 0 as a placeholder\n  return 0;\n}\n\n","import { registerJob } from 'wasp/server/jobs/core/pgBoss'\nimport { calculateDailyStats } from '../../../../../src/analytics/stats'\nimport { dailyStatsJob as _waspJobDefinition } from 'wasp/server/jobs'\n\nregisterJob({\n  job: _waspJobDefinition,\n  jobFn: calculateDailyStats,\n})\n","import http from 'http'\n\nimport app from './app.js'\nimport { config } from 'wasp/server'\n\n\nimport { startPgBoss } from 'wasp/server/jobs/core/pgBoss'\nimport './jobs/core/allJobs.js'\n\n\nconst startServer = async () => {\n  await startPgBoss()\n\n  const port = normalizePort(config.port)\n  app.set('port', port)\n\n  const server = http.createServer(app)\n\n\n\n  server.listen(port)\n\n  server.on('error', (error: NodeJS.ErrnoException) => {\n    if (error.syscall !== 'listen') throw error\n    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges')\n      process.exit(1)\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use')\n      process.exit(1)\n    default:\n      throw error\n    }\n  })\n\n  server.on('listening', () => {\n    const addr = server.address()\n    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port\n    console.log('Server listening on ' + bind)\n  })\n}\n\nstartServer().catch(e => console.error(e))\n\n/**\n * Normalize a port into a number, string, or false.\n */\nfunction normalizePort (val) {\n  const port = parseInt(val, 10)\n  if (isNaN(port)) return val // named pipe\n  if (port >= 0) return port // port number\n  return false\n}\n"],"names":["config","InternalPrismaClient","prisma","auth","SubscriptionStatus","PaymentPlanId","updateIsUserAdminById","getPaginatedUsers","generateGptResponse","createTask","updateTask","deleteTask","getGptResponses","getAllTasksByUser","initEmailSender","planId","generateCheckoutSession","getCustomerPortalUrl","PgBossStatus","entities","jobSchedule","processPDFMetadata","createFile","processPDFMetadataJob","getAllFilesByUser","getDownloadFileSignedURL","deleteFile","createMailAddress","getMailAddressesByUser","deleteMailAddress","updateMailAddress","setDefaultAddress","z","createMailPiece","createMailPaymentIntent","confirmMailPayment","refundMailPayment","getMailPieces","updateMailPieceStatus","updateMailPiece","deleteMailPiece","getMailPiece","createMailPaymentIntentService","createMailCheckoutSession","confirmMailPaymentService","refundMailPaymentService","submitMailPieceToLob","createLobMailPiece","syncMailPieceStatus","getLobMailPieceStatus","bulkDeleteMailPieces","getDailyStats","router","ensureValidArgs","waspServerConfig","email","providersRouter","_wasppaymentsWebhookmiddlewareConfigFn","_wasppaymentsWebhookfn","_wasplobWebhookmiddlewareConfigFn","_wasplobWebhookfn","_waspvalidateAddressfn","operations","apis","indexRouter","_waspJobDefinition"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAM,MAAA,GAAS;AAAA,EAClB,GAAA,EAAK,UAAA;AAAA,EACL,MAAA,EAAQ;AACZ,CAAA;AACO,MAAM,UAAA,GAAa,SAAA;AAInB,SAAS,gCAAgC,QAAA,EAAU;AACtD,EAAA,MAAM,KAAA,GAAQ,OAAO,QAAQ,CAAA;AAC7B,EAAA,OAAO,CAAA,EAAG,KAAK,CAAA,EAAA,EAAK,UAAU,CAAA,CAAA;AAClC;;ACVA,MAAM,oBAAA,GAAuB,gCAAgC,KAAK,CAAA;AAE3D,SAAS,eAAA,CAAgB,MAAM,MAAA,EAAQ;AAC1C,EAAA,MAAM,MAAA,GAAS,sBAAA,CAAuB,IAAA,EAAM,MAAM,CAAA;AAClD,EAAA,IAAI,OAAO,OAAA,EAAS;AAChB,IAAA,OAAO,MAAA,CAAO,IAAA;AAAA,EAClB,CAAA,MACK;AACD,IAAA,OAAA,CAAQ,KAAA,CAAM,GAAG,oBAAoB,CAAA,EAAG,mBAAmB,MAAA,CAAO,KAAA,CAAM,MAAM,CAAC,CAAA,CAAE,CAAA;AACjF,IAAA,MAAM,IAAI,MAAM,qCAAqC,CAAA;AAAA,EACzD;AACJ;AAEO,SAAS,sBAAA,CAAuB,KAAK,MAAA,EAAQ;AAChD,EAAA,OAAO,MAAA,CAAO,UAAU,GAAG,CAAA;AAC/B;AAEO,SAAS,mBAAmB,MAAA,EAAQ;AACvC,EAAA,MAAM,WAAA,GAAc,CAAC,EAAA,EAAI,sDAAA,EAAoC,EAAE,CAAA;AAC/D,EAAA,KAAA,MAAW,SAAS,MAAA,EAAQ;AACxB,IAAA,WAAA,CAAY,IAAA,CAAK,CAAA,GAAA,EAAM,KAAA,CAAM,OAAO,CAAA,CAAE,CAAA;AAAA,EAC1C;AACA,EAAA,WAAA,CAAY,KAAK,EAAE,CAAA;AACnB,EAAA,WAAA,CAAY,KAAK,kMAAkC,CAAA;AACnD,EAAA,OAAO,WAAA,CAAY,KAAK,IAAI,CAAA;AAChC;;ACxBA,MAAM,mBAAA,GAAsB,CAAA,CAAE,MAAA,CAAO,EAAE,CAAA;AACvC,MAAM,sBAAA,GAAyB,EAAE,MAAA,CAAO;AAAA,EACpC,MAAM,CAAA,CAAE,MAAA,CAAO,MAAA,EAAO,CAAE,QAAQ,IAAI,CAAA;AAAA,EACpC,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACnB,cAAA,EAAgB;AAAA,GACnB,CAAA;AAAA,EACD,mBAAA,EAAqB,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EACzC,gCAAgC,CAAA,CAC3B,IAAA,CAAK,CAAC,MAAA,EAAQ,OAAO,CAAA,EAAG;AAAA,IACzB,OAAA,EAAS;AAAA,GACZ,EACI,SAAA,CAAU,CAAC,UAAU,KAAA,KAAU,MAAM,CAAA,CACrC,OAAA,CAAQ,OAAO;AACxB,CAAC,CAAA;AACD,MAAM,eAAA,GAAkB,EACnB,MAAA,CAAO;AAAA,EACR,cAAA,EAAgB;AACpB,CAAC,EACI,GAAA,CAAI;AAAA,EACL,OAAA,EAAS;AACb,CAAC,CAAA;AACD,MAAM,eAAA,GAAkB,EACnB,MAAA,CAAO;AAAA,EACR,cAAA,EAAgB;AACpB,CAAC,EACI,GAAA,CAAI;AAAA,EACL,OAAA,EAAS;AACb,CAAC,CAAA;AACD,MAAM,cAAA,GAAiB,EAClB,MAAA,CAAO;AAAA,EACR,cAAA,EAAgB;AACpB,CAAC,CAAA;AAGD,MAAM,eAAA,GAAkB,EAAE,MAAA,CAAO;AAAA,EAC7B,QAAA,EAAU,CAAA,CAAE,OAAA,CAAQ,aAAa,CAAA;AAAA,EACjC,iBAAA,EAAmB,eAAA,CACd,OAAA,CAAQ,uBAAuB,CAAA;AAAA,EACpC,qBAAA,EAAuB,eAAA,CAClB,OAAA,CAAQ,wBAAwB,CAAA;AAAA,EACrC,YAAA,EAAc,cAAA,CACT,OAAA,CAAQ,cAAc;AAC/B,CAAC,CAAA;AACD,MAAM,gBAAA,GAAmB,EAAE,MAAA,CAAO;AAAA,EAC9B,QAAA,EAAU,CAAA,CAAE,OAAA,CAAQ,YAAY,CAAA;AAAA,EAChC,iBAAA,EAAmB,eAAA;AAAA,EACnB,qBAAA,EAAuB,eAAA;AAAA,EACvB,YAAA,EAAc;AAClB,CAAC,CAAA;AACD,MAAM,kBAAA,GAAqB,mBAAA,CAAoB,KAAA,CAAM,sBAAsB,CAAA;AAC3E,MAAM,eAAA,GAAkB,CAAA,CAAE,kBAAA,CAAmB,UAAA,EAAY;AAAA,EACrD,eAAA,CAAgB,MAAM,kBAAkB,CAAA;AAAA,EACxC,gBAAA,CAAiB,MAAM,kBAAkB;AAC7C,CAAC,CAAA;AAEM,MAAM,GAAA,GAAM,eAAA,CAAgB,EAAE,QAAA,EAAU,eAAA,CAAgB,KAAA,CAAM,QAAA,CAAS,KAAA,EAAO,GAAG,OAAA,CAAQ,GAAA,EAAI,EAAG,eAAe,CAAA;;ACzD/G,SAAS,mBAAmB,GAAA,EAAK;AACpC,EAAA,OAAO,GAAA,EAAK,OAAA,CAAQ,KAAA,EAAO,EAAE,CAAA;AACjC;;ACAA,MAAM,WAAA,GAAc,kBAAA,CAAmB,GAAA,CAAI,qBAAqB,CAAC,CAAA;AAC/C,kBAAA,CAAmB,GAAA,CAAI,iBAAiB,CAAC;AAC3D,MAAM,wBAAA,GAA2B;AAAA,EAC7B,WAAA,EAAa,GAAA;AAAA,EACb,UAAA,EAAY,CAAC,WAAW;AAC5B,CAAA;AACA,MAAM,kBAAA,GAAqB,wBAAA,CAAyB,GAAA,CAAI,QAAQ,CAAA;AAChE,MAAMA,QAAA,GAAS;AAAA,EACX,WAAA;AAAA,EAEA,kBAAA;AAAA,EACA,KAAK,GAAA,CAAI,QAAA;AAAA,EACT,aAAA,EAAe,IAAI,QAAA,KAAa,aAAA;AAAA,EAChC,MAAM,GAAA,CAAI,IAAA;AAAA,EACV,aAAa,GAAA,CAAI,YAAA;AAAA,EACjB,IAAA,EAAM;AAAA,IACF,SAAA,EAAW,IAAI,YAAY;AAAA;AAEnC,CAAA;;ACnBA,SAAS,cAAA,GAAiB;AACtB,EAAA,OAAO,IAAIC,YAAA,EAAqB;AACpC;AACA,MAAM,WAAW,cAAA,EAAe;;ACJzB,MAAM,kBAAkB,KAAA,CAAM;AAAA,EACjC,UAAA;AAAA,EACA,IAAA;AAAA,EACA,WAAA,CAAY,UAAA,EAAY,OAAA,EAAS,IAAA,EAAM,OAAA,EAAS;AAC5C,IAAA,KAAA,CAAM,SAAS,OAAO,CAAA;AACtB,IAAA,IAAI,MAAM,iBAAA,EAAmB;AACzB,MAAA,KAAA,CAAM,iBAAA,CAAkB,MAAM,SAAS,CAAA;AAAA,IAC3C;AACA,IAAA,IAAA,CAAK,IAAA,GAAO,KAAK,WAAA,CAAY,IAAA;AAC7B,IAAA,IAAI,EAAE,OAAO,SAAA,CAAU,UAAU,KAAK,UAAA,IAAc,GAAA,IAAO,aAAa,GAAA,CAAA,EAAM;AAC1E,MAAA,MAAM,IAAI,MAAM,mDAAmD,CAAA;AAAA,IACvE;AACA,IAAA,IAAA,CAAK,UAAA,GAAa,UAAA;AAClB,IAAA,IAAI,IAAA,EAAM;AACN,MAAA,IAAA,CAAK,IAAA,GAAO,IAAA;AAAA,IAChB;AAAA,EACJ;AACJ;;ACdA,MAAM,gBAAgB,IAAI,aAAA,CAAcC,QAAA,CAAO,OAAA,EAASA,SAAO,IAAI,CAAA;AAa5D,MAAMC,MAAA,GAAO,IAAI,KAAA,CAAM,aAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWzC,iBAAA,CAAkB,EAAE,MAAA,EAAO,EAAG;AAC1B,IAAA,OAAO;AAAA,MACH;AAAA,KACJ;AAAA,EACJ;AACJ,CAAC,CAAA;;AC9BD,MAAM,cAAA,GAAiB;AAAA,EACnB,UAAA,EAAY,KAAA;AAAA,EACZ,QAAA,EAAU,CAAA;AAAA,EACV,SAAA,EAAW,EAAA;AAAA,EACX,WAAA,EAAa,CAAA;AAAA,EACb,OAAA,EAAS;AACb,CAAA;AAEA,eAAsB,aAAa,QAAA,EAAU;AACzC,EAAA,OAAO,IAAA,CAAK,iBAAA,CAAkB,QAAQ,CAAA,EAAG,cAAc,CAAA;AAC3D;AAEA,eAAsB,cAAA,CAAe,gBAAgB,QAAA,EAAU;AAC3D,EAAA,MAAM,gBAAgB,MAAM,MAAA,CAAO,gBAAgB,iBAAA,CAAkB,QAAQ,GAAG,cAAc,CAAA;AAC9F,EAAA,IAAI,CAAC,aAAA,EAAe;AAChB,IAAA,MAAM,IAAI,MAAM,kBAAkB,CAAA;AAAA,EACtC;AACJ;AAGA,SAAS,kBAAkB,QAAA,EAAU;AACjC,EAAA,OAAO,QAAA,CAAS,UAAU,MAAM,CAAA;AACpC;;ACnBO,MAAM,aAAA,GAAgB,CAAC,UAAA,KAAe,UAAA;AACtC,MAAM,KAAA,GAAQ,CAAC,EAAA,KAAO,IAAI,OAAA,CAAQ,CAAC,CAAA,KAAM,UAAA,CAAW,CAAA,EAAG,EAAE,CAAC,CAAA;;ACL1D,MAAM,cAAA,GAAiB,UAAA;AAE9B,MAAM,WAAA,GAAc,OAAA;AACpB,MAAM,WAAA,GAAc,OAAA;AAEb,SAAS,iBAAiB,IAAA,EAAM;AACnC,EAAA,QAAA,CAAS,IAAA,EAAM;AAAA,IACX,EAAE,WAAW,WAAA,EAAa,OAAA,EAAS,yBAAyB,SAAA,EAAW,CAAA,KAAA,KAAS,CAAC,CAAC,KAAA,EAAM;AAAA,IACxF,EAAE,WAAW,WAAA,EAAa,OAAA,EAAS,+BAA+B,SAAA,EAAW,CAAA,KAAA,KAAS,YAAA,CAAa,KAAK,CAAA;AAAE,GAC7G,CAAA;AACL;AAQO,SAAS,wBAAwB,IAAA,EAAM;AAC1C,EAAA,QAAA,CAAS,IAAA,EAAM;AAAA,IACX,EAAE,WAAW,cAAA,EAAgB,OAAA,EAAS,4BAA4B,SAAA,EAAW,CAAA,QAAA,KAAY,CAAC,CAAC,QAAA;AAAS,GACvG,CAAA;AACL;AAEO,SAAS,oBAAoB,IAAA,EAAM;AACtC,EAAA,QAAA,CAAS,IAAA,EAAM;AAAA,IACX,EAAE,SAAA,EAAW,cAAA,EAAgB,OAAA,EAAS,wCAAA,EAA0C,WAAW,CAAA,QAAA,KAAY,WAAA,CAAY,QAAA,EAAU,CAAC,CAAA,EAAE;AAAA,IAChI,EAAE,WAAW,cAAA,EAAgB,OAAA,EAAS,kCAAkC,SAAA,EAAW,CAAA,QAAA,KAAY,cAAA,CAAe,QAAQ,CAAA;AAAE,GAC3H,CAAA;AACL;AAEO,SAAS,qBAAqB,IAAA,EAAM;AACvC,EAAA,QAAA,CAAS,IAAA,EAAM;AAAA,IACX,EAAE,WAAW,WAAA,EAAa,OAAA,EAAS,yBAAyB,SAAA,EAAW,CAAA,KAAA,KAAS,CAAC,CAAC,KAAA;AAAM,GAC3F,CAAA;AACL;AAEO,SAAS,qBAAqB,OAAA,EAAS;AAC1C,EAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,mBAAA,EAAqB,EAAE,SAAS,CAAA;AAC7D;AACA,SAAS,QAAA,CAAS,MAAM,UAAA,EAAY;AAChC,EAAA,KAAA,MAAW,EAAE,SAAA,EAAW,OAAA,EAAS,SAAA,MAAe,UAAA,EAAY;AACxD,IAAA,IAAI,CAAC,SAAA,CAAU,IAAA,CAAK,SAAS,CAAC,CAAA,EAAG;AAC7B,MAAA,oBAAA,CAAqB,OAAO,CAAA;AAAA,IAChC;AAAA,EACJ;AACJ;AAEA,MAAM,eAAA,GAAkB,gcAAA;AACxB,SAAS,aAAa,KAAA,EAAO;AACzB,EAAA,IAAI,OAAO,UAAU,QAAA,EAAU;AAC3B,IAAA,OAAO,KAAA;AAAA,EACX;AACA,EAAA,OAAO,KAAA,CAAM,KAAA,CAAM,eAAe,CAAA,KAAM,IAAA;AAC5C;AACA,SAAS,WAAA,CAAY,OAAO,SAAA,EAAW;AACnC,EAAA,IAAI,OAAO,UAAU,QAAA,EAAU;AAC3B,IAAA,OAAO,KAAA;AAAA,EACX;AACA,EAAA,OAAO,MAAM,MAAA,IAAU,SAAA;AAC3B;AACA,SAAS,eAAe,KAAA,EAAO;AAC3B,EAAA,IAAI,OAAO,UAAU,QAAA,EAAU;AAC3B,IAAA,OAAO,KAAA;AAAA,EACX;AACA,EAAA,OAAO,IAAA,CAAK,KAAK,KAAK,CAAA;AAC1B;;CC7DqC;AAAA,EACjC,QAAA,EAAU;AAAA,IACN,MAAMD,QAAA,CAAO;AAAA;AAErB;AAOO,SAAS,gBAAA,CAAiB,cAAc,cAAA,EAAgB;AAC3D,EAAA,OAAO;AAAA,IACH,YAAA;AAAA,IACA,cAAA,EAAgB,uBAAA,CAAwB,YAAA,EAAc,cAAc;AAAA,GACxE;AACJ;AAEO,SAAS,uBAAA,CAAwB,cAAc,cAAA,EAAgB;AAClE,EAAA,QAAQ,YAAA;AAAc,IAClB,KAAK,OAAA;AAAA,IACL,KAAK,UAAA;AACD,MAAA,OAAO,eAAe,WAAA,EAAY;AAAA,IACtC,KAAK,QAAA;AAAA,IACL,KAAK,QAAA;AAAA,IACL,KAAK,SAAA;AAAA,IACL,KAAK,UAAA;AAAA,IACL,KAAK,OAAA;AACD,MAAA,OAAO,cAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYX;AAEI,MAAA,OAAO,cAAA;AAAA;AAEnB;AAEA,eAAsB,iBAAiB,UAAA,EAAY;AAC/C,EAAA,OAAOA,QAAA,CAAO,aAAa,UAAA,CAAW;AAAA,IAClC,KAAA,EAAO;AAAA,MACH,2BAAA,EAA6B;AAAA;AACjC,GACH,CAAA;AACL;AAUA,eAAsB,8BAAA,CAA+B,UAAA,EAAY,oBAAA,EAAsB,mBAAA,EAAqB;AAGxG,EAAA,MAAM,4BAAA,GAA+B,MAAM,sBAAA,CAAuB,mBAAmB,CAAA;AACrF,EAAA,MAAM,eAAA,GAAkB;AAAA,IACpB,GAAG,oBAAA;AAAA,IACH,GAAG;AAAA,GACP;AACA,EAAA,MAAM,sBAAA,GAAyB,MAAM,qBAAA,CAAsB,eAAe,CAAA;AAC1E,EAAA,OAAOA,QAAA,CAAO,aAAa,MAAA,CAAO;AAAA,IAC9B,KAAA,EAAO;AAAA,MACH,2BAAA,EAA6B;AAAA,KACjC;AAAA,IACA,IAAA,EAAM,EAAE,YAAA,EAAc,sBAAA;AAAuB,GAChD,CAAA;AACL;AAEA,eAAsB,mBAAmB,KAAA,EAAO;AAC5C,EAAA,MAAM,MAAA,GAAS,MAAMA,QAAA,CAAO,IAAA,CAAK,SAAA,CAAU,EAAE,KAAA,EAAO,OAAA,EAAS,EAAE,IAAA,EAAM,IAAA,EAAK,EAAG,CAAA;AAC7E,EAAA,IAAI,WAAW,IAAA,EAAM;AACjB,IAAA,OAAO,IAAA;AAAA,EACX;AACA,EAAA,IAAI,MAAA,CAAO,SAAS,IAAA,EAAM;AACtB,IAAA,OAAO,IAAA;AAAA,EACX;AACA,EAAA,OAAO,EAAE,GAAG,MAAA,EAAQ,IAAA,EAAM,OAAO,IAAA,EAAK;AAC1C;AAEA,eAAsB,UAAA,CAAW,UAAA,EAAY,sBAAA,EAAwB,UAAA,EAAY;AAC7E,EAAA,OAAOA,QAAA,CAAO,KAAK,MAAA,CAAO;AAAA,IACtB,IAAA,EAAM;AAAA;AAAA;AAAA,MAGF,GAAI,cAAc,EAAC;AAAA,MACnB,IAAA,EAAM;AAAA,QACF,MAAA,EAAQ;AAAA,UACJ,UAAA,EAAY;AAAA,YACR,MAAA,EAAQ;AAAA,cACJ,cAAc,UAAA,CAAW,YAAA;AAAA,cACzB,gBAAgB,UAAA,CAAW,cAAA;AAAA,cAC3B,YAAA,EAAc;AAAA;AAClB;AACJ;AACJ;AACJ,KACJ;AAAA;AAAA;AAAA,IAGA,OAAA,EAAS;AAAA,MACL,IAAA,EAAM;AAAA;AACV,GACH,CAAA;AACL;AAEA,eAAsB,mBAAmB,MAAA,EAAQ;AAC7C,EAAA,OAAOA,SAAO,IAAA,CAAK,UAAA,CAAW,EAAE,KAAA,EAAO,EAAE,IAAA,EAAM;AAAA,IACnC,EAAA,EAAI;AAAA,GACR,IAAK,CAAA;AACjB;AASA,eAAsB,UAAA,GAAa;AAC/B,EAAA,MAAM,aAAa,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,GAAI,CAAA,GAAI,GAAA;AACtD,EAAA,OAAO,MAAM,UAAU,CAAA;AAC3B;AAEO,SAAS,yBAAyB,CAAA,EAAG;AAExC,EAAA,IAAI,CAAA,YAAa,MAAA,CAAO,6BAAA,IAAiC,CAAA,CAAE,SAAS,OAAA,EAAS;AACzE,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,aAAA,EAAe;AAAA,MACpC,OAAA,EAAS,CAAA,0CAAA;AAAA,KACZ,CAAA;AAAA,EACL;AACA,EAAA,IAAI,CAAA,YAAa,OAAO,2BAAA,EAA6B;AAIjD,IAAA,OAAA,CAAQ,MAAM,CAAC,CAAA;AACf,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,aAAA,EAAe;AAAA,MACpC,OAAA,EAAS;AAAA,KACZ,CAAA;AAAA,EACL;AAEA,EAAA,IAAI,CAAA,YAAa,MAAA,CAAO,6BAAA,IAAiC,CAAA,CAAE,SAAS,OAAA,EAAS;AAGzE,IAAA,OAAA,CAAQ,MAAM,CAAC,CAAA;AACf,IAAA,OAAA,CAAQ,KAAK,2EAAqE,CAAA;AAClF,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,aAAA,EAAe;AAAA,MACpC,OAAA,EAAS,CAAA,0BAAA;AAAA,KACZ,CAAA;AAAA,EACL;AAEA,EAAA,IAAI,CAAA,YAAa,MAAA,CAAO,6BAAA,IAAiC,CAAA,CAAE,SAAS,OAAA,EAAS;AACzE,IAAA,OAAA,CAAQ,MAAM,CAAC,CAAA;AACf,IAAA,OAAA,CAAQ,IAAA,CAAK,CAAA;AAAA;AAAA,sGAAA,CAEkF,CAAA;AAC/F,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,aAAA,EAAe;AAAA,MACpC,OAAA,EAAS,CAAA,0BAAA;AAAA,KACZ,CAAA;AAAA,EACL;AACA,EAAA,MAAM,CAAA;AACV;AAEA,eAAsB,wBAAA,CAAyB,MAAM,gBAAA,EAAkB;AACnE,EAAA,MAAM,EAAE,QAAA,EAAU,SAAA,EAAW,GAAG,eAAc,GAAI,IAAA;AAClD,EAAA,MAAM,SAAS,EAAC;AAChB,EAAA,IAAI,CAAC,gBAAA,EAAkB;AACnB,IAAA,OAAO,MAAA;AAAA,EACX;AACA,EAAA,KAAA,MAAW,CAAC,KAAA,EAAO,aAAa,KAAK,MAAA,CAAO,OAAA,CAAQ,gBAAgB,CAAA,EAAG;AACnE,IAAA,IAAI;AACA,MAAA,MAAM,KAAA,GAAQ,MAAM,aAAA,CAAc,aAAa,CAAA;AAC/C,MAAA,MAAA,CAAO,KAAK,CAAA,GAAI,KAAA;AAAA,IACpB,SACO,CAAA,EAAG;AACN,MAAA,oBAAA,CAAqB,EAAE,OAAO,CAAA;AAAA,IAClC;AAAA,EACJ;AACA,EAAA,OAAO,MAAA;AACX;AAEO,SAAS,gBAAgB,YAAA,EAAc;AAC1C,EAAA,OAAO,oBAAA,CAAqB,2BAAA,CAA4B,YAAY,CAAC,CAAA;AACzE;AAEO,SAAS,4BAA4B,YAAA,EAAc;AAEtD,EAAA,OAAO,IAAA,CAAK,MAAM,YAAY,CAAA;AAClC;AACA,SAAS,qBAAqB,YAAA,EAAc;AACxC,EAAA,IAAI,4BAAA,CAA6B,YAAY,CAAA,EAAG;AAC5C,IAAA,MAAM,EAAE,cAAA,EAAgB,GAAG,IAAA,EAAK,GAAI,YAAA;AACpC,IAAA,OAAO,IAAA;AAAA,EACX,CAAA,MACK;AACD,IAAA,OAAO,YAAA;AAAA,EACX;AACJ;AAEA,eAAsB,iCAAiC,YAAA,EAAc;AACjE,EAAA,OAAO,qBAAA,CAAsB,MAAM,sBAAA,CAAuB,YAAY,CAAC,CAAA;AAC3E;AACA,SAAS,sBAAsB,YAAA,EAAc;AACzC,EAAA,OAAO,IAAA,CAAK,UAAU,YAAY,CAAA;AACtC;AACA,eAAe,uBAAuB,YAAA,EAAc;AAChD,EAAA,MAAM,IAAA,GAAO;AAAA,IACT,GAAG;AAAA,GACP;AACA,EAAA,IAAI,4BAAA,CAA6B,IAAI,CAAA,EAAG;AACpC,IAAA,IAAA,CAAK,cAAA,GAAiB,MAAM,YAAA,CAAa,IAAA,CAAK,cAAc,CAAA;AAAA,EAChE;AACA,EAAA,OAAO,IAAA;AACX;AACA,SAAS,6BAA6B,YAAA,EAAc;AAChD,EAAA,OAAO,gBAAA,IAAoB,YAAA;AAC/B;AAEO,SAAS,8BAA8B,OAAA,EAAS;AACnD,EAAA,OAAO,IAAI,SAAA,CAAU,GAAA,EAAK,qBAAA,EAAuB,EAAE,SAAS,CAAA;AAChE;;AC1OO,SAAS,mBAAmB,IAAA,EAAM;AACrC,EAAA,MAAM,EAAE,IAAA,EAAM,GAAG,IAAA,EAAK,GAAI,IAAA;AAC1B,EAAA,IAAI,CAAC,IAAA,EAAM;AACP,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA;AAAA,4EAAA,CACqD,CAAA;AAAA,EACzE;AACA,EAAA,MAAM,UAAA,GAAa;AAAA,IACf,KAAA,EAAO,eAAA,CAAgB,IAAA,EAAM,OAAO;AAAA,GACxC;AACA,EAAA,OAAO;AAAA,IACH,GAAG,IAAA;AAAA,IACH;AAAA,GACJ;AACJ;AACA,SAAS,eAAA,CAAgB,MAAM,YAAA,EAAc;AACzC,EAAA,MAAM,QAAA,GAAW,WAAA,CAAY,IAAA,EAAM,YAAY,CAAA;AAC/C,EAAA,IAAI,CAAC,QAAA,EAAU;AACX,IAAA,OAAO,IAAA;AAAA,EACX;AACA,EAAA,OAAO;AAAA,IACH,GAAG,eAAA,CAAgB,QAAA,CAAS,YAAY,CAAA;AAAA,IACxC,IAAI,QAAA,CAAS;AAAA,GACjB;AACJ;AACA,SAAS,WAAA,CAAY,MAAM,YAAA,EAAc;AACrC,EAAA,OAAO,IAAA,CAAK,WAAW,IAAA,CAAK,CAAC,MAAM,CAAA,CAAE,YAAA,KAAiB,YAAY,CAAA,IAAK,IAAA;AAC3E;;ACtBA,eAAsB,cAAc,MAAA,EAAQ;AACxC,EAAA,OAAOC,MAAA,CAAK,aAAA,CAAc,MAAA,EAAQ,EAAE,CAAA;AACxC;AAEA,eAAsB,iCAAiC,GAAA,EAAK;AACxD,EAAA,MAAM,mBAAA,GAAsB,GAAA,CAAI,OAAA,CAAQ,eAAe,CAAA;AACvD,EAAA,IAAI,OAAO,wBAAwB,QAAA,EAAU;AACzC,IAAA,OAAO,IAAA;AAAA,EACX;AACA,EAAA,MAAM,SAAA,GAAYA,MAAA,CAAK,eAAA,CAAgB,mBAAmB,CAAA;AAC1D,EAAA,IAAI,CAAC,SAAA,EAAW;AACZ,IAAA,OAAO,IAAA;AAAA,EACX;AACA,EAAA,OAAO,+BAA+B,SAAS,CAAA;AACnD;AAEA,eAAsB,+BAA+B,SAAA,EAAW;AAC5D,EAAA,MAAM,EAAE,SAAS,IAAA,EAAM,UAAA,KAAe,MAAMA,MAAA,CAAK,gBAAgB,SAAS,CAAA;AAC1E,EAAA,IAAI,CAAC,OAAA,IAAW,CAAC,UAAA,EAAY;AACzB,IAAA,OAAO,IAAA;AAAA,EACX;AACA,EAAA,OAAO;AAAA,IACH,OAAA;AAAA,IACA,IAAA,EAAM,MAAM,eAAA,CAAgB,UAAA,CAAW,MAAM;AAAA,GACjD;AACJ;AACA,eAAe,gBAAgB,MAAA,EAAQ;AACnC,EAAA,MAAM,IAAA,GAAO,MAAMD,QAAA,CAAO,IAAA,CACrB,UAAA,CAAW;AAAA,IACZ,KAAA,EAAO,EAAE,EAAA,EAAI,MAAA,EAAO;AAAA,IACpB,OAAA,EAAS;AAAA,MACL,IAAA,EAAM;AAAA,QACF,OAAA,EAAS;AAAA,UACL,UAAA,EAAY;AAAA;AAChB;AACJ;AACJ,GACH,CAAA;AACD,EAAA,IAAI,CAAC,IAAA,EAAM;AACP,IAAA,MAAM,6BAAA,EAA8B;AAAA,EACxC;AACA,EAAA,OAAO,mBAAmB,IAAI,CAAA;AAClC;AAEO,SAAS,kBAAkB,SAAA,EAAW;AACzC,EAAA,OAAOC,MAAA,CAAK,kBAAkB,SAAS,CAAA;AAC3C;;ACrCA,MAAM,IAAA,GAAO,aAAA,CAAc,OAAO,GAAA,EAAK,KAAK,IAAA,KAAS;AACjD,EAAA,MAAM,UAAA,GAAa,GAAA,CAAI,GAAA,CAAI,eAAe,CAAA;AAI1C,EAAA,IAAI,CAAC,UAAA,EAAY;AACb,IAAA,GAAA,CAAI,SAAA,GAAY,IAAA;AAChB,IAAA,GAAA,CAAI,IAAA,GAAO,IAAA;AACX,IAAA,OAAO,IAAA,EAAK;AAAA,EAChB;AACA,EAAA,MAAM,cAAA,GAAiB,MAAM,gCAAA,CAAiC,GAAG,CAAA;AACjE,EAAA,IAAI,mBAAmB,IAAA,EAAM;AACzB,IAAA,MAAM,6BAAA,EAA8B;AAAA,EACxC;AACA,EAAA,GAAA,CAAI,SAAA,GAAY,eAAe,OAAA,CAAQ,EAAA;AACvC,EAAA,GAAA,CAAI,OAAO,cAAA,CAAe,IAAA;AAC1B,EAAA,IAAA,EAAK;AACT,CAAC,CAAA;;AC7BD,MAAM,UAAU,MAAA,CAAO,OAAA;AAMvB,IAAI,OAAA,EAAS;AACT,EAAA,cAAA,CAAe;AAAA,IACX,YAAA,EAAc,CAAC,CAAA,KAAM,OAAA,CAAQ,UAAU,CAAC,CAAA;AAAA,IACxC,SAAA,EAAW,CAAC,CAAA,KAAM,CAAA,CAAE,MAAA,EAAO;AAAA,IAC3B,WAAA,EAAa,CAAC,CAAA,KAAM,IAAI,QAAQ,CAAC;AAAA,KAClC,gBAAgB,CAAA;AACvB;;ACfO,SAAS,UAAU,KAAA,EAAO;AAC7B,EAAA,OAAO,KAAA,KAAU,IAAA;AACrB;;ACkBO,SAAS,uBAAuB,IAAA,EAAM;AACzC,EAAA,OAAO,IAAA,GAAO,YAAA,CAAa,IAAI,CAAA,GAAI,IAAA;AACvC;AACA,SAAS,aAAa,IAAA,EAAM;AACxB,EAAA,OAAO;AAAA,IACH,GAAG,IAAA;AAAA,IACH,wBAAwB,MAAM;AAC1B,MAAA,MAAM,aAAa,MAAA,CAAO,MAAA,CAAO,KAAK,UAAU,CAAA,CAAE,OAAO,SAAS,CAAA;AAClE,MAAA,OAAO,WAAW,MAAA,GAAS,CAAA,GAAI,UAAA,CAAW,CAAC,EAAE,EAAA,GAAK,IAAA;AAAA,IACtD;AAAA,GACJ;AACJ;;AC3BO,SAAS,gBAAiB,SAAA,EAAW;AACxC,EAAA,OAAO,aAAA,CAAc,OAAO,GAAA,EAAK,GAAA,KAAQ;AACrC,IAAA,MAAM,OAAQ,GAAA,CAAI,IAAA,IAAQ,YAAY,GAAA,CAAI,IAAI,KAAM,EAAC;AACrD,IAAA,MAAM,OAAA,GAAU;AAAA,MACZ,IAAA,EAAM,sBAAA,CAAuB,GAAA,CAAI,IAAI;AAAA,KACzC;AACA,IAAA,MAAM,MAAA,GAAS,MAAM,SAAA,CAAU,IAAA,EAAM,OAAO,CAAA;AAC5C,IAAA,MAAM,gBAAA,GAAmB,UAAU,MAAM,CAAA;AACzC,IAAA,GAAA,CAAI,KAAK,gBAAgB,CAAA;AAAA,EAC7B,CAAC,CAAA;AACL;AAEO,SAAS,YAAY,SAAA,EAAW;AACnC,EAAA,OAAO,gBAAgB,SAAS,CAAA;AACpC;AAEO,SAAS,aAAa,SAAA,EAAW;AACpC,EAAA,OAAO,gBAAgB,SAAS,CAAA;AACpC;;ACtBO,SAAS,kBAAkB,IAAA,EAAsB;AACtD,EAAA,MAAM,KAAA,GAAQ,OAAA,CAAQ,GAAA,CAAI,IAAI,CAAA;AAC9B,EAAA,IAAI,UAAU,MAAA,EAAW;AACvB,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,QAAA,EAAW,IAAI,CAAA,aAAA,CAAe,CAAA;AAAA,EAChD,CAAA,MAAO;AACL,IAAA,OAAO,KAAA;AAAA,EACT;AACF;;ACLO,IAAK,kBAAA,qBAAAC,mBAAAA,KAAL;AACL,EAAAA,oBAAA,SAAA,CAAA,GAAU,UAAA;AACV,EAAAA,oBAAA,mBAAA,CAAA,GAAoB,sBAAA;AACpB,EAAAA,oBAAA,QAAA,CAAA,GAAS,QAAA;AACT,EAAAA,oBAAA,SAAA,CAAA,GAAU,SAAA;AAJA,EAAA,OAAAA,mBAAAA;AAAA,CAAA,EAAA,kBAAA,IAAA,EAAA,CAAA;AAOL,IAAK,aAAA,qBAAAC,cAAAA,KAAL;AACL,EAAAA,eAAA,OAAA,CAAA,GAAQ,OAAA;AACR,EAAAA,eAAA,KAAA,CAAA,GAAM,KAAA;AACN,EAAAA,eAAA,WAAA,CAAA,GAAY,WAAA;AAHF,EAAA,OAAAA,cAAAA;AAAA,CAAA,EAAA,aAAA,IAAA,EAAA,CAAA;AAeL,MAAM,YAAA,GAAmD;AAAA,EAC9D,CAAC,sBAAsB;AAAA,IACrB,yBAAA,EAA2B,MAAM,iBAAA,CAAkB,qCAAqC,CAAA;AAAA,IACxF,MAAA,EAAQ,EAAE,IAAA,EAAM,cAAA;AAAe,GACjC;AAAA,EACA,CAAC,kBAAoB;AAAA,IACnB,yBAAA,EAA2B,MAAM,iBAAA,CAAkB,mCAAmC,CAAA;AAAA,IACtF,MAAA,EAAQ,EAAE,IAAA,EAAM,cAAA;AAAe,GACjC;AAAA,EACA,CAAC,8BAA0B;AAAA,IACzB,yBAAA,EAA2B,MAAM,iBAAA,CAAkB,6BAA6B,CAAA;AAAA,IAChF,MAAA,EAAQ,EAAE,IAAA,EAAM,SAAA,EAAW,QAAQ,EAAA;AAAG;AAE1C,CAAA;;AClCO,SAAS,gCAAA,CACd,QACA,OAAA,EACiB;AACjB,EAAA,MAAM,WAAA,GAAc,MAAA,CAAO,SAAA,CAAU,OAAO,CAAA;AAC5C,EAAA,IAAI,CAAC,YAAY,OAAA,EAAS;AACxB,IAAA,OAAA,CAAQ,KAAA,CAAM,YAAY,KAAK,CAAA;AAC/B,IAAA,MAAM,IAAI,UAAU,GAAA,EAAK,uCAAA,EAAyC,EAAE,MAAA,EAAQ,WAAA,CAAY,KAAA,CAAM,MAAA,EAAQ,CAAA;AAAA,EACxG,CAAA,MAAO;AACL,IAAA,OAAO,WAAA,CAAY,IAAA;AAAA,EACrB;AACF;;ACNA,MAAM,8BAAA,GAAiC,EAAE,MAAA,CAAO;AAAA,EAC9C,EAAA,EAAI,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EACxB,OAAA,EAAS,EAAE,OAAA;AACb,CAAC,CAAA;AAIM,MAAMC,uBAAA,GAA+E,OAC1F,OAAA,EACA,OAAA,KACG;AACH,EAAA,MAAM,EAAE,EAAA,EAAI,OAAA,EAAQ,GAAI,gCAAA,CAAiC,gCAAgC,OAAO,CAAA;AAEhG,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gEAAgE,CAAA;AAAA,EAC3F;AAEA,EAAA,IAAI,CAAC,OAAA,CAAQ,IAAA,CAAK,OAAA,EAAS;AACzB,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,mDAAmD,CAAA;AAAA,EAC9E;AAEA,EAAA,OAAO,OAAA,CAAQ,QAAA,CAAS,IAAA,CAAK,MAAA,CAAO;AAAA,IAClC,KAAA,EAAO,EAAE,EAAA,EAAG;AAAA,IACZ,IAAA,EAAM,EAAE,OAAA;AAAQ,GACjB,CAAA;AACH,CAAA;AAUA,MAAM,sBAAA,GAAyB,EAAE,MAAA,CAAO;AAAA,EACtC,SAAA,EAAW,EAAE,MAAA,EAAO;AAAA,EACpB,MAAA,EAAQ,EAAE,MAAA,CAAO;AAAA,IACf,eAAe,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,GAAW,QAAA,EAAS;AAAA,IAC9C,OAAA,EAAS,CAAA,CAAE,OAAA,EAAQ,CAAE,QAAA,EAAS;AAAA,IAC9B,oBAAA,EAAsB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,UAAA,CAAW,kBAAkB,CAAA,CAAE,QAAA,EAAU,CAAA,CAAE,QAAA;AAAS,GACrF;AACH,CAAC,CAAA;AAIM,MAAMC,mBAAA,GAAwF,OACnG,OAAA,EACA,OAAA,KACG;AACH,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gEAAgE,CAAA;AAAA,EAC3F;AAEA,EAAA,IAAI,CAAC,OAAA,CAAQ,IAAA,CAAK,OAAA,EAAS;AACzB,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,mDAAmD,CAAA;AAAA,EAC9E;AAEA,EAAA,MAAM;AAAA,IACJ,SAAA;AAAA,IACA,MAAA,EAAQ,EAAE,oBAAA,EAAsB,kBAAA,EAAoB,eAAe,OAAA;AAAQ,GAC7E,GAAI,gCAAA,CAAiC,sBAAA,EAAwB,OAAO,CAAA;AAEpE,EAAA,MAAM,wBAAA,GAA2B,CAAC,CAAC,kBAAA,EAAoB,KAAK,CAAC,MAAA,KAAW,WAAW,IAAI,CAAA;AACvF,EAAA,MAAM,8BAA8B,kBAAA,EAAoB,MAAA,CAAO,CAAC,MAAA,KAAW,WAAW,IAAI,CAAA;AAE1F,EAAA,MAAM,QAAA,GAAW,EAAA;AAEjB,EAAA,MAAM,aAAA,GAAyC;AAAA,IAC7C,MAAM,SAAA,GAAY,QAAA;AAAA,IAClB,IAAA,EAAM,QAAA;AAAA,IACN,KAAA,EAAO;AAAA,MACL,GAAA,EAAK;AAAA,QACH;AAAA,UACE,KAAA,EAAO;AAAA,YACL,QAAA,EAAU,aAAA;AAAA,YACV,IAAA,EAAM;AAAA,WACR;AAAA,UACA;AAAA,SACF;AAAA,QACA;AAAA,UACE,EAAA,EAAI;AAAA,YACF;AAAA,cACE,kBAAA,EAAoB;AAAA,gBAClB,EAAA,EAAI;AAAA;AACN,aACF;AAAA,YACA;AAAA,cACE,kBAAA,EAAoB,2BAA2B,IAAA,GAAO;AAAA;AACxD;AACF;AACF;AACF,KACF;AAAA,IACA,MAAA,EAAQ;AAAA,MACN,EAAA,EAAI,IAAA;AAAA,MACJ,KAAA,EAAO,IAAA;AAAA,MACP,QAAA,EAAU,IAAA;AAAA,MACV,OAAA,EAAS,IAAA;AAAA,MACT,kBAAA,EAAoB,IAAA;AAAA,MACpB,sBAAA,EAAwB;AAAA,KAC1B;AAAA,IACA,OAAA,EAAS;AAAA,MACP,QAAA,EAAU;AAAA;AACZ,GACF;AAEA,EAAA,MAAM,CAAC,WAAA,EAAa,UAAU,CAAA,GAAI,MAAML,SAAO,YAAA,CAAa;AAAA,IAC1D,OAAA,CAAQ,QAAA,CAAS,IAAA,CAAK,QAAA,CAAS,aAAa,CAAA;AAAA,IAC5C,OAAA,CAAQ,SAAS,IAAA,CAAK,KAAA,CAAM,EAAE,KAAA,EAAO,aAAA,CAAc,OAAO;AAAA,GAC3D,CAAA;AACD,EAAA,MAAM,UAAA,GAAa,IAAA,CAAK,IAAA,CAAK,UAAA,GAAa,QAAQ,CAAA;AAElD,EAAA,OAAO;AAAA,IACL,KAAA,EAAO,WAAA;AAAA,IACP;AAAA,GACF;AACF,CAAA;;ACxHA,sCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQI,wBAA8B,IAAA,EAAM;AAAA,IAC1C,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMJ,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACTA,4BAAe,aAAaI,uBAAqB,CAAA;;ACcjD,MAAM,SAAS,WAAA,EAAY;AAC3B,SAAS,WAAA,GAAsB;AAC7B,EAAA,IAAI,OAAA,CAAQ,IAAI,cAAA,EAAgB;AAC9B,IAAA,OAAO,IAAI,MAAA,CAAO,EAAE,QAAQ,OAAA,CAAQ,GAAA,CAAI,gBAAgB,CAAA;AAAA,EAC1D,CAAA,MAAO;AACL,IAAA,MAAM,IAAI,MAAM,2BAA2B,CAAA;AAAA,EAC7C;AACF;AAGA,MAAM,8BAAA,GAAiC,EAAE,MAAA,CAAO;AAAA,EAC9C,KAAA,EAAO,EAAE,MAAA;AACX,CAAC,CAAA;AAIM,MAAME,qBAAA,GAAwF,OACnG,OAAA,EACA,OAAA,KACG;AACH,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gEAAgE,CAAA;AAAA,EAC3F;AAEA,EAAA,MAAM,EAAE,KAAA,EAAM,GAAI,gCAAA,CAAiC,gCAAgC,OAAO,CAAA;AAC1F,EAAA,MAAM,KAAA,GAAQ,MAAM,OAAA,CAAQ,QAAA,CAAS,KAAK,QAAA,CAAS;AAAA,IACjD,KAAA,EAAO;AAAA,MACL,IAAA,EAAM;AAAA,QACJ,EAAA,EAAI,QAAQ,IAAA,CAAK;AAAA;AACnB;AACF,GACD,CAAA;AAED,EAAA,OAAA,CAAQ,IAAI,qBAAqB,CAAA;AACjC,EAAA,MAAM,iBAAA,GAAoB,MAAM,uBAAA,CAAwB,KAAA,EAAO,KAAK,CAAA;AACpE,EAAA,IAAI,sBAAsB,IAAA,EAAM;AAC9B,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,oDAAoD,CAAA;AAAA,EAC/E;AAEA,EAAA,MAAM,cAAA,GAAiB,OAAA,CAAQ,QAAA,CAAS,WAAA,CAAY,MAAA,CAAO;AAAA,IACzD,IAAA,EAAM;AAAA,MACJ,IAAA,EAAM,EAAE,OAAA,EAAS,EAAE,IAAI,OAAA,CAAQ,IAAA,CAAK,IAAG,EAAE;AAAA,MACzC,OAAA,EAAS,IAAA,CAAK,SAAA,CAAU,iBAAiB;AAAA;AAC3C,GACD,CAAA;AAED,EAAA,MAAM,YAAA,GAAoD,CAAC,cAAc,CAAA;AAUzE,EAAA,IAAI,CAAC,gBAAA,CAAiB,OAAA,CAAQ,IAAI,CAAA,EAAG;AACnC,IAAA,IAAI,OAAA,CAAQ,IAAA,CAAK,OAAA,GAAU,CAAA,EAAG;AAC5B,MAAA,MAAM,eAAA,GAAkB,OAAA,CAAQ,QAAA,CAAS,IAAA,CAAK,MAAA,CAAO;AAAA,QACnD,KAAA,EAAO,EAAE,EAAA,EAAI,OAAA,CAAQ,KAAK,EAAA,EAAG;AAAA,QAC7B,IAAA,EAAM;AAAA,UACJ,OAAA,EAAS;AAAA,YACP,SAAA,EAAW;AAAA;AACb;AACF,OACD,CAAA;AACD,MAAA,YAAA,CAAa,KAAK,eAAe,CAAA;AAAA,IACnC,CAAA,MAAO;AACL,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,wCAAwC,CAAA;AAAA,IACnE;AAAA,EACF;AAEA,EAAA,OAAA,CAAQ,IAAI,0CAA0C,CAAA;AACtD,EAAA,MAAMN,QAAA,CAAO,aAAa,YAAY,CAAA;AAEtC,EAAA,OAAO,iBAAA;AACT,CAAA;AAEA,SAAS,iBAAiB,IAAA,EAAY;AACpC,EAAA,OACE,KAAK,kBAAA,KAAuB,kBAAA,CAAmB,MAAA,IAC/C,IAAA,CAAK,uBAAuB,kBAAA,CAAmB,iBAAA;AAEnD;AAEA,MAAM,qBAAA,GAAwB,EAAE,MAAA,CAAO;AAAA,EACrC,WAAA,EAAa,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA;AAC1B,CAAC,CAAA;AAIM,MAAMO,YAAA,GAAgD,OAAO,OAAA,EAAS,OAAA,KAAY;AACvF,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AAEA,EAAA,MAAM,EAAE,WAAA,EAAY,GAAI,gCAAA,CAAiC,uBAAuB,OAAO,CAAA;AAEvF,EAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,QAAA,CAAS,KAAK,MAAA,CAAO;AAAA,IAC9C,IAAA,EAAM;AAAA,MACJ,WAAA;AAAA,MACA,IAAA,EAAM,EAAE,OAAA,EAAS,EAAE,IAAI,OAAA,CAAQ,IAAA,CAAK,IAAG;AAAE;AAC3C,GACD,CAAA;AAED,EAAA,OAAO,IAAA;AACT,CAAA;AAEA,MAAM,qBAAA,GAAwB,EAAE,MAAA,CAAO;AAAA,EACrC,EAAA,EAAI,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EACxB,MAAA,EAAQ,CAAA,CAAE,OAAA,EAAQ,CAAE,QAAA,EAAS;AAAA,EAC7B,IAAA,EAAM,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA;AACnB,CAAC,CAAA;AAIM,MAAMC,YAAA,GAAgD,OAAO,OAAA,EAAS,OAAA,KAAY;AACvF,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AAEA,EAAA,MAAM,EAAE,EAAA,EAAI,MAAA,EAAQ,MAAK,GAAI,gCAAA,CAAiC,uBAAuB,OAAO,CAAA;AAE5F,EAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,QAAA,CAAS,KAAK,MAAA,CAAO;AAAA,IAC9C,KAAA,EAAO;AAAA,MACL,EAAA;AAAA,MACA,IAAA,EAAM;AAAA,QACJ,EAAA,EAAI,QAAQ,IAAA,CAAK;AAAA;AACnB,KACF;AAAA,IACA,IAAA,EAAM;AAAA,MACJ,MAAA;AAAA,MACA;AAAA;AACF,GACD,CAAA;AAED,EAAA,OAAO,IAAA;AACT,CAAA;AAEA,MAAM,qBAAA,GAAwB,EAAE,MAAA,CAAO;AAAA,EACrC,EAAA,EAAI,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA;AACjB,CAAC,CAAA;AAIM,MAAMC,YAAA,GAAgD,OAAO,OAAA,EAAS,OAAA,KAAY;AACvF,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AAEA,EAAA,MAAM,EAAE,EAAA,EAAG,GAAI,gCAAA,CAAiC,uBAAuB,OAAO,CAAA;AAE9E,EAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,QAAA,CAAS,KAAK,MAAA,CAAO;AAAA,IAC9C,KAAA,EAAO;AAAA,MACL,EAAA;AAAA,MACA,IAAA,EAAM;AAAA,QACJ,EAAA,EAAI,QAAQ,IAAA,CAAK;AAAA;AACnB;AACF,GACD,CAAA;AAED,EAAA,OAAO,IAAA;AACT,CAAA;AAIO,MAAMC,iBAAA,GAAwD,OAAO,KAAA,EAAO,OAAA,KAAY;AAC7F,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AACA,EAAA,OAAO,OAAA,CAAQ,QAAA,CAAS,WAAA,CAAY,QAAA,CAAS;AAAA,IAC3C,KAAA,EAAO;AAAA,MACL,IAAA,EAAM;AAAA,QACJ,EAAA,EAAI,QAAQ,IAAA,CAAK;AAAA;AACnB;AACF,GACD,CAAA;AACH,CAAA;AAEO,MAAMC,mBAAA,GAAqD,OAAO,KAAA,EAAO,OAAA,KAAY;AAC1F,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AACA,EAAA,OAAO,OAAA,CAAQ,QAAA,CAAS,IAAA,CAAK,QAAA,CAAS;AAAA,IACpC,KAAA,EAAO;AAAA,MACL,IAAA,EAAM;AAAA,QACJ,EAAA,EAAI,QAAQ,IAAA,CAAK;AAAA;AACnB,KACF;AAAA,IACA,OAAA,EAAS;AAAA,MACP,SAAA,EAAW;AAAA;AACb,GACD,CAAA;AACH,CAAA;AAGA,eAAe,uBAAA,CAAwB,OAAe,KAAA,EAAkD;AACtG,EAAA,MAAM,cAAc,KAAA,CAAM,GAAA,CAAI,CAAC,EAAE,WAAA,EAAa,MAAK,MAAO;AAAA,IACxD,WAAA;AAAA,IACA;AAAA,GACF,CAAE,CAAA;AAEF,EAAA,MAAM,UAAA,GAAa,MAAM,MAAA,CAAO,IAAA,CAAK,YAAY,MAAA,CAAO;AAAA,IACtD,KAAA,EAAO,eAAA;AAAA;AAAA,IACP,QAAA,EAAU;AAAA,MACR;AAAA,QACE,IAAA,EAAM,QAAA;AAAA,QACN,OAAA,EACE;AAAA,OACJ;AAAA,MACA;AAAA,QACE,IAAA,EAAM,MAAA;AAAA,QACN,OAAA,EAAS,CAAA,YAAA,EAAe,KAAK,CAAA,qDAAA,EAAwD,IAAA,CAAK,SAAA;AAAA,UACxF;AAAA,SACD,CAAA,+GAAA;AAAA;AACH,KACF;AAAA,IACA,KAAA,EAAO;AAAA,MACL;AAAA,QACE,IAAA,EAAM,UAAA;AAAA,QACN,QAAA,EAAU;AAAA,UACR,IAAA,EAAM,qBAAA;AAAA,UACN,WAAA,EAAa,8CAAA;AAAA,UACb,UAAA,EAAY;AAAA,YACV,IAAA,EAAM,QAAA;AAAA,YACN,UAAA,EAAY;AAAA,cACV,KAAA,EAAO;AAAA,gBACL,IAAA,EAAM,OAAA;AAAA,gBACN,WAAA,EAAa,0DAAA;AAAA,gBACb,KAAA,EAAO;AAAA,kBACL,IAAA,EAAM,QAAA;AAAA,kBACN,UAAA,EAAY;AAAA,oBACV,IAAA,EAAM;AAAA,sBACJ,IAAA,EAAM,QAAA;AAAA,sBACN,WAAA,EAAa;AAAA,qBACf;AAAA,oBACA,QAAA,EAAU;AAAA,sBACR,IAAA,EAAM,QAAA;AAAA,sBACN,IAAA,EAAM,CAAC,KAAA,EAAO,QAAA,EAAU,MAAM,CAAA;AAAA,sBAC9B,WAAA,EAAa;AAAA;AACf;AACF;AACF,eACF;AAAA,cACA,SAAA,EAAW;AAAA,gBACT,IAAA,EAAM,OAAA;AAAA,gBACN,KAAA,EAAO;AAAA,kBACL,IAAA,EAAM,QAAA;AAAA,kBACN,UAAA,EAAY;AAAA,oBACV,WAAA,EAAa;AAAA,sBACX,IAAA,EAAM,QAAA;AAAA,sBACN,WAAA,EACE;AAAA,qBACJ;AAAA,oBACA,IAAA,EAAM;AAAA,sBACJ,IAAA,EAAM,QAAA;AAAA,sBACN,WAAA,EAAa;AAAA,qBACf;AAAA,oBACA,QAAA,EAAU;AAAA,sBACR,IAAA,EAAM,QAAA;AAAA,sBACN,WAAA,EAAa;AAAA;AACf;AACF;AACF;AACF,aACF;AAAA,YACA,QAAA,EAAU,CAAC,OAAA,EAAS,WAAA,EAAa,QAAQ,UAAU;AAAA;AACrD;AACF;AACF,KACF;AAAA,IACA,WAAA,EAAa;AAAA,MACX,IAAA,EAAM,UAAA;AAAA,MACN,QAAA,EAAU;AAAA,QACR,IAAA,EAAM;AAAA;AACR,KACF;AAAA,IACA,WAAA,EAAa;AAAA,GACd,CAAA;AAED,EAAA,MAAM,WAAA,GAAc,YAAY,OAAA,CAAQ,CAAC,GAAG,OAAA,EAAS,UAAA,GAAa,CAAC,CAAA,EAAG,QAAA,CAAS,SAAA;AAC/E,EAAA,OAAO,WAAA,KAAgB,MAAA,GAAY,IAAA,CAAK,KAAA,CAAM,WAAW,CAAA,GAAI,IAAA;AAC/D;;ACtSA,oCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQL,sBAA4B,IAAA,EAAM;AAAA,IACxC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMN,QAAA,CAAO,IAAA;AAAA,MACb,MAAMA,QAAA,CAAO,IAAA;AAAA,MACb,aAAaA,QAAA,CAAO;AAAA;AACtB,GACD,CAAA;AACH;;ACXA,0BAAe,aAAaM,qBAAmB,CAAA;;ACE/C,2BAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQC,aAAmB,IAAA,EAAM;AAAA,IAC/B,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMP,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACTA,iBAAe,aAAaO,YAAU,CAAA;;ACEtC,2BAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQE,aAAmB,IAAA,EAAM;AAAA,IAC/B,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMT,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACTA,iBAAe,aAAaS,YAAU,CAAA;;ACEtC,2BAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQD,aAAmB,IAAA,EAAM;AAAA,IAC/B,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMR,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACTA,iBAAe,aAAaQ,YAAU,CAAA;;ACA/B,MAAM,MAAA,GAAS,IAAI,MAAA,CAAO,iBAAA,CAAkB,gBAAgB,CAAA,EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpE,UAAA,EAAY;AACd,CAAC,CAAA;;ACLD,MAAM,MAAA,GAAS,OAAA,CAAQ,GAAA,CAAI,mBAAA,IAAuB,uBAAA;AAElD,eAAsB,oBAAoB,aAAA,EAAuB;AAC/D,EAAA,IAAI,QAAA;AACJ,EAAA,IAAI;AACF,IAAA,MAAM,eAAA,GAAkB,MAAM,MAAA,CAAO,SAAA,CAAU,IAAA,CAAK;AAAA,MAClD,KAAA,EAAO;AAAA,KACR,CAAA;AACD,IAAA,IAAI,CAAC,eAAA,CAAgB,IAAA,CAAK,MAAA,EAAQ;AAChC,MAAA,OAAA,CAAQ,IAAI,mBAAmB,CAAA;AAC/B,MAAA,QAAA,GAAW,MAAM,MAAA,CAAO,SAAA,CAAU,MAAA,CAAO;AAAA,QACvC,KAAA,EAAO;AAAA,OACR,CAAA;AAAA,IACH,CAAA,MAAO;AACL,MAAA,OAAA,CAAQ,IAAI,yBAAyB,CAAA;AACrC,MAAA,QAAA,GAAW,eAAA,CAAgB,KAAK,CAAC,CAAA;AAAA,IACnC;AACA,IAAA,OAAO,QAAA;AAAA,EACT,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,MAAM,KAAK,CAAA;AACnB,IAAA,MAAM,KAAA;AAAA,EACR;AACF;AAQA,eAAsB,2BAAA,CAA4B;AAAA,EAChD,OAAA;AAAA,EACA,UAAA;AAAA,EACA;AACF,CAAA,EAAsC;AACpC,EAAA,IAAI;AACF,IAAA,OAAO,MAAM,MAAA,CAAO,QAAA,CAAS,QAAA,CAAS,MAAA,CAAO;AAAA,MAC3C,UAAA,EAAY;AAAA,QACV;AAAA,UACE,KAAA,EAAO,OAAA;AAAA,UACP,QAAA,EAAU;AAAA;AACZ,OACF;AAAA,MACA,IAAA;AAAA,MACA,WAAA,EAAa,GAAG,MAAM,CAAA,wBAAA,CAAA;AAAA,MACtB,UAAA,EAAY,GAAG,MAAM,CAAA,yBAAA,CAAA;AAAA,MACrB,aAAA,EAAe,EAAE,OAAA,EAAS,IAAA,EAAK;AAAA,MAC/B,qBAAA,EAAuB,IAAA;AAAA,MACvB,eAAA,EAAiB;AAAA,QACf,OAAA,EAAS;AAAA,OACX;AAAA,MACA,QAAA,EAAU;AAAA,KACX,CAAA;AAAA,EACH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,MAAM,KAAK,CAAA;AACnB,IAAA,MAAM,KAAA;AAAA,EACR;AACF;;AC3DO,MAAM,8BAAA,GAAiC,OAC5C,EAAE,YAAA,EAAc,kBAAkB,kBAAA,EAAoB,QAAA,EAAU,qBAAA,EAAsB,EAOtF,YAAA,KACG;AACH,EAAA,OAAO,aAAa,MAAA,CAAO;AAAA,IACzB,KAAA,EAAO;AAAA,MACL,sBAAA,EAAwB;AAAA,KAC1B;AAAA,IACA,IAAA,EAAM;AAAA,MACJ,sBAAA,EAAwB,YAAA;AAAA,MACxB,gBAAA;AAAA,MACA,kBAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAS,qBAAA,KAA0B,MAAA,GAAY,EAAE,SAAA,EAAW,uBAAsB,GAAI;AAAA;AACxF,GACD,CAAA;AACH,CAAA;;ACfO,SAAS,mBAAA,GAAsB;AAClC,EAAA,OAAO;AAAA,IACH,KAAA,EAAO,sBAAA;AAAA,IACP,IAAA,EAAM;AAAA,GACV;AACJ;;ACdA,MAAM,uBAAA,GAA0B,gCAAgC,QAAQ,CAAA;AAEjE,SAAS,qBAAqB,MAAA,EAAQ;AACzC,EAAA,MAAM,mBAAmB,mBAAA,EAAoB;AAC7C,EAAA,OAAO;AAAA,IACH,IAAA,EAAM,OAAO,KAAA,KAAU;AACnB,MAAA,MAAM,SAAA,GAAY,MAAM,IAAA,IAAQ,gBAAA;AAChC,MAAA,OAAA,CAAQ,GAAA,CAAI,yBAAyB,wJAA2B,CAAA;AAChE,MAAA,OAAA,CAAQ,GAAA,CAAI,yBAAyB,gDAA4B,CAAA;AACjE,MAAA,OAAA,CAAQ,GAAA,CAAI,yBAAyB,wJAA2B,CAAA;AAChE,MAAA,OAAA,CAAQ,IAAI,CAAA,SAAA,EAAY,SAAA,CAAU,IAAI,CAAA,EAAA,EAAK,SAAA,CAAU,KAAK,CAAA,CAAA,CAAG,CAAA;AAC7D,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,SAAA,EAAY,KAAA,CAAM,EAAE,CAAA,CAAE,CAAA;AAClC,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,SAAA,EAAY,KAAA,CAAM,OAAO,CAAA,CAAE,CAAA;AACvC,MAAA,OAAA,CAAQ,GAAA,CAAI,yBAAyB,oHAA0B,CAAA;AAC/D,MAAA,OAAA,CAAQ,GAAA,CAAI,MAAM,IAAI,CAAA;AACtB,MAAA,OAAA,CAAQ,GAAA,CAAI,yBAAyB,oHAA0B,CAAA;AAC/D,MAAA,OAAA,CAAQ,GAAA,CAAI,MAAM,IAAI,CAAA;AACtB,MAAA,OAAA,CAAQ,GAAA,CAAI,yBAAyB,kJAA0B,CAAA;AAC/D,MAAA,OAAO;AAAA,QACH,OAAA,EAAS;AAAA,OACb;AAAA,IACJ;AAAA,GACJ;AACJ;;ACpBO,MAAM,WAAA,GAAcI,qBAA6B,CAAA;;ACAjD,SAAS,kBAAkB,CAAA,EAAiB;AACjD,EAAA,MAAM,MAAM,iCAAiC,CAAA;AAC/C;;ACPO,MAAM,mCAAmC,KAAA,CAAM;AAAA,EACpD,YAAY,SAAA,EAAmB;AAC7B,IAAA,KAAA,CAAM,CAAA,sBAAA,EAAyB,SAAS,CAAA,CAAE,CAAA;AAC1C,IAAA,IAAA,CAAK,IAAA,GAAO,4BAAA;AAAA,EACd;AACF;;ACAA,eAAsB,oBAAoB,cAAA,EAA8B;AACtE,EAAA,IAAI;AACF,IAAA,MAAM,KAAA,GAAQ,MAAM,wBAAA,CAAyB,UAAA,CAAW,cAAc,CAAA;AACtE,IAAA,QAAQ,MAAM,IAAA;AAAM,MAClB,KAAK,4BAAA;AACH,QAAA,MAAM,UAAU,MAAM,0BAAA,CAA2B,UAAA,CAAW,KAAA,CAAM,KAAK,MAAM,CAAA;AAC7E,QAAA,OAAO,EAAE,SAAA,EAAW,KAAA,CAAM,IAAA,EAAM,MAAM,OAAA,EAAQ;AAAA,MAChD,KAAK,cAAA;AACH,QAAA,MAAM,UAAU,MAAM,qBAAA,CAAsB,UAAA,CAAW,KAAA,CAAM,KAAK,MAAM,CAAA;AACxE,QAAA,OAAO,EAAE,SAAA,EAAW,KAAA,CAAM,IAAA,EAAM,MAAM,OAAA,EAAQ;AAAA,MAChD,KAAK,+BAAA;AACH,QAAA,MAAM,sBAAsB,MAAM,6BAAA,CAA8B,UAAA,CAAW,KAAA,CAAM,KAAK,MAAM,CAAA;AAC5F,QAAA,OAAO,EAAE,SAAA,EAAW,KAAA,CAAM,IAAA,EAAM,MAAM,mBAAA,EAAoB;AAAA,MAC5D,KAAK,+BAAA;AACH,QAAA,MAAM,sBAAsB,MAAM,6BAAA,CAA8B,UAAA,CAAW,KAAA,CAAM,KAAK,MAAM,CAAA;AAC5F,QAAA,OAAO,EAAE,SAAA,EAAW,KAAA,CAAM,IAAA,EAAM,MAAM,mBAAA,EAAoB;AAAA,MAC5D,KAAK,0BAAA;AACH,QAAA,MAAM,gBAAgB,MAAM,gCAAA,CAAiC,UAAA,CAAW,KAAA,CAAM,KAAK,MAAM,CAAA;AACzF,QAAA,OAAO,EAAE,SAAA,EAAW,KAAA,CAAM,IAAA,EAAM,MAAM,aAAA,EAAc;AAAA,MACtD,KAAK,+BAAA;AACH,QAAA,MAAM,sBAAsB,MAAM,6BAAA,CAA8B,UAAA,CAAW,KAAA,CAAM,KAAK,MAAM,CAAA;AAC5F,QAAA,OAAO,EAAE,SAAA,EAAW,KAAA,CAAM,IAAA,EAAM,MAAM,mBAAA,EAAoB;AAAA,MAC5D;AAEE,QAAA,MAAM,IAAI,0BAAA,CAA2B,KAAA,CAAM,IAAI,CAAA;AAAA;AACnD,EACF,SAAS,CAAA,EAAY;AACnB,IAAA,IAAI,aAAa,0BAAA,EAA4B;AAC3C,MAAA,MAAM,CAAA;AAAA,IACR,CAAA,MAAO;AACL,MAAA,OAAA,CAAQ,MAAM,CAAC,CAAA;AACf,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,mCAAmC,CAAA;AAAA,IAC9D;AAAA,EACF;AACF;AAMA,MAAM,wBAAA,GAA2B,EAAE,MAAA,CAAO;AAAA,EACxC,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,EACf,IAAA,EAAM,EAAE,MAAA,CAAO;AAAA,IACb,MAAA,EAAQ,EAAE,OAAA;AAAQ,GACnB;AACH,CAAC,CAAA;AAMD,MAAM,0BAAA,GAA6B,EAAE,MAAA,CAAO;AAAA,EAC1C,EAAA,EAAI,EAAE,MAAA,EAAO;AAAA,EACb,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,EACnB,gBAAgB,CAAA,CAAE,IAAA,CAAK,CAAC,MAAA,EAAQ,QAAA,EAAU,qBAAqB,CAAC,CAAA;AAAA,EAChE,MAAM,CAAA,CAAE,IAAA,CAAK,CAAC,SAAA,EAAW,cAAc,CAAC,CAAA;AAAA,EACxC,UAAU,CAAA,CAAE,MAAA,CAAO,EAAE,MAAA,EAAQ,EAAE,QAAA;AACjC,CAAC,CAAA;AAMD,MAAM,qBAAA,GAAwB,EAAE,MAAA,CAAO;AAAA,EACrC,EAAA,EAAI,EAAE,MAAA,EAAO;AAAA,EACb,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,EACnB,YAAA,EAAc,EAAE,MAAA,EAAO;AAAA,EACvB,KAAA,EAAO,EAAE,MAAA,CAAO;AAAA,IACd,MAAM,CAAA,CAAE,KAAA;AAAA,MACN,EAAE,MAAA,CAAO;AAAA,QACP,OAAA,EAAS,CAAA,CAAE,MAAA,CAAO,EAAE,eAAe,CAAA,CAAE,MAAA,CAAO,EAAE,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,EAAG,GAAG;AAAA,OACrE;AAAA;AACH,GACD;AACH,CAAC,CAAA;AAMD,MAAM,6BAAA,GAAgC,EAAE,MAAA,CAAO;AAAA,EAC7C,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,EACnB,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,EACjB,oBAAA,EAAsB,EAAE,OAAA,EAAQ;AAAA,EAChC,KAAA,EAAO,EAAE,MAAA,CAAO;AAAA,IACd,MAAM,CAAA,CAAE,KAAA;AAAA,MACN,EAAE,MAAA,CAAO;AAAA,QACP,KAAA,EAAO,EAAE,MAAA,CAAO;AAAA,UACd,EAAA,EAAI,EAAE,MAAA;AAAO,SACd;AAAA,OACF;AAAA;AACH,GACD;AACH,CAAC,CAAA;AAMD,MAAM,6BAAA,GAAgC,EAAE,MAAA,CAAO;AAAA,EAC7C,QAAA,EAAU,EAAE,MAAA;AACd,CAAC,CAAA;AAMD,MAAM,gCAAA,GAAmC,EAAE,MAAA,CAAO;AAAA,EAChD,EAAA,EAAI,EAAE,MAAA,EAAO;AAAA,EACb,QAAA,EAAU,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EAC9B,UAAU,CAAA,CAAE,MAAA,CAAO,EAAE,MAAA,EAAQ,EAAE,QAAA,EAAS;AAAA,EACxC,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,EACjB,QAAA,EAAU,EAAE,MAAA;AACd,CAAC,CAAA;AAMD,MAAM,6BAAA,GAAgC,EAAE,MAAA,CAAO;AAAA,EAC7C,EAAA,EAAI,EAAE,MAAA,EAAO;AAAA,EACb,QAAA,EAAU,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EAC9B,UAAU,CAAA,CAAE,MAAA,CAAO,EAAE,MAAA,EAAQ,EAAE,QAAA,EAAS;AAAA,EACxC,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,EACjB,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,EACnB,kBAAA,EAAoB,EAAE,MAAA,CAAO;AAAA,IAC3B,OAAA,EAAS,EAAE,MAAA;AAAO,GACnB,EAAE,QAAA;AACL,CAAC,CAAA;;AC/GM,MAAM,aAAA,GAAiC,OAAO,OAAA,EAAS,QAAA,EAAU,OAAA,KAAY;AAClF,EAAA,IAAI;AACF,IAAA,MAAM,cAAA,GAAiB,qBAAqB,OAAO,CAAA;AACnD,IAAA,MAAM,EAAE,SAAA,EAAW,IAAA,EAAK,GAAI,MAAM,oBAAoB,cAAc,CAAA;AACpE,IAAA,MAAM,kBAAA,GAAqB,QAAQ,QAAA,CAAS,IAAA;AAC5C,IAAA,QAAQ,SAAA;AAAW,MACjB,KAAK,4BAAA;AACH,QAAA,MAAM,8BAAA,CAA+B,MAAM,kBAAkB,CAAA;AAC7D,QAAA;AAAA,MACF,KAAK,cAAA;AACH,QAAA,MAAM,iBAAA,CAAkB,MAAM,kBAAkB,CAAA;AAChD,QAAA;AAAA,MACF,KAAK,+BAAA;AACH,QAAA,MAAM,iCAAA,CAAkC,MAAM,kBAAkB,CAAA;AAChE,QAAA;AAAA,MACF,KAAK,+BAAA;AACH,QAAA,MAAM,iCAAA,CAAkC,MAAM,kBAAkB,CAAA;AAChE,QAAA;AAAA,MACF,KAAK,0BAAA;AACH,QAAA,MAAM,4BAAA,CAA6B,MAAM,OAAO,CAAA;AAChD,QAAA;AAAA,MACF,KAAK,+BAAA;AACH,QAAA,MAAM,yBAAA,CAA0B,MAAM,OAAO,CAAA;AAC7C,QAAA;AAAA,MACF;AAKE,QAAA,iBAAA,CAAkB,SAAS,CAAA;AAAA;AAE/B,IAAA,OAAO,QAAA,CAAS,IAAA,CAAK,EAAE,QAAA,EAAU,MAAM,CAAA;AAAA,EACzC,SAAS,GAAA,EAAK;AACZ,IAAA,IAAI,eAAe,0BAAA,EAA4B;AAC7C,MAAA,OAAA,CAAQ,KAAA,CAAM,IAAI,OAAO,CAAA;AACzB,MAAA,OAAO,QAAA,CAAS,OAAO,GAAG,CAAA,CAAE,KAAK,EAAE,KAAA,EAAO,GAAA,CAAI,OAAA,EAAS,CAAA;AAAA,IACzD;AAEA,IAAA,OAAA,CAAQ,KAAA,CAAM,kBAAkB,GAAG,CAAA;AACnC,IAAA,IAAI,eAAe,SAAA,EAAW;AAC5B,MAAA,OAAO,QAAA,CAAS,MAAA,CAAO,GAAA,CAAI,UAAU,CAAA,CAAE,KAAK,EAAE,KAAA,EAAO,GAAA,CAAI,OAAA,EAAS,CAAA;AAAA,IACpE,CAAA,MAAO;AACL,MAAA,OAAO,QAAA,CAAS,OAAO,GAAG,CAAA,CAAE,KAAK,EAAE,KAAA,EAAO,yCAAyC,CAAA;AAAA,IACrF;AAAA,EACF;AACF,CAAA;AAEA,SAAS,qBAAqB,OAAA,EAAwC;AACpE,EAAA,IAAI;AACF,IAAA,MAAM,MAAA,GAAS,kBAAkB,uBAAuB,CAAA;AACxD,IAAA,MAAM,GAAA,GAAM,OAAA,CAAQ,OAAA,CAAQ,kBAAkB,CAAA;AAC9C,IAAA,IAAI,CAAC,GAAA,EAAK;AACR,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,uCAAuC,CAAA;AAAA,IAClE;AACA,IAAA,OAAO,OAAO,QAAA,CAAS,cAAA,CAAe,OAAA,CAAQ,IAAA,EAAM,KAAK,MAAM,CAAA;AAAA,EACjE,SAAS,GAAA,EAAK;AACZ,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,yCAAyC,CAAA;AAAA,EACpE;AACF;AAEO,MAAM,wBAAA,GAA+C,CAAC,gBAAA,KAAqB;AAGhF,EAAA,gBAAA,CAAiB,OAAO,cAAc,CAAA;AACtC,EAAA,gBAAA,CAAiB,GAAA,CAAI,eAAe,OAAA,CAAQ,GAAA,CAAI,EAAE,IAAA,EAAM,kBAAA,EAAoB,CAAC,CAAA;AAC7E,EAAA,OAAO,gBAAA;AACT,CAAA;AAMA,eAAe,8BAAA,CACb,SACA,kBAAA,EACA;AACA,EAAA,MAAM,0BAAA,GAA6B,OAAA,CAAQ,IAAA,KAAS,SAAA,IAAa,QAAQ,cAAA,KAAmB,MAAA;AAC5F,EAAA,IAAI,0BAAA,EAA4B;AAE9B,IAAA,IAAI,QAAQ,QAAA,EAAU,IAAA,KAAS,cAAA,IAAkB,OAAA,CAAQ,UAAU,WAAA,EAAa;AAC9E,MAAA,MAAM,2BAA2B,OAAO,CAAA;AAAA,IAC1C,CAAA,MAAO;AAEL,MAAA,MAAM,4BAAA,CAA6B,SAAS,kBAAkB,CAAA;AAAA,IAChE;AAAA,EACF;AACF;AAEA,eAAe,2BAA2B,OAAA,EAA+B;AACvE,EAAA,IAAI;AACF,IAAA,MAAM,WAAA,GAAc,QAAQ,QAAA,EAAU,WAAA;AACtC,IAAA,IAAI,CAAC,WAAA,EAAa;AAChB,MAAA,OAAA,CAAQ,MAAM,uDAAuD,CAAA;AACrE,MAAA;AAAA,IACF;AAGA,IAAA,MAAM,EAAE,yBAAA,EAA0B,GAAI,OAAA,CAAQ,4BAA4B,CAAA;AAG1E,IAAA,MAAM,yBAAA;AAAA,MACJ,OAAA,CAAQ,EAAA;AAAA;AAAA,MACR,WAAA;AAAA,MACA,EAAE,QAAA,EAAU,EAAE,SAAA,EAAW,QAAQ,aAAa,CAAA,CAAE,MAAA,CAAO,SAAA,EAAW,wBAAwB,OAAA,CAAQ,aAAa,CAAA,CAAE,MAAA,CAAO,wBAAuB;AAAE,KACnJ;AAEA,IAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,sCAAA,EAAyC,WAAW,CAAA,CAAE,CAAA;AAAA,EACpE,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,6CAA6C,KAAK,CAAA;AAAA,EAClE;AACF;AAEA,eAAe,4BAAA,CACb,SACA,kBAAA,EACA;AACA,EAAA,MAAM,eAAe,OAAA,CAAQ,QAAA;AAC7B,EAAA,MAAM,SAAA,GAAY,MAAM,+BAAA,CAAgC,OAAA,CAAQ,EAAE,CAAA;AAClE,EAAA,MAAM,eAAA,GAAkB,eAAe,SAAS,CAAA;AAChD,EAAA,MAAM,MAAA,GAAS,mBAAmB,eAAe,CAAA;AACjD,EAAA,MAAM,IAAA,GAAO,aAAa,MAAM,CAAA;AAChC,EAAA,MAAM,EAAE,uBAAsB,GAAI,2BAAA,CAA4B,EAAE,MAAA,EAAQ,UAAA,EAAY,IAAA,CAAK,MAAA,EAAQ,CAAA;AACjG,EAAA,OAAO,8BAAA;AAAA,IACL,EAAE,YAAA,EAAc,qBAAA,EAAuB,QAAA,kBAAU,IAAI,MAAK,EAAE;AAAA,IAC5D;AAAA,GACF;AACF;AAIA,eAAe,iBAAA,CAAkB,SAA0B,kBAAA,EAA0C;AACnG,EAAA,MAAM,sBAAA,CAAuB,SAAS,kBAAkB,CAAA;AAC1D;AAEA,eAAe,sBAAA,CAAuB,SAA0B,kBAAA,EAA0C;AACxG,EAAA,MAAM,eAAe,OAAA,CAAQ,QAAA;AAC7B,EAAA,MAAM,QAAA,GAAW,IAAI,IAAA,CAAK,OAAA,CAAQ,eAAe,GAAI,CAAA;AACrD,EAAA,MAAM,OAAA,GAAU,cAAA,CAAe,OAAA,CAAQ,KAAK,CAAA;AAC5C,EAAA,MAAM,gBAAA,GAAmB,mBAAmB,OAAO,CAAA;AACnD,EAAA,OAAO,8BAAA;AAAA,IACL,EAAE,YAAA,EAAc,QAAA,EAAU,gBAAA,EAAkB,kBAAA,EAAoB,mBAAmB,MAAA,EAAO;AAAA,IAC1F;AAAA,GACF;AACF;AAEA,eAAe,iCAAA,CACb,cACA,kBAAA,EACA;AACA,EAAA,MAAM,eAAe,YAAA,CAAa,QAAA;AAClC,EAAA,IAAI,kBAAA;AACJ,EAAA,MAAM,OAAA,GAAU,cAAA,CAAe,YAAA,CAAa,KAAK,CAAA;AACjD,EAAA,MAAM,gBAAA,GAAmB,mBAAmB,OAAO,CAAA;AAInD,EAAA,IAAI,YAAA,CAAa,MAAA,KAAW,kBAAA,CAAmB,MAAA,EAAQ;AACrD,IAAA,kBAAA,GAAqB,YAAA,CAAa,oBAAA,GAC9B,kBAAA,CAAmB,iBAAA,GACnB,kBAAA,CAAmB,MAAA;AAAA,EACzB,CAAA,MAAA,IAAW,YAAA,CAAa,MAAA,KAAW,kBAAA,CAAmB,OAAA,EAAS;AAC7D,IAAA,kBAAA,GAAqB,kBAAA,CAAmB,OAAA;AAAA,EAC1C;AACA,EAAA,IAAI,kBAAA,EAAoB;AACtB,IAAA,MAAM,OAAO,MAAM,8BAAA;AAAA,MACjB,EAAE,YAAA,EAAc,gBAAA,EAAkB,kBAAA,EAAmB;AAAA,MACrD;AAAA,KACF;AACA,IAAA,IAAI,aAAa,oBAAA,EAAsB;AACrC,MAAA,IAAI,KAAK,KAAA,EAAO;AACd,QAAA,MAAM,YAAY,IAAA,CAAK;AAAA,UACrB,IAAI,IAAA,CAAK,KAAA;AAAA,UACT,OAAA,EAAS,0BAAA;AAAA,UACT,IAAA,EAAM,iDAAA;AAAA,UACN,IAAA,EAAM;AAAA,SACP,CAAA;AAAA,MACH;AAAA,IACF;AACA,IAAA,OAAO,IAAA;AAAA,EACT;AACF;AAEA,eAAe,iCAAA,CACb,cACA,kBAAA,EACA;AACA,EAAA,MAAM,eAAe,YAAA,CAAa,QAAA;AAClC,EAAA,OAAO,8BAAA;AAAA,IACL,EAAE,YAAA,EAAc,kBAAA,EAAoB,kBAAA,CAAmB,OAAA,EAAQ;AAAA,IAC/D;AAAA,GACF;AACF;AAGA,SAAS,eACP,KAAA,EACQ;AACR,EAAA,IAAI,KAAA,CAAM,IAAA,CAAK,MAAA,KAAW,CAAA,EAAG;AAC3B,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,iCAAiC,CAAA;AAAA,EAC5D;AACA,EAAA,IAAI,KAAA,CAAM,IAAA,CAAK,MAAA,GAAS,CAAA,EAAG;AACzB,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,2CAA2C,CAAA;AAAA,EACtE;AACA,EAAA,MAAM,IAAA,GAAO,KAAA,CAAM,IAAA,CAAK,CAAC,CAAA;AAGzB,EAAA,IAAI,OAAA,IAAW,IAAA,IAAQ,IAAA,CAAK,KAAA,EAAO,EAAA,EAAI;AACrC,IAAA,OAAO,KAAK,KAAA,CAAM,EAAA;AAAA,EACpB;AAGA,EAAA,IAAI,aAAa,IAAA,EAAM;AACrB,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,OAAA,EAAS,aAAA,EAAe,KAAA;AAC7C,IAAA,IAAI,OAAA,EAAS;AACX,MAAA,OAAO,OAAA;AAAA,IACT;AAAA,EACF;AACA,EAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,sCAAsC,CAAA;AACjE;AAEA,eAAe,gCAAgC,SAAA,EAAmB;AAChE,EAAA,MAAM,EAAE,YAAW,GAAI,MAAM,OAAO,QAAA,CAAS,QAAA,CAAS,SAAS,SAAA,EAAW;AAAA,IACxE,MAAA,EAAQ,CAAC,YAAY;AAAA,GACtB,CAAA;AACD,EAAA,IAAI,CAAC,UAAA,EAAY;AACf,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,yCAAyC,CAAA;AAAA,EACpE;AACA,EAAA,OAAO,UAAA;AACT;AAEA,SAAS,mBAAmB,OAAA,EAAgC;AAC1D,EAAA,MAAM,MAAA,GAAS,MAAA,CAAO,MAAA,CAAO,aAAa,CAAA,CAAE,IAAA;AAAA,IAC1C,CAACC,OAAAA,KAAW,YAAA,CAAaA,OAAM,CAAA,CAAE,2BAA0B,KAAM;AAAA,GACnE;AACA,EAAA,IAAI,CAAC,MAAA,EAAQ;AACX,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,6BAAA,EAAgC,OAAO,CAAA,CAAE,CAAA;AAAA,EAC3D;AACA,EAAA,OAAO,MAAA;AACT;AAEA,SAAS,2BAAA,CAA4B;AAAA,EACnC,MAAA;AAAA,EACA;AACF,CAAA,EAME;AACA,EAAA,QAAQ,WAAW,IAAA;AAAM,IACvB,KAAK,cAAA;AACH,MAAA,OAAO,EAAE,gBAAA,EAAkB,MAAA,EAAQ,qBAAA,EAAuB,MAAA,EAAU;AAAA,IACtE,KAAK,SAAA;AACH,MAAA,OAAO,EAAE,gBAAA,EAAkB,MAAA,EAAW,qBAAA,EAAuB,WAAW,MAAA,EAAO;AAAA,IACjF;AACE,MAAA,iBAAA,CAA4B,CAAA;AAAA;AAElC;AAGA,eAAe,4BAAA,CACb,eACA,OAAA,EACA;AAEA,EAAA,IAAI,aAAA,CAAc,QAAA,EAAU,IAAA,KAAS,cAAA,EAAgB;AACnD,IAAA,MAAM,WAAA,GAAc,cAAc,QAAA,CAAS,WAAA;AAC3C,IAAA,IAAI,WAAA,EAAa;AAEf,MAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,SAAA,CAAU,MAAA,CAAO;AAAA,QACtC,KAAA,EAAO,EAAE,eAAA,EAAiB,aAAA,CAAc,EAAA,EAAG;AAAA,QAC3C,IAAA,EAAM;AAAA,UACJ,aAAA,EAAe,MAAA;AAAA,UACf,MAAA,EAAQ;AAAA;AACV,OACD,CAAA;AAGD,MAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,sBAAA,CAAuB,MAAA,CAAO;AAAA,QACnD,IAAA,EAAM;AAAA,UACJ,WAAA;AAAA,UACA,MAAA,EAAQ,MAAA;AAAA,UACR,cAAA,EAAgB,iBAAA;AAAA,UAChB,WAAA,EAAa,+BAAA;AAAA,UACb,MAAA,EAAQ;AAAA;AACV,OACD,CAAA;AAED,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,0CAAA,EAA6C,aAAA,CAAc,EAAE,CAAA,CAAE,CAAA;AAAA,IAC7E;AAAA,EACF;AACF;AAGA,eAAe,yBAAA,CACb,eACA,OAAA,EACA;AAEA,EAAA,IAAI,aAAA,CAAc,QAAA,EAAU,IAAA,KAAS,cAAA,EAAgB;AACnD,IAAA,MAAM,WAAA,GAAc,cAAc,QAAA,CAAS,WAAA;AAC3C,IAAA,IAAI,WAAA,EAAa;AAEf,MAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,SAAA,CAAU,MAAA,CAAO;AAAA,QACtC,KAAA,EAAO,EAAE,eAAA,EAAiB,aAAA,CAAc,EAAA,EAAG;AAAA,QAC3C,IAAA,EAAM;AAAA,UACJ,aAAA,EAAe,QAAA;AAAA,UACf,MAAA,EAAQ;AAAA;AACV,OACD,CAAA;AAGD,MAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,sBAAA,CAAuB,MAAA,CAAO;AAAA,QACnD,IAAA,EAAM;AAAA,UACJ,WAAA;AAAA,UACA,MAAA,EAAQ,QAAA;AAAA,UACR,cAAA,EAAgB,iBAAA;AAAA,UAChB,WAAA,EAAa,CAAA,gBAAA,EAAmB,aAAA,CAAc,kBAAA,EAAoB,WAAW,eAAe,CAAA,CAAA;AAAA,UAC5F,MAAA,EAAQ;AAAA;AACV,OACD,CAAA;AAED,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,uCAAA,EAA0C,aAAA,CAAc,EAAE,CAAA,CAAE,CAAA;AAAA,IAC1E;AAAA,EACF;AACF;;ACpVO,MAAM,sBAAA,GAA2C;AAAA,EACtD,EAAA,EAAI,QAAA;AAAA,EACJ,uBAAuB,OAAO,EAAE,QAAQ,SAAA,EAAW,WAAA,EAAa,oBAAmB,KAAiC;AAClH,IAAA,MAAM,QAAA,GAAW,MAAM,mBAAA,CAAoB,SAAS,CAAA;AACpD,IAAA,MAAM,aAAA,GAAgB,MAAM,2BAAA,CAA4B;AAAA,MACtD,OAAA,EAAS,YAAY,yBAAA,EAA0B;AAAA,MAC/C,YAAY,QAAA,CAAS,EAAA;AAAA,MACrB,IAAA,EAAM,6BAAA,CAA8B,WAAA,CAAY,MAAM;AAAA,KACvD,CAAA;AACD,IAAA,MAAM,mBAAmB,MAAA,CAAO;AAAA,MAC9B,KAAA,EAAO;AAAA,QACL,EAAA,EAAI;AAAA,OACN;AAAA,MACA,IAAA,EAAM;AAAA,QACJ,wBAAwB,QAAA,CAAS;AAAA;AACnC,KACD,CAAA;AACD,IAAA,IAAI,CAAC,aAAA,CAAc,GAAA,EAAK,MAAM,IAAI,MAAM,wCAAwC,CAAA;AAChF,IAAA,MAAM,OAAA,GAAU;AAAA,MACd,KAAK,aAAA,CAAc,GAAA;AAAA,MACnB,IAAI,aAAA,CAAc;AAAA,KACpB;AACA,IAAA,OAAO,EAAE,OAAA,EAAQ;AAAA,EACnB,CAAA;AAAA,EACA,sBAAA,EAAwB,OAAO,KAAA,KAC7B,iBAAA,CAAkB,4BAA4B,CAAA;AAAA,EAChD,OAAA,EAAS,aAAA;AAAA,EACT,yBAAA,EAA2B;AAC7B,CAAA;AAEA,SAAS,8BAA8B,UAAA,EAA2C;AAChF,EAAA,MAAM,YAAA,GAA8D;AAAA,IAClE,YAAA,EAAc,cAAA;AAAA,IACd,OAAA,EAAS;AAAA,GACX;AACA,EAAA,OAAO,YAAA,CAAa,WAAW,IAAI,CAAA;AACrC;;ACbO,MAAM,gBAAA,GAAqC,sBAAA;;ACHlD,MAAM,6BAAA,GAAgC,CAAA,CAAE,UAAA,CAAW,aAAa,CAAA;AAIzD,MAAMC,yBAAA,GAGT,OAAO,gBAAA,EAAkB,OAAA,KAAY;AACvC,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gEAAgE,CAAA;AAAA,EAC3F;AAEA,EAAA,MAAM,aAAA,GAAgB,gCAAA,CAAiC,6BAAA,EAA+B,gBAAgB,CAAA;AACtG,EAAA,MAAM,MAAA,GAAS,QAAQ,IAAA,CAAK,EAAA;AAC5B,EAAA,MAAM,SAAA,GAAY,QAAQ,IAAA,CAAK,KAAA;AAC/B,EAAA,IAAI,CAAC,SAAA,EAAW;AAEd,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,wCAAwC,CAAA;AAAA,EACnE;AAEA,EAAA,MAAM,WAAA,GAAc,aAAa,aAAa,CAAA;AAC9C,EAAA,MAAM,EAAE,OAAA,EAAQ,GAAI,MAAM,iBAAiB,qBAAA,CAAsB;AAAA,IAC/D,MAAA;AAAA,IACA,SAAA;AAAA,IACA,WAAA;AAAA,IACA,kBAAA,EAAoB,QAAQ,QAAA,CAAS;AAAA,GACtC,CAAA;AAED,EAAA,OAAO;AAAA,IACL,YAAY,OAAA,CAAQ,GAAA;AAAA,IACpB,WAAW,OAAA,CAAQ;AAAA,GACrB;AACF,CAAA;AAEO,MAAMC,sBAAA,GAAkE,OAAO,KAAA,EAAO,OAAA,KAAY;AACvG,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gEAAgE,CAAA;AAAA,EAC3F;AAEA,EAAA,OAAO,iBAAiB,sBAAA,CAAuB;AAAA,IAC7C,MAAA,EAAQ,QAAQ,IAAA,CAAK,EAAA;AAAA,IACrB,kBAAA,EAAoB,QAAQ,QAAA,CAAS;AAAA,GACtC,CAAA;AACH,CAAA;;AClEA,wCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQD,0BAAgC,IAAA,EAAM;AAAA,IAC5C,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMd,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACTA,8BAAe,aAAac,yBAAuB,CAAA;;ACD5C,MAAM,mBAAA,GAAsB,KAAK,IAAA,GAAO,IAAA;AACxC,MAAM,kBAAA,GAAqB;AAAA,EAChC;AACF,CAAA;;ACEA,MAAM,QAAA,GAAW,IAAI,QAAA,CAAS;AAAA,EAC5B,MAAA,EAAQ,QAAQ,GAAA,CAAI,aAAA;AAAA,EACpB,WAAA,EAAa;AAAA,IACX,WAAA,EAAa,QAAQ,GAAA,CAAI,qBAAA;AAAA,IACzB,eAAA,EAAiB,QAAQ,GAAA,CAAI;AAAA;AAEjC,CAAC,CAAA;AAQM,MAAM,+BAA+B,OAAO,EAAE,QAAA,EAAU,QAAA,EAAU,QAAO,KAAgB;AAC9F,EAAA,MAAM,GAAA,GAAM,QAAA,CAAS,QAAA,EAAU,MAAM,CAAA;AAErC,EAAA,MAAM,EAAE,KAAK,WAAA,EAAa,MAAA,EAAQ,gBAAe,GAAI,MAAM,oBAAoB,QAAA,EAAU;AAAA,IACvF,MAAA,EAAQ,QAAQ,GAAA,CAAI,mBAAA;AAAA,IACpB,GAAA,EAAK,GAAA;AAAA,IACL,YAAY,CAAC,CAAC,sBAAA,EAAwB,CAAA,EAAG,mBAAmB,CAAC,CAAA;AAAA,IAC7D,MAAA,EAAQ;AAAA,MACN,cAAA,EAAgB;AAAA,KAClB;AAAA,IACA,OAAA,EAAS;AAAA,GACV,CAAA;AAED,EAAA,OAAO,EAAE,WAAA,EAAa,GAAA,EAAK,cAAA,EAAe;AAC5C,CAAA;AAEO,MAAM,8BAAA,GAAiC,OAAO,EAAE,GAAA,EAAI,KAAuB;AAChF,EAAA,MAAM,OAAA,GAAU,IAAI,gBAAA,CAAiB;AAAA,IACnC,MAAA,EAAQ,QAAQ,GAAA,CAAI,mBAAA;AAAA,IACpB,GAAA,EAAK;AAAA,GACN,CAAA;AACD,EAAA,OAAO,MAAM,YAAA,CAAa,QAAA,EAAU,SAAS,EAAE,SAAA,EAAW,MAAM,CAAA;AAClE,CAAA;AAEO,MAAM,gBAAA,GAAmB,OAAO,EAAE,GAAA,EAAI,KAAuB;AAClE,EAAA,MAAM,OAAA,GAAU,IAAI,mBAAA,CAAoB;AAAA,IACtC,MAAA,EAAQ,QAAQ,GAAA,CAAI,mBAAA;AAAA,IACpB,GAAA,EAAK;AAAA,GACN,CAAA;AACD,EAAA,OAAO,MAAM,QAAA,CAAS,IAAA,CAAK,OAAO,CAAA;AACpC,CAAA;AAEA,SAAS,QAAA,CAAS,UAAkB,MAAA,EAAgB;AAClD,EAAA,MAAM,MAAM,IAAA,CAAK,OAAA,CAAQ,QAAQ,CAAA,CAAE,MAAM,CAAC,CAAA;AAC1C,EAAA,OAAO,GAAG,MAAM,CAAA,CAAA,EAAI,UAAA,EAAY,IAAI,GAAG,CAAA,CAAA;AACzC;;ACDO,MAAM,4BAAA,GAA+B,OAAO,MAAA,KAAyC;AAC1F,EAAA,IAAI;AACF,IAAA,MAAM,MAAA,GAAS,MAAM,WAAA,CAAY,IAAA,CAAK,MAAM,CAAA;AAG5C,IAAA,MAAM,SAAA,GAAY,OAAO,YAAA,EAAa;AAGtC,IAAA,MAAM,SAAA,GAAY,MAAA,CAAO,OAAA,CAAQ,CAAC,CAAA;AAClC,IAAA,MAAM,EAAE,KAAA,EAAO,MAAA,EAAO,GAAI,UAAU,OAAA,EAAQ;AAG5C,IAAA,MAAM,KAAA,GAAQ,OAAO,QAAA,EAAS;AAC9B,IAAA,MAAM,MAAA,GAAS,OAAO,SAAA,EAAU;AAChC,IAAA,MAAM,OAAA,GAAU,OAAO,UAAA,EAAW;AAClC,IAAA,MAAM,OAAA,GAAU,OAAO,UAAA,EAAW;AAClC,IAAA,MAAM,QAAA,GAAW,OAAO,WAAA,EAAY;AACpC,IAAA,MAAM,YAAA,GAAe,OAAO,eAAA,EAAgB;AAC5C,IAAA,MAAM,gBAAA,GAAmB,OAAO,mBAAA,EAAoB;AAEpD,IAAA,OAAO;AAAA,MACL,SAAA;AAAA,MACA,UAAA,EAAY;AAAA,QACV,KAAA;AAAA,QACA;AAAA,OACF;AAAA,MACA,QAAA,EAAU;AAAA,QACR,OAAO,KAAA,IAAS,KAAA,CAAA;AAAA,QAChB,QAAQ,MAAA,IAAU,KAAA,CAAA;AAAA,QAClB,SAAS,OAAA,IAAW,KAAA,CAAA;AAAA,QACpB,SAAS,OAAA,IAAW,KAAA,CAAA;AAAA,QACpB,UAAU,QAAA,IAAY,KAAA,CAAA;AAAA,QACtB,cAAc,YAAA,IAAgB,KAAA,CAAA;AAAA,QAC9B,kBAAkB,gBAAA,IAAoB,KAAA;AAAA;AACxC,KACF;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,MAAM,IAAI,MAAM,CAAA,gCAAA,EAAmC,KAAA,YAAiB,QAAQ,KAAA,CAAM,OAAA,GAAU,eAAe,CAAA,CAAE,CAAA;AAAA,EAC/G;AACF,CAAA;AAEO,MAAM,WAAA,GAAc,CAAC,MAAA,KAA4B;AAEtD,EAAA,MAAM,SAAA,GAAY,MAAA,CAAO,QAAA,CAAS,CAAA,EAAG,CAAC,CAAA;AACtC,EAAA,OAAO,SAAA,CAAU,UAAS,KAAM,MAAA;AAClC,CAAA;;AClGA,MAAM,OAAO,YAAA,EAAa;AAC1B,SAAS,YAAA,GAAe;AACpB,EAAA,IAAI,gBAAA,GAAmB;AAAA,IACnB,kBAAkBhB,QAAA,CAAO;AAAA,GAC7B;AAEA,EAAA,IAAI,IAAI,mBAAA,EAAqB;AACzB,IAAA,IAAI;AACA,MAAA,gBAAA,GAAmB,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,mBAAmB,CAAA;AAAA,IACzD,CAAA,CAAA,MACM;AACF,MAAA,OAAA,CAAQ,MAAM,4EAA4E,CAAA;AAAA,IAC9F;AAAA,EACJ;AACA,EAAA,OAAO,IAAI,OAAO,gBAAgB,CAAA;AACtC;AACA,IAAI,oBAAA;AACJ,IAAI,mBAAA;AAGG,MAAM,aAAA,GAAgB,IAAI,OAAA,CAAQ,CAAC,SAAS,MAAA,KAAW;AAC1D,EAAA,oBAAA,GAAuB,OAAA;AACvB,EAAA,mBAAA,GAAsB,MAAA;AAC1B,CAAC,CAAA;AACD,IAAI,YAAA;AAAA,CACH,SAAUkB,aAAAA,EAAc;AACrB,EAAAA,aAAAA,CAAa,WAAW,CAAA,GAAI,WAAA;AAC5B,EAAAA,aAAAA,CAAa,UAAU,CAAA,GAAI,UAAA;AAC3B,EAAAA,aAAAA,CAAa,SAAS,CAAA,GAAI,SAAA;AAC1B,EAAAA,aAAAA,CAAa,OAAO,CAAA,GAAI,OAAA;AAC5B,CAAA,EAAG,YAAA,KAAiB,YAAA,GAAe,EAAC,CAAE,CAAA;AACtC,IAAI,eAAe,YAAA,CAAa,SAAA;AAWhC,eAAsB,WAAA,GAAc;AAEhC,EAAA,IAAI,YAAA,KAAiB,aAAa,SAAA,EAAW;AACzC,IAAA;AAAA,EACJ;AACA,EAAA,YAAA,GAAe,YAAA,CAAa,QAAA;AAC5B,EAAA,OAAA,CAAQ,IAAI,qBAAqB,CAAA;AACjC,EAAA,IAAA,CAAK,GAAG,OAAA,EAAS,CAAC,UAAU,OAAA,CAAQ,KAAA,CAAM,KAAK,CAAC,CAAA;AAChD,EAAA,IAAI;AACA,IAAA,MAAM,KAAK,KAAA,EAAM;AAAA,EACrB,SACO,KAAA,EAAO;AACV,IAAA,OAAA,CAAQ,MAAM,0BAA0B,CAAA;AACxC,IAAA,OAAA,CAAQ,MAAM,KAAK,CAAA;AACnB,IAAA,YAAA,GAAe,YAAA,CAAa,KAAA;AAC5B,IAAA,mBAAA,CAAoB,IAAI,CAAA;AACxB,IAAA;AAAA,EACJ;AACA,EAAA,oBAAA,CAAqB,IAAI,CAAA;AACzB,EAAA,OAAA,CAAQ,IAAI,kBAAkB,CAAA;AAC9B,EAAA,YAAA,GAAe,YAAA,CAAa,OAAA;AAChC;;AC5DO,MAAM,GAAA,CAAI;AAAA,EACb,OAAA;AAAA,EACA,YAAA;AAAA,EACA,WAAA,CAAY,SAAS,YAAA,EAAc;AAC/B,IAAA,IAAA,CAAK,OAAA,GAAU,OAAA;AACf,IAAA,IAAA,CAAK,YAAA,GAAe,YAAA;AAAA,EACxB;AACJ;AAKO,MAAM,YAAA,CAAa;AAAA,EACtB,GAAA;AAAA,EACA,KAAA;AAAA,EACA,WAAA,CAAY,KAAK,KAAA,EAAO;AACpB,IAAA,IAAA,CAAK,GAAA,GAAM,GAAA;AACX,IAAA,IAAA,CAAK,KAAA,GAAQ,KAAA;AAAA,EACjB;AACJ;;ACtBO,MAAM,qBAAA,GAAwB,OAAO,QAAQ,CAAA;AAM7C,SAAS,oBAAoB,EAAE,OAAA,EAAS,iBAAA,EAAmB,WAAA,EAAa,UAAU,EAAG;AACxF,EAAA,OAAO,IAAI,SAAA,CAAU,OAAA,EAAS,iBAAA,EAAmB,UAAU,WAAW,CAAA;AAC1E;AAOO,SAAS,WAAA,CAAY,EAAE,GAAA,EAAK,KAAA,EAAM,EAAG;AASxC,EAAA,aAAA,CAAc,IAAA,CAAK,OAAO,IAAA,KAAS;AAG/B,IAAA,MAAM,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,OAAO,CAAA;AAG9B,IAAA,MAAM,IAAA,CAAK,KAAK,GAAA,CAAI,OAAA,EAAS,sBAAsB,KAAA,EAAO,GAAA,CAAI,QAAQ,CAAC,CAAA;AAIvE,IAAA,IAAI,IAAI,WAAA,EAAa;AACjB,MAAA,MAAM,OAAA,GAAU;AAAA,QACZ,GAAG,GAAA,CAAI,iBAAA;AAAA,QACP,GAAG,IAAI,WAAA,CAAY;AAAA,OACvB;AACA,MAAA,MAAM,IAAA,CAAK,QAAA,CAAS,GAAA,CAAI,OAAA,EAAS,GAAA,CAAI,YAAY,IAAA,EAAM,GAAA,CAAI,WAAA,CAAY,IAAA,EAAM,OAAO,CAAA;AAAA,IACxF;AAAA,EACJ,CAAC,CAAA;AACL;AAMO,MAAM,kBAAkB,GAAA,CAAI;AAAA,EAC/B,iBAAA;AAAA,EACA,UAAA;AAAA,EACA,QAAA;AAAA,EACA,WAAA;AAAA,EACA,WAAA,CAAY,OAAA,EAAS,iBAAA,EAAmB,QAAA,EAAU,aAAa,UAAA,EAAY;AACvE,IAAA,KAAA,CAAM,SAAS,qBAAqB,CAAA;AACpC,IAAA,IAAA,CAAK,iBAAA,GAAoB,iBAAA;AACzB,IAAA,IAAA,CAAK,QAAA,GAAW,QAAA;AAChB,IAAA,IAAA,CAAK,WAAA,GAAc,WAAA;AACnB,IAAA,IAAA,CAAK,UAAA,GAAa,UAAA;AAAA,EACtB;AAAA,EACA,MAAM,UAAA,EAAY;AACd,IAAA,OAAO,IAAI,SAAA,CAAU,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,mBAAmB,IAAA,CAAK,QAAA,EAAU,IAAA,CAAK,WAAA,EAAa,UAAU,CAAA;AAAA,EAC1G;AAAA,EACA,MAAM,MAAA,CAAO,OAAA,EAAS,UAAA,GAAa,EAAC,EAAG;AACnC,IAAA,MAAM,OAAO,MAAM,aAAA;AACnB,IAAA,MAAM,QAAQ,MAAM,IAAA,CAAK,IAAA,CAAK,IAAA,CAAK,SAAS,OAAA,EAAS;AAAA,MACjD,GAAG,IAAA,CAAK,iBAAA;AAAA,MACR,GAAI,IAAA,CAAK,UAAA,IAAc,EAAE,UAAA,EAAY,KAAK,UAAA,EAAW;AAAA,MACrD,GAAG;AAAA,KACN,CAAA;AACD,IAAA,OAAO,IAAI,kBAAA,CAAmB,IAAA,EAAM,IAAA,EAAM,KAAK,CAAA;AAAA,EACnD;AACJ;AAIA,MAAM,2BAA2B,YAAA,CAAa;AAAA,EAC1C,MAAA;AAAA,EACA,WAAA,CAAY,IAAA,EAAM,GAAA,EAAK,KAAA,EAAO;AAC1B,IAAA,KAAA,CAAM,KAAK,KAAK,CAAA;AAChB,IAAA,IAAA,CAAK,MAAA,GAAS;AAAA,MACV,MAAA,EAAQ,MAAM,IAAA,CAAK,MAAA,CAAO,KAAK,CAAA;AAAA,MAC/B,MAAA,EAAQ,MAAM,IAAA,CAAK,MAAA,CAAO,KAAK,CAAA;AAAA;AAAA,MAE/B,OAAA,EAAS,MAAM,IAAA,CAAK,UAAA,CAAW,KAAK;AAAA,KACxC;AAAA,EACJ;AACJ;AAKA,SAAS,qBAAA,CAET,OAEA,QAAA,EAAU;AACN,EAAA,OAAO,CAAC,IAAA,KAAS;AACb,IAAA,MAAM,OAAA,GAAU,EAAE,QAAA,EAAS;AAC3B,IAAA,OAAO,KAAA,CAAM,IAAA,CAAK,IAAA,EAAM,OAAO,CAAA;AAAA,EACnC,CAAA;AACJ;;ACrGA,MAAMC,UAAA,GAAW;AAAA,EACb,MAAMjB,QAAA,CAAO;AACjB,CAAA;AACA,MAAMkB,aAAA,GAAc,IAAA;AAEb,MAAMC,uBAAqB,mBAAA,CAAoB;AAAA,EAClD,OAAA,EAAS,oBAAA;AAAA,EACT,mBAAmB,EAAC;AAAA,eACpBD,aAAA;AAAA,YACAD;AACJ,CAAC,CAAA;;ACVD,MAAM,QAAA,GAAW;AAAA,EACb,MAAMjB,QAAA,CAAO,IAAA;AAAA,EACb,YAAYA,QAAA,CAAO,UAAA;AAAA,EACnB,MAAMA,QAAA,CAAO,IAAA;AAAA,EACb,gBAAgBA,QAAA,CAAO;AAC3B,CAAA;AACA,MAAM,WAAA,GAAc;AAAA,EAChB,IAAA,EAAM,WAAA;AAAA,EACN,SAAS;AACb,CAAA;AAEO,MAAM,gBAAgB,mBAAA,CAAoB;AAAA,EAC7C,OAAA,EAAS,eAAA;AAAA,EACT,mBAAmB,EAAC;AAAA,EACpB,WAAA;AAAA,EACA;AACJ,CAAC,CAAA;;ACFD,MAAM,qBAAA,GAAwB,EAAE,MAAA,CAAO;AAAA,EACrC,QAAA,EAAU,CAAA,CAAE,IAAA,CAAK,kBAAkB,CAAA;AAAA,EACnC,QAAA,EAAU,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA;AACvB,CAAC,CAAA;AAIM,MAAMoB,YAAA,GAMT,OAAO,OAAA,EAAS,OAAA,KAAY;AAC9B,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AAEA,EAAA,MAAM,EAAE,QAAA,EAAU,QAAA,EAAS,GAAI,gCAAA,CAAiC,uBAAuB,OAAO,CAAA;AAE9F,EAAA,MAAM,EAAE,WAAA,EAAa,cAAA,EAAgB,GAAA,EAAI,GAAI,MAAM,4BAAA,CAA6B;AAAA,IAC9E,QAAA;AAAA,IACA,QAAA;AAAA,IACA,MAAA,EAAQ,QAAQ,IAAA,CAAK;AAAA,GACtB,CAAA;AAED,EAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,QAAA,CAAS,KAAK,MAAA,CAAO;AAAA,IAC9C,IAAA,EAAM;AAAA,MACJ,IAAA,EAAM,QAAA;AAAA,MACN,GAAA;AAAA,MACA,SAAA,EAAW,WAAA;AAAA,MACX,IAAA,EAAM,QAAA;AAAA,MACN,IAAA,EAAM,EAAE,OAAA,EAAS,EAAE,IAAI,OAAA,CAAQ,IAAA,CAAK,IAAG;AAAE;AAC3C,GACD,CAAA;AAGD,EAAA,IAAI,aAAa,iBAAA,EAAmB;AAElC,IAAA,MAAMC,qBAAsB,MAAA,CAAO,EAAE,MAAA,EAAQ,IAAA,CAAK,IAAI,CAAA;AAAA,EACxD;AAEA,EAAA,OAAO;AAAA,IACL,WAAA;AAAA,IACA;AAAA,GACF;AACF,CAAA;AAEO,MAAMC,mBAAA,GAAqD,OAAO,KAAA,EAAO,OAAA,KAAY;AAC1F,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AACA,EAAA,OAAO,OAAA,CAAQ,QAAA,CAAS,IAAA,CAAK,QAAA,CAAS;AAAA,IACpC,KAAA,EAAO;AAAA,MACL,IAAA,EAAM;AAAA,QACJ,EAAA,EAAI,QAAQ,IAAA,CAAK;AAAA;AACnB,KACF;AAAA,IACA,OAAA,EAAS;AAAA,MACP,SAAA,EAAW;AAAA;AACb,GACD,CAAA;AACH,CAAA;AAEA,MAAM,mCAAA,GAAsC,CAAA,CAAE,MAAA,CAAO,EAAE,GAAA,EAAK,EAAE,MAAA,EAAO,CAAE,QAAA,EAAS,EAAG,CAAA;AAI5E,MAAMC,0BAAA,GAGT,OAAO,OAAA,EAAS,QAAA,KAAa;AAC/B,EAAA,MAAM,EAAE,GAAA,EAAI,GAAI,gCAAA,CAAiC,qCAAqC,OAAO,CAAA;AAC7F,EAAA,OAAO,MAAM,8BAAA,CAA+B,EAAE,GAAA,EAAK,CAAA;AACrD,CAAA;AAEA,MAAM,qBAAA,GAAwB,EAAE,MAAA,CAAO;AAAA,EACrC,MAAA,EAAQ,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA;AACrB,CAAC,CAAA;AAIM,MAAMC,YAAA,GAGT,OAAO,OAAA,EAAS,OAAA,KAAY;AAC9B,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AAEA,EAAA,MAAM,EAAE,MAAA,EAAO,GAAI,gCAAA,CAAiC,uBAAuB,OAAO,CAAA;AAElF,EAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,QAAA,CAAS,KAAK,MAAA,CAAO;AAAA,IAC9C,KAAA,EAAO;AAAA,MACL,EAAA,EAAI,MAAA;AAAA,MACJ,IAAA,EAAM;AAAA,QACJ,EAAA,EAAI,QAAQ,IAAA,CAAK;AAAA;AACnB;AACF,GACD,CAAA;AAGD,EAAA,IAAI;AACF,IAAA,MAAM,gBAAA,CAAiB,EAAE,GAAA,EAAK,IAAA,CAAK,KAAK,CAAA;AAAA,EAC1C,SAAS,KAAA,EAAO;AAGd,IAAA,IAAI,OAAA,CAAQ,GAAA,CAAI,QAAA,KAAa,aAAA,EAAe;AAC1C,MAAA,OAAA,CAAQ,KAAA,CAAM,kCAAkC,KAAK,CAAA;AAAA,IACvD;AAAA,EACF;AAEA,EAAA,OAAO,IAAA;AACT,CAAA;AAIO,MAAM,kBAAA,GAAqB,OAAO,IAAA,EAA0B,OAAA,KAAiB;AAClF,EAAA,MAAM,EAAE,QAAO,GAAI,IAAA;AACnB,EAAA,IAAI;AAEF,IAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,QAAA,CAAS,KAAK,SAAA,CAAU;AAAA,MACjD,KAAA,EAAO;AAAA,QACL,EAAA,EAAI,MAAA;AAAA,QACJ,IAAA,EAAM;AAAA;AACR,KACD,CAAA;AAED,IAAA,IAAI,CAAC,IAAA,EAAM;AACT,MAAA;AAAA,IACF;AAGA,IAAA,IAAI,IAAA,CAAK,gBAAA,KAAqB,OAAA,IAAW,IAAA,CAAK,WAAA,EAAa;AACzD,MAAA;AAAA,IACF;AAGA,IAAA,IAAI,IAAA,CAAK,qBAAqB,YAAA,EAAc;AAC1C,MAAA;AAAA,IACF;AAGA,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,IAAA,CAAK,MAAA,CAAO;AAAA,MACjC,KAAA,EAAO,EAAE,EAAA,EAAI,MAAA,EAAO;AAAA,MACpB,IAAA,EAAM,EAAE,gBAAA,EAAkB,YAAA;AAAa,KACxC,CAAA;AAGD,IAAA,MAAM,QAAA,GAAW,IAAI,QAAA,CAAS;AAAA,MAC5B,MAAA,EAAQ,QAAQ,GAAA,CAAI,aAAA;AAAA,MACpB,WAAA,EAAa;AAAA,QACX,WAAA,EAAa,QAAQ,GAAA,CAAI,qBAAA;AAAA,QACzB,eAAA,EAAiB,QAAQ,GAAA,CAAI;AAAA;AAC/B,KACD,CAAA;AAED,IAAA,MAAM,gBAAA,GAAmB,IAAI,gBAAA,CAAiB;AAAA,MAC5C,MAAA,EAAQ,QAAQ,GAAA,CAAI,mBAAA;AAAA,MACpB,KAAK,IAAA,CAAK;AAAA,KACX,CAAA;AAED,IAAA,MAAM,QAAA,GAAW,MAAM,QAAA,CAAS,IAAA,CAAK,gBAAgB,CAAA;AACrD,IAAA,MAAM,YAAY,MAAA,CAAO,IAAA,CAAK,MAAM,QAAA,CAAS,IAAA,CAAM,sBAAsB,CAAA;AAGzE,IAAA,IAAI,CAAC,WAAA,CAAY,SAAS,CAAA,EAAG;AAC3B,MAAA,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAAA,IAC3C;AAGA,IAAA,MAAM,QAAA,GAAW,MAAM,4BAAA,CAA6B,SAAS,CAAA;AAG7D,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,IAAA,CAAK,MAAA,CAAO;AAAA,MACjC,KAAA,EAAO,EAAE,EAAA,EAAI,MAAA,EAAO;AAAA,MACpB,IAAA,EAAM;AAAA,QACJ,WAAW,QAAA,CAAS,SAAA;AAAA,QACpB,WAAA,EAAa,QAAA;AAAA,QACb,gBAAA,EAAkB,OAAA;AAAA,QAClB,eAAA,sBAAqB,IAAA;AAAK;AAC5B,KACD,CAAA;AAAA,EAGH,SAAS,KAAA,EAAO;AAEd,IAAA,IAAI,OAAA,CAAQ,GAAA,CAAI,QAAA,KAAa,aAAA,EAAe;AAC1C,MAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,uCAAA,EAA0C,MAAM,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAAA,IAC1E;AAGA,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,IAAA,CAAK,MAAA,CAAO;AAAA,MACjC,KAAA,EAAO,EAAE,EAAA,EAAI,MAAA,EAAO;AAAA,MACpB,IAAA,EAAM;AAAA,QACJ,gBAAA,EAAkB,SAAA;AAAA,QAClB,eAAA,EAAiB,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA;AAC5D,KACD,CAAA;AAAA,EACH;AACF,CAAA;;ACnNA,2BAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQJ,aAAmB,IAAA,EAAM;AAAA,IAC/B,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMpB,QAAA,CAAO,IAAA;AAAA,MACb,MAAMA,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACVA,iBAAe,aAAaoB,YAAU,CAAA;;ACEtC,2BAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQI,aAAmB,IAAA,EAAM;AAAA,IAC/B,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMxB,QAAA,CAAO,IAAA;AAAA,MACb,MAAMA,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACVA,iBAAe,aAAawB,YAAU,CAAA;;ACStC,MAAM,4BAAA,GAA+B,EAAE,MAAA,CAAO;AAAA,EAC5C,WAAA,EAAa,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EACjC,WAAA,EAAa,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EACjC,YAAA,EAAc,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EAClC,YAAA,EAAc,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EAClC,IAAA,EAAM,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EAC1B,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EAC3B,UAAA,EAAY,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EAChC,OAAA,EAAS,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EAC7B,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EAC3B,WAAA,EAAa,CAAA,CAAE,IAAA,CAAK,CAAC,QAAA,EAAU,aAAa,MAAM,CAAC,CAAA,CAAE,OAAA,CAAQ,MAAM;AACrE,CAAC,CAAA;AAIM,MAAMC,mBAAA,GAA4E,OAAO,OAAA,EAAS,OAAA,KAAY;AACnH,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AAEA,EAAA,MAAM,IAAA,GAAO,gCAAA,CAAiC,4BAAA,EAA8B,OAAO,CAAA;AAGnF,EAAA,MAAM,OAAA,GAAU,MAAM,OAAA,CAAQ,QAAA,CAAS,YAAY,MAAA,CAAO;AAAA,IACxD,IAAA,EAAM;AAAA,MACJ,GAAG,IAAA;AAAA,MACH,IAAA,EAAM,EAAE,OAAA,EAAS,EAAE,IAAI,OAAA,CAAQ,IAAA,CAAK,IAAG;AAAE;AAC3C,GACD,CAAA;AAED,EAAA,OAAO,OAAA;AACT,CAAA;AAGO,MAAMC,wBAAA,GAAsE,OAAO,KAAA,EAAO,OAAA,KAAY;AAC3G,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AACA,EAAA,OAAO,OAAA,CAAQ,QAAA,CAAS,WAAA,CAAY,QAAA,CAAS;AAAA,IAC3C,KAAA,EAAO;AAAA,MACL,IAAA,EAAM;AAAA,QACJ,EAAA,EAAI,QAAQ,IAAA,CAAK;AAAA;AACnB,KACF;AAAA,IACA,OAAA,EAAS;AAAA,MACP,SAAA,EAAW;AAAA;AACb,GACD,CAAA;AACH,CAAA;AAGO,MAAMC,mBAAA,GAAkE,OAAO,OAAA,EAAS,OAAA,KAAY;AACzG,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AAEA,EAAA,MAAM,EAAE,EAAA,EAAG,GAAI,gCAAA,CAAiC,EAAE,MAAA,CAAO,EAAC,EAAA,EAAI,CAAA,CAAE,QAAO,CAAE,QAAA,EAAS,EAAE,GAAG,OAAO,CAAA;AAE9F,EAAA,OAAO,OAAA,CAAQ,QAAA,CAAS,WAAA,CAAY,MAAA,CAAO;AAAA,IACzC,KAAA,EAAO;AAAA,MACL,EAAA;AAAA,MACA,IAAA,EAAM;AAAA,QACJ,EAAA,EAAI,QAAQ,IAAA,CAAK;AAAA;AACnB;AACF,GACD,CAAA;AACH,CAAA;AAGA,MAAM,4BAAA,GAA+B,EAAE,MAAA,CAAO;AAAA,EAC5C,EAAA,EAAI,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EACxB,IAAA,EAAM,EAAE,MAAA,CAAO;AAAA,IACb,WAAA,EAAa,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,IACjC,WAAA,EAAa,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,IACjC,YAAA,EAAc,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,IAClC,YAAA,EAAc,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,IAClC,IAAA,EAAM,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,IAC1B,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,IAC3B,UAAA,EAAY,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,IAChC,OAAA,EAAS,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,IAC7B,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,IAC3B,WAAA,EAAa,EAAE,IAAA,CAAK,CAAC,UAAU,WAAA,EAAa,MAAM,CAAC,CAAA,CAAE,QAAA;AAAS,GAC/D;AACH,CAAC,CAAA;AAIM,MAAMC,mBAAA,GAA4E,OAAO,OAAA,EAAS,OAAA,KAAY;AACnH,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AAEA,EAAA,MAAM,EAAE,EAAA,EAAI,IAAA,EAAK,GAAI,gCAAA,CAAiC,8BAA8B,OAAO,CAAA;AAE3F,EAAA,OAAO,OAAA,CAAQ,QAAA,CAAS,WAAA,CAAY,MAAA,CAAO;AAAA,IACzC,KAAA,EAAO;AAAA,MACL,EAAA;AAAA,MACA,IAAA,EAAM;AAAA,QACJ,EAAA,EAAI,QAAQ,IAAA,CAAK;AAAA;AACnB,KACF;AAAA,IACA;AAAA,GACD,CAAA;AACH,CAAA;AAGO,MAAMC,mBAAA,GAAkE,OAAO,OAAA,EAAS,OAAA,KAAY;AACzG,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,UAAU,GAAG,CAAA;AAAA,EACzB;AAEA,EAAA,MAAM,EAAE,EAAA,EAAG,GAAI,gCAAA,CAAiC,EAAE,MAAA,CAAO,EAAC,EAAA,EAAI,CAAA,CAAE,QAAO,CAAE,QAAA,EAAS,EAAE,GAAG,OAAO,CAAA;AAG9F,EAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,WAAA,CAAY,UAAA,CAAW;AAAA,IAC5C,KAAA,EAAO;AAAA,MACL,MAAA,EAAQ,QAAQ,IAAA,CAAK,EAAA;AAAA,MACrB,SAAA,EAAW;AAAA,KACb;AAAA,IACA,IAAA,EAAM;AAAA,MACJ,SAAA,EAAW;AAAA;AACb,GACD,CAAA;AAGD,EAAA,OAAO,OAAA,CAAQ,QAAA,CAAS,WAAA,CAAY,MAAA,CAAO;AAAA,IACzC,KAAA,EAAO;AAAA,MACL,EAAA;AAAA,MACA,IAAA,EAAM;AAAA,QACJ,EAAA,EAAI,QAAQ,IAAA,CAAK;AAAA;AACnB,KACF;AAAA,IACA,IAAA,EAAM;AAAA,MACJ,SAAA,EAAW;AAAA;AACb,GACD,CAAA;AACH,CAAA;;AC/IA,kCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQJ,oBAA0B,IAAA,EAAM;AAAA,IACtC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMzB,QAAA,CAAO,IAAA;AAAA,MACb,aAAaA,QAAA,CAAO;AAAA;AACtB,GACD,CAAA;AACH;;ACVA,wBAAe,aAAayB,mBAAiB,CAAA;;ACE7C,kCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQG,oBAA0B,IAAA,EAAM;AAAA,IACtC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAM5B,QAAA,CAAO,IAAA;AAAA,MACb,aAAaA,QAAA,CAAO;AAAA;AACtB,GACD,CAAA;AACH;;ACVA,wBAAe,aAAa4B,mBAAiB,CAAA;;ACE7C,kCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQD,oBAA0B,IAAA,EAAM;AAAA,IACtC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAM3B,QAAA,CAAO,IAAA;AAAA,MACb,aAAaA,QAAA,CAAO;AAAA;AACtB,GACD,CAAA;AACH;;ACVA,wBAAe,aAAa2B,mBAAiB,CAAA;;ACE7C,kCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQE,oBAA0B,IAAA,EAAM;AAAA,IACtC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAM7B,QAAA,CAAO,IAAA;AAAA,MACb,aAAaA,QAAA,CAAO;AAAA;AACtB,GACD,CAAA;AACH;;ACVA,wBAAe,aAAa6B,mBAAiB,CAAA;;ACAtC,MAAM,cAAA,GAAiBC,IAAE,IAAA,CAAK;AAAA,EACnC,UAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,aAAA;AAAA,EACA,SAAA;AAAA,EACA;AACF,CAAC,CAAA;AAGM,MAAM,eAAA,GAAkBA,IAAE,IAAA,CAAK;AAAA,EACpC,kBAAA;AAAA,EACA,eAAA;AAAA,EACA,cAAA;AAAA,EACA;AACF,CAAC,CAAA;AAGM,MAAM,cAAA,GAAiBA,IAAE,IAAA,CAAK;AAAA,EACnC,KAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AAAA,EACA;AACF,CAAC,CAAA;AAGM,MAAM,qBAAA,GAAwBA,IAAE,IAAA,CAAK;AAAA,EAC1C,OAAA;AAAA,EACA,iBAAA;AAAA,EACA,MAAA;AAAA,EACA,WAAA;AAAA,EACA,YAAA;AAAA,EACA,WAAA;AAAA,EACA,UAAA;AAAA,EACA;AACF,CAAC,CAAA;AAGkCA,IAAE,IAAA,CAAK;AAAA,EACxC,SAAA;AAAA,EACA,MAAA;AAAA,EACA,QAAA;AAAA,EACA;AACF,CAAC;AAGM,MAAM,kBAAA,GAAqBA,IAAE,IAAA,CAAK;AAAA,EACvC,QAAA;AAAA,EACA,MAAA;AAAA,EACA,KAAA;AAAA,EACA,SAAA;AAAA,EACA;AACF,CAAC,CAAA;AAGM,MAAM,qBAAA,GAAwBA,IAAE,MAAA,CAAO;AAAA,EAC5C,QAAA,EAAU,cAAA;AAAA,EACV,SAAA,EAAW,eAAA;AAAA,EACX,QAAA,EAAU,cAAA;AAAA,EACV,eAAA,EAAiBA,GAAA,CAAE,MAAA,EAAO,CAAE,KAAK,2BAA2B,CAAA;AAAA,EAC5D,kBAAA,EAAoBA,GAAA,CAAE,MAAA,EAAO,CAAE,KAAK,8BAA8B,CAAA;AAAA,EAClE,QAAQA,GAAA,CAAE,MAAA,GAAS,IAAA,CAAK,iBAAiB,EAAE,QAAA,EAAS;AAAA,EACpD,WAAA,EAAaA,GAAA,CAAE,MAAA,EAAO,CAAE,GAAA,CAAI,CAAA,EAAG,yBAAyB,CAAA,CAAE,GAAA,CAAI,GAAA,EAAK,sBAAsB,CAAA,CAAE,QAAA;AAC7F,CAAC,CAAA,CAAE,MAAA;AAAA,EACD,CAAC,IAAA,KAAS,IAAA,CAAK,eAAA,KAAoB,IAAA,CAAK,kBAAA;AAAA,EACxC;AAAA,IACE,OAAA,EAAS,kDAAA;AAAA,IACT,IAAA,EAAM,CAAC,oBAAoB;AAAA;AAE/B,CAAA;AAGO,MAAM,qBAAA,GAAwBA,IAAE,MAAA,CAAO;AAAA,EAC5C,EAAA,EAAIA,GAAA,CAAE,MAAA,EAAO,CAAE,KAAK,uBAAuB,CAAA;AAAA,EAC3C,QAAA,EAAU,eAAe,QAAA,EAAS;AAAA,EAClC,SAAA,EAAW,gBAAgB,QAAA,EAAS;AAAA,EACpC,QAAA,EAAU,eAAe,QAAA,EAAS;AAAA,EAClC,iBAAiBA,GAAA,CAAE,MAAA,GAAS,IAAA,CAAK,2BAA2B,EAAE,QAAA,EAAS;AAAA,EACvE,oBAAoBA,GAAA,CAAE,MAAA,GAAS,IAAA,CAAK,8BAA8B,EAAE,QAAA,EAAS;AAAA,EAC7E,QAAQA,GAAA,CAAE,MAAA,GAAS,IAAA,CAAK,iBAAiB,EAAE,QAAA,EAAS;AAAA,EACpD,WAAA,EAAaA,GAAA,CAAE,MAAA,EAAO,CAAE,GAAA,CAAI,CAAA,EAAG,yBAAyB,CAAA,CAAE,GAAA,CAAI,GAAA,EAAK,sBAAsB,CAAA,CAAE,QAAA;AAC7F,CAAC,CAAA,CAAE,MAAA;AAAA,EACD,CAAC,IAAA,KAAS;AACR,IAAA,IAAI,IAAA,CAAK,eAAA,IAAmB,IAAA,CAAK,kBAAA,EAAoB;AACnD,MAAA,OAAO,IAAA,CAAK,oBAAoB,IAAA,CAAK,kBAAA;AAAA,IACvC;AACA,IAAA,OAAO,IAAA;AAAA,EACT,CAAA;AAAA,EACA;AAAA,IACE,OAAA,EAAS,kDAAA;AAAA,IACT,IAAA,EAAM,CAAC,oBAAoB;AAAA;AAE/B,CAAA;AAG2CA,IAAE,MAAA,CAAO;AAAA,EAClD,EAAA,EAAIA,GAAA,CAAE,MAAA,EAAO,CAAE,KAAK,uBAAuB,CAAA;AAAA,EAC3C,MAAA,EAAQ,qBAAA;AAAA,EACR,WAAA,EAAaA,IAAE,MAAA,EAAO,CAAE,IAAI,GAAA,EAAK,sBAAsB,EAAE,QAAA,EAAS;AAAA,EAClE,MAAA,EAAQ,kBAAA,CAAmB,OAAA,CAAQ,QAAQ;AAC7C,CAAC;AAGM,MAAM,sBAAA,GAAyBA,IAAE,MAAA,CAAO;AAAA,EAC7C,OAAOA,GAAA,CAAE,MAAA,EAAO,CAAE,GAAA,CAAI,GAAG,oBAAoB,CAAA;AAAA,EAC7C,SAAA,EAAWA,GAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EAC/B,iBAAA,EAAmBA,GAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EACvC,OAAA,EAASA,GAAA,CAAE,GAAA,EAAI,CAAE,QAAA;AACnB,CAAC,CAAA;AA8EM,MAAM,gBAAA,GAAmB;AAAA,EAC9B,YAAA,EAAc,uCAAA;AAAA,EACd,oBAAA,EAAsB,sBAAA;AAAA,EACtB,iBAAA,EAAmB,wCAAA;AAAA,EACnB,cAAA,EAAgB,qCAAA;AAAA,EAChB,yBAAA,EAA2B,2BAAA;AAAA,EAC3B,aAAA,EAAe,oBAAA;AAAA,EACf,sBAAA,EAAwB;AAC1B,CAAA;;ACpMA,SAAS,YAAA,GAA8B;AACrC,EAAA,MAAM,WAAA,GAAc,OAAA,CAAQ,GAAA,CAAI,eAAA,IAAmB,MAAA;AAEnD,EAAA,IAAI,WAAA,KAAgB,MAAA,IAAU,WAAA,KAAgB,MAAA,EAAQ;AACpD,IAAA,OAAO,OAAA,CAAQ,IAAI,YAAA,IAAgB,IAAA;AAAA,EACrC,CAAA,MAAO;AACL,IAAA,OAAO,OAAA,CAAQ,IAAI,YAAA,IAAgB,IAAA;AAAA,EACrC;AACF;AAGA,MAAM,YAAY,YAAA,EAAa;AACxB,MAAM,GAAA,GAAM,SAAA,GAAY,IAAI,GAAA,CAAI,SAAS,CAAA,GAAI,IAAA;;ACwBpD,eAAsB,gBAAgB,WAAA,EAWnC;AACD,EAAA,IAAI;AAEF,IAAA,MAAM,SAAA,GAAY,OAAA,CAAQ,GAAA,CAAI,YAAA,IAAgB,QAAQ,GAAA,CAAI,YAAA;AAC1D,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,OAAA,CAAQ,KAAK,mDAAmD,CAAA;AAEhE,MAAA,OAAO;AAAA,QACL,OAAA,EAAS,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA;AAAA;AAAA,QACzB,eAAA,EAAiB;AAAA,UACf,EAAA,EAAI,CAAA,IAAA,EAAO,IAAA,CAAK,GAAA,EAAK,CAAA,CAAA;AAAA,UACrB,GAAG;AAAA,SACL;AAAA,QACA,KAAA,EAAO;AAAA,OACT;AAAA,IACF;AAEA,IAAA,IAAI,CAAC,GAAA,EAAK;AACR,MAAA,MAAM,IAAI,MAAM,8CAA8C,CAAA;AAAA,IAChE;AAEA,IAAA,MAAM,YAAA,GAAe,MAAM,GAAA,CAAK,eAAA,CAAgB,MAAA,CAAO;AAAA,MACrD,eAAe,WAAA,CAAY,aAAA;AAAA,MAC3B,eAAe,WAAA,CAAY,aAAA;AAAA,MAC3B,MAAM,WAAA,CAAY,IAAA;AAAA,MAClB,OAAO,WAAA,CAAY,KAAA;AAAA,MACnB,UAAU,WAAA,CAAY,QAAA;AAAA,MACtB,SAAS,WAAA,CAAY;AAAA,KACtB,CAAA;AAED,IAAA,OAAO;AAAA,MACL,OAAA,EAAS,aAAa,cAAA,KAAmB,aAAA;AAAA,MACzC,iBAAiB,YAAA,CAAa,OAAA;AAAA,MAC9B,KAAA,EAAO,YAAA,CAAa,cAAA,KAAmB,eAAA,GAAkB,4BAAA,GAA+B;AAAA,KAC1F;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,iCAAiC,KAAK,CAAA;AACpD,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,4BAA4B,CAAA;AAAA,EACvD;AACF;AAKA,eAAsB,cAAc,SAAA,EAMjC;AACD,EAAA,IAAI;AAEF,IAAA,MAAM,SAAA,GAAY,OAAA,CAAQ,GAAA,CAAI,YAAA,IAAgB,QAAQ,GAAA,CAAI,YAAA;AAC1D,IAAA,IAAI,CAAC,SAAA,IAAa,CAAC,GAAA,EAAK;AACtB,MAAA,OAAA,CAAQ,KAAK,oDAAoD,CAAA;AACjE,MAAA,OAAO,mBAAmB,SAAS,CAAA;AAAA,IACrC;AAGA,IAAA,IAAI;AACF,MAAA,MAAM,WAAA,GAAc,MAAM,aAAA,CAAc,SAAS,CAAA;AACjD,MAAA,OAAO,WAAA;AAAA,IACT,SAAS,QAAA,EAAU;AACjB,MAAA,OAAA,CAAQ,IAAA,CAAK,2CAA2C,QAAQ,CAAA;AAChE,MAAA,OAAO,mBAAmB,SAAS,CAAA;AAAA,IACrC;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,+BAA+B,KAAK,CAAA;AAClD,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,+BAA+B,CAAA;AAAA,EAC1D;AACF;AAKA,eAAe,cAAc,SAAA,EAM1B;AACD,EAAA,IAAI,CAAC,GAAA,EAAK;AACR,IAAA,MAAM,IAAI,MAAM,4BAA4B,CAAA;AAAA,EAC9C;AAGA,EAAA,MAAM,aAAA,GAAgB;AAAA,IACpB,EAAA,EAAI;AAAA,MACF,IAAA,EAAM,SAAA,CAAU,SAAA,CAAU,IAAA,IAAQ,gBAAA;AAAA,MAClC,aAAA,EAAe,UAAU,SAAA,CAAU,aAAA;AAAA,MACnC,aAAA,EAAe,UAAU,SAAA,CAAU,aAAA;AAAA,MACnC,IAAA,EAAM,UAAU,SAAA,CAAU,IAAA;AAAA,MAC1B,KAAA,EAAO,UAAU,SAAA,CAAU,KAAA;AAAA,MAC3B,QAAA,EAAU,UAAU,SAAA,CAAU,QAAA;AAAA,MAC9B,OAAA,EAAS,SAAA,CAAU,SAAA,CAAU,OAAA,IAAW;AAAA,KAC1C;AAAA,IACA,IAAA,EAAM;AAAA,MACJ,IAAA,EAAM,SAAA,CAAU,WAAA,CAAY,IAAA,IAAQ,aAAA;AAAA,MACpC,aAAA,EAAe,UAAU,WAAA,CAAY,aAAA;AAAA,MACrC,aAAA,EAAe,UAAU,WAAA,CAAY,aAAA;AAAA,MACrC,IAAA,EAAM,UAAU,WAAA,CAAY,IAAA;AAAA,MAC5B,KAAA,EAAO,UAAU,WAAA,CAAY,KAAA;AAAA,MAC7B,QAAA,EAAU,UAAU,WAAA,CAAY,QAAA;AAAA,MAChC,OAAA,EAAS,SAAA,CAAU,WAAA,CAAY,OAAA,IAAW;AAAA,KAC5C;AAAA;AAAA,IAEA,WAAA,EAAa;AAAA,GACf;AAEA,EAAA,IAAI,eAAA;AAEJ,EAAA,IAAI;AAEF,IAAA,IAAI,CAAC,GAAA,EAAK;AACR,MAAA,OAAA,CAAQ,KAAK,8CAA8C,CAAA;AAC3D,MAAA,OAAO;AAAA,QACL,IAAA,EAAM,IAAA,CAAK,KAAA,CAAM,GAAA,GAAO,GAAG,CAAA;AAAA;AAAA,QAC3B,QAAA,EAAU,KAAA;AAAA,QACV,SAAA,EAAW;AAAA,UACT,QAAA,EAAU,GAAA;AAAA,UACV,UAAA,EAAY,CAAA;AAAA,UACZ,UAAU,SAAA,CAAU,QAAA;AAAA,UACpB,WAAW,SAAA,CAAU,SAAA;AAAA,UACrB,UAAU,SAAA,CAAU;AAAA;AACtB,OACF;AAAA,IACF;AAIA,IAAA,IAAI,SAAA,CAAU,aAAa,UAAA,EAAY;AACrC,MAAA,eAAA,GAAkB,MAAO,GAAA,CAAY,SAAA,CAAU,MAAA,CAAO;AAAA,QACpD,GAAG,aAAA;AAAA,QACH,KAAA,EAAO,wDAAA;AAAA;AAAA,QACP,IAAA,EAAM,uDAAA;AAAA;AAAA,QACN,IAAA,EAAM,SAAA,CAAU,QAAA,KAAa,KAAA,GAAQ,KAAA,GAAQ;AAAA,OAC9C,CAAA;AAAA,IACH,CAAA,MAAA,IAAW,SAAA,CAAU,QAAA,KAAa,QAAA,EAAU;AAC1C,MAAA,eAAA,GAAkB,MAAO,GAAA,CAAY,OAAA,CAAQ,MAAA,CAAO;AAAA,QAClD,GAAG,aAAA;AAAA,QACH,IAAA,EAAM,qGAAA;AAAA,QACN,KAAA,EAAO,IAAA;AAAA,QACP,YAAA,EAAc;AAAA,OACf,CAAA;AAAA,IACH,CAAA,MAAO;AAEL,MAAA,eAAA,GAAkB,MAAO,GAAA,CAAY,OAAA,CAAQ,MAAA,CAAO;AAAA,QAClD,GAAG,aAAA;AAAA,QACH,IAAA,EAAM,sGAAA;AAAA,QACN,KAAA,EAAO,IAAA;AAAA,QACP,YAAA,EAAc;AAAA,OACf,CAAA;AAAA,IACH;AAGA,IAAA,MAAM,aAAA,GAAgB,UAAA,CAAW,eAAA,CAAgB,KAAA,IAAS,MAAM,CAAA;AAChE,IAAA,MAAM,WAAA,GAAc,IAAA,CAAK,KAAA,CAAM,aAAA,GAAgB,GAAG,CAAA;AAElD,IAAA,OAAO;AAAA,MACL,IAAA,EAAM,WAAA;AAAA,MACN,QAAA,EAAU,KAAA;AAAA,MACV,SAAA,EAAW;AAAA,QACT,QAAA,EAAU,aAAA;AAAA,QACV,UAAA,EAAY,CAAA;AAAA,QACZ,UAAU,SAAA,CAAU,QAAA;AAAA,QACpB,WAAW,SAAA,CAAU,SAAA;AAAA,QACrB,UAAU,SAAA,CAAU,QAAA;AAAA,QACpB,OAAO,eAAA,CAAgB,EAAA;AAAA,QACvB,UAAU,eAAA,CAAgB;AAAA;AAC5B,KACF;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,mCAAmC,KAAK,CAAA;AACtD,IAAA,MAAM,KAAA;AAAA,EACR;AACF;AAKA,SAAS,mBAAmB,SAAA,EAIzB;AACD,EAAA,MAAM,SAAA,GAAY;AAAA,IAChB,UAAA,EAAY,GAAA;AAAA,IACZ,QAAA,EAAU,GAAA;AAAA,IACV,OAAA,EAAS,GAAA;AAAA,IACT,aAAA,EAAe,GAAA;AAAA,IACf,SAAA,EAAW,GAAA;AAAA,IACX,SAAA,EAAW;AAAA,GACb;AAEA,EAAA,MAAM,gBAAA,GAAmB;AAAA,IACvB,kBAAA,EAAoB,CAAA;AAAA,IACpB,eAAA,EAAiB,GAAA;AAAA,IACjB,cAAA,EAAgB,CAAA;AAAA,IAChB,eAAA,EAAiB;AAAA,GACnB;AAEA,EAAA,MAAM,QAAA,GAAW,SAAA,CAAU,SAAA,CAAU,QAAkC,CAAA,IAAK,GAAA;AAC5E,EAAA,MAAM,UAAA,GAAa,gBAAA,CAAiB,SAAA,CAAU,SAA0C,CAAA,IAAK,CAAA;AAC7F,EAAA,MAAM,OAAO,QAAA,GAAW,UAAA;AAExB,EAAA,OAAO;AAAA,IACL,IAAA,EAAM,IAAA,CAAK,KAAA,CAAM,IAAA,GAAO,GAAG,CAAA;AAAA;AAAA,IAC3B,QAAA,EAAU,KAAA;AAAA,IACV,SAAA,EAAW;AAAA,MACT,QAAA;AAAA,MACA,UAAA;AAAA,MACA,UAAU,SAAA,CAAU,QAAA;AAAA,MACpB,WAAW,SAAA,CAAU,SAAA;AAAA,MACrB,UAAU,SAAA,CAAU,QAAA;AAAA,MACpB,QAAA,EAAU;AAAA;AAAA;AACZ,GACF;AACF;AAKA,eAAsBC,kBAAgB,QAAA,EAQnC;AACD,EAAA,IAAI;AAEF,IAAA,MAAM,SAAA,GAAY,OAAA,CAAQ,GAAA,CAAI,YAAA,IAAgB,QAAQ,GAAA,CAAI,YAAA;AAC1D,IAAA,IAAI,CAAC,SAAA,IAAa,CAAC,GAAA,EAAK;AACtB,MAAA,OAAA,CAAQ,KAAK,mDAAmD,CAAA;AAEhE,MAAA,MAAM,SAAA,GAAY,CAAA,IAAA,EAAO,IAAA,CAAK,GAAA,EAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,EAAO,CAAE,SAAS,EAAE,CAAA,CAAE,MAAA,CAAO,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAC9E,MAAA,OAAO;AAAA,QACL,EAAA,EAAI,SAAA;AAAA,QACJ,MAAA,EAAQ,WAAA;AAAA,QACR,cAAA,EAAgB,CAAA,GAAA,EAAM,IAAA,CAAK,GAAA,EAAK,CAAA,CAAA;AAAA,QAChC,qBAAA,EAAuB,IAAI,IAAA,CAAK,IAAA,CAAK,GAAA,KAAQ,CAAA,GAAI,EAAA,GAAK,EAAA,GAAK,EAAA,GAAK,GAAI,CAAA;AAAA;AAAA,QACpE,IAAA,EAAM;AAAA;AAAA,OACR;AAAA,IACF;AAGA,IAAA,MAAM,aAAA,GAAgB;AAAA,MACpB,EAAA,EAAI;AAAA,QACF,MAAM,QAAA,CAAS,EAAA,CAAG,WAAA,IAAe,QAAA,CAAS,GAAG,IAAA,IAAQ,WAAA;AAAA,QACrD,aAAA,EAAe,QAAA,CAAS,EAAA,CAAG,YAAA,IAAgB,SAAS,EAAA,CAAG,aAAA;AAAA,QACvD,aAAA,EAAe,QAAA,CAAS,EAAA,CAAG,YAAA,IAAgB,SAAS,EAAA,CAAG,aAAA;AAAA,QACvD,IAAA,EAAM,SAAS,EAAA,CAAG,IAAA;AAAA,QAClB,KAAA,EAAO,SAAS,EAAA,CAAG,KAAA;AAAA,QACnB,QAAA,EAAU,QAAA,CAAS,EAAA,CAAG,UAAA,IAAc,SAAS,EAAA,CAAG,QAAA;AAAA,QAChD,OAAA,EAAS,QAAA,CAAS,EAAA,CAAG,OAAA,IAAW;AAAA,OAClC;AAAA,MACA,IAAA,EAAM;AAAA,QACJ,MAAM,QAAA,CAAS,IAAA,CAAK,WAAA,IAAe,QAAA,CAAS,KAAK,IAAA,IAAQ,QAAA;AAAA,QACzD,aAAA,EAAe,QAAA,CAAS,IAAA,CAAK,YAAA,IAAgB,SAAS,IAAA,CAAK,aAAA;AAAA,QAC3D,aAAA,EAAe,QAAA,CAAS,IAAA,CAAK,YAAA,IAAgB,SAAS,IAAA,CAAK,aAAA;AAAA,QAC3D,IAAA,EAAM,SAAS,IAAA,CAAK,IAAA;AAAA,QACpB,KAAA,EAAO,SAAS,IAAA,CAAK,KAAA;AAAA,QACrB,QAAA,EAAU,QAAA,CAAS,IAAA,CAAK,UAAA,IAAc,SAAS,IAAA,CAAK,QAAA;AAAA,QACpD,OAAA,EAAS,QAAA,CAAS,IAAA,CAAK,OAAA,IAAW;AAAA,OACpC;AAAA,MACA,WAAA,EAAa,SAAS,WAAA,IAAe;AAAA,KACvC;AAEA,IAAA,IAAI,WAAA;AAGJ,IAAA,IAAI,QAAA,CAAS,aAAa,UAAA,EAAY;AACpC,MAAA,WAAA,GAAc,MAAO,GAAA,CAAY,SAAA,CAAU,MAAA,CAAO;AAAA,QAChD,GAAG,aAAA;AAAA,QACH,KAAA,EAAO,SAAS,OAAA,IAAW,wDAAA;AAAA;AAAA,QAC3B,IAAA,EAAM,uDAAA;AAAA;AAAA,QACN,IAAA,EAAM,QAAA,CAAS,QAAA,KAAa,KAAA,GAAQ,KAAA,GAAQ;AAAA,OAC7C,CAAA;AAAA,IACH,CAAA,MAAA,IAAW,QAAA,CAAS,QAAA,KAAa,QAAA,EAAU;AAEzC,MAAA,MAAM,cAAc,QAAA,CAAS,OAAA,GACzB,MAAM,gBAAA,CAAiB,QAAA,CAAS,OAAO,CAAA,GACvC,mGAAA;AAEJ,MAAA,WAAA,GAAc,MAAO,GAAA,CAAY,OAAA,CAAQ,MAAA,CAAO;AAAA,QAC9C,GAAG,aAAA;AAAA,QACH,IAAA,EAAM,WAAA;AAAA,QACN,KAAA,EAAO,IAAA;AAAA,QACP,YAAA,EAAc;AAAA,OACf,CAAA;AAAA,IACH,CAAA,MAAO;AAEL,MAAA,MAAM,cAAc,QAAA,CAAS,OAAA,GACzB,MAAM,gBAAA,CAAiB,QAAA,CAAS,OAAO,CAAA,GACvC,iGAAA;AAEJ,MAAA,WAAA,GAAc,MAAO,GAAA,CAAY,OAAA,CAAQ,MAAA,CAAO;AAAA,QAC9C,GAAG,aAAA;AAAA,QACH,IAAA,EAAM,WAAA;AAAA,QACN,KAAA,EAAO,IAAA;AAAA,QACP,YAAA,EAAc;AAAA,OACf,CAAA;AAAA,IACH;AAGA,IAAA,MAAM,aAAA,GAAgB,UAAA,CAAW,WAAA,CAAY,KAAA,IAAS,MAAM,CAAA;AAC5D,IAAA,MAAM,WAAA,GAAc,IAAA,CAAK,KAAA,CAAM,aAAA,GAAgB,GAAG,CAAA;AAElD,IAAA,OAAO;AAAA,MACL,IAAI,WAAA,CAAY,EAAA;AAAA,MAChB,MAAA,EAAQ,YAAY,MAAA,IAAU,WAAA;AAAA,MAC9B,cAAA,EAAgB,WAAA,CAAY,eAAA,IAAmB,CAAA,GAAA,EAAM,YAAY,EAAE,CAAA,CAAA;AAAA,MACnE,uBAAuB,WAAA,CAAY,sBAAA,GAC/B,IAAI,IAAA,CAAK,YAAY,sBAAsB,CAAA,GAC3C,IAAI,IAAA,CAAK,KAAK,GAAA,EAAI,GAAI,IAAI,EAAA,GAAK,EAAA,GAAK,KAAK,GAAI,CAAA;AAAA;AAAA,MACjD,IAAA,EAAM,WAAA;AAAA,MACN,OAAA,EAAS;AAAA;AAAA,KACX;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,4BAA4B,KAAK,CAAA;AAG/C,IAAA,IAAI,KAAA,IAAS,OAAO,KAAA,KAAU,QAAA,IAAY,aAAa,KAAA,EAAO;AAC5D,MAAA,MAAM,eAAgB,KAAA,CAAc,OAAA;AACpC,MAAA,IAAI,YAAA,CAAa,QAAA,CAAS,SAAS,CAAA,EAAG;AACpC,QAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,4DAA4D,CAAA;AAAA,MACvF,CAAA,MAAA,IAAW,YAAA,CAAa,QAAA,CAAS,MAAM,CAAA,EAAG;AACxC,QAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,kFAAkF,CAAA;AAAA,MAC7G,CAAA,MAAA,IAAW,YAAA,CAAa,QAAA,CAAS,YAAY,CAAA,EAAG;AAC9C,QAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,8CAA8C,CAAA;AAAA,MACzE;AAAA,IACF;AAEA,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,0CAA0C,CAAA;AAAA,EACrE;AACF;AAKA,eAAe,iBAAiB,OAAA,EAAkC;AAChE,EAAA,IAAI;AAGF,IAAA,OAAO,+FAAA;AAAA,EACT,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,gCAAgC,KAAK,CAAA;AACnD,IAAA,OAAO,+FAAA;AAAA,EACT;AACF;AAKA,eAAsB,mBAAmB,KAAA,EAAe;AACtD,EAAA,IAAI;AAEF,IAAA,MAAM,SAAA,GAAY,OAAA,CAAQ,GAAA,CAAI,YAAA,IAAgB,QAAQ,GAAA,CAAI,YAAA;AAC1D,IAAA,IAAI,CAAC,SAAA,IAAa,CAAC,GAAA,EAAK;AACtB,MAAA,OAAA,CAAQ,KAAK,mDAAmD,CAAA;AAEhE,MAAA,MAAM,QAAA,GAAW,CAAC,WAAA,EAAa,YAAA,EAAc,aAAa,UAAU,CAAA;AACpE,MAAA,MAAM,YAAA,GAAe,SAAS,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,QAAA,CAAS,MAAM,CAAC,CAAA;AAEzE,MAAA,OAAO;AAAA,QACL,EAAA,EAAI,KAAA;AAAA,QACJ,MAAA,EAAQ,YAAA;AAAA,QACR,gBAAgB,CAAA,GAAA,EAAM,KAAA,CAAM,MAAM,GAAG,CAAA,CAAE,CAAC,CAAC,CAAA,CAAA;AAAA,QACzC,qBAAA,EAAuB,IAAI,IAAA,CAAK,IAAA,CAAK,GAAA,KAAQ,CAAA,GAAI,EAAA,GAAK,EAAA,GAAK,EAAA,GAAK,GAAI,CAAA;AAAA,QACpE,MAAA,EAAQ;AAAA,UACN;AAAA,YACE,SAAA,sBAAe,IAAA,EAAK;AAAA,YACpB,MAAA,EAAQ,YAAA;AAAA,YACR,WAAA,EAAa,cAAc,YAAY,CAAA;AAAA;AACzC;AACF,OACF;AAAA,IACF;AAIA,IAAA,IAAI,WAAA;AACJ,IAAA,IAAI,QAAA,GAAW,SAAA;AAEf,IAAA,IAAI;AAEF,MAAA,WAAA,GAAc,MAAO,GAAA,CAAY,SAAA,CAAU,QAAA,CAAS,KAAK,CAAA;AACzD,MAAA,QAAA,GAAW,UAAA;AAAA,IACb,SAAS,aAAA,EAAe;AACtB,MAAA,IAAI;AAEF,QAAA,WAAA,GAAc,MAAO,GAAA,CAAY,OAAA,CAAQ,QAAA,CAAS,KAAK,CAAA;AACvD,QAAA,QAAA,GAAW,QAAA;AAAA,MACb,SAAS,WAAA,EAAa;AAEpB,QAAA,IAAI;AACF,UAAA,WAAA,GAAc,MAAO,GAAA,CAAY,MAAA,CAAO,QAAA,CAAS,KAAK,CAAA;AACtD,UAAA,QAAA,GAAW,OAAA;AAAA,QACb,SAAS,UAAA,EAAY;AACnB,UAAA,MAAM,IAAI,MAAM,iCAAiC,CAAA;AAAA,QACnD;AAAA,MACF;AAAA,IACF;AAGA,IAAA,MAAM,MAAA,GAAS,YAAY,MAAA,IAAU,SAAA;AACrC,IAAA,MAAM,cAAA,GAAiB,WAAA,CAAY,eAAA,IAAmB,CAAA,GAAA,EAAM,KAAK,CAAA,CAAA;AACjE,IAAA,MAAM,wBAAwB,WAAA,CAAY,sBAAA,GACtC,IAAI,IAAA,CAAK,YAAY,sBAAsB,CAAA,GAC3C,IAAI,IAAA,CAAK,KAAK,GAAA,EAAI,GAAI,IAAI,EAAA,GAAK,EAAA,GAAK,KAAK,GAAI,CAAA;AAGjD,IAAA,MAAM,SAID,EAAC;AACN,IAAA,IAAI,YAAY,MAAA,IAAU,KAAA,CAAM,OAAA,CAAQ,WAAA,CAAY,MAAM,CAAA,EAAG;AAC3D,MAAA,MAAA,CAAO,KAAK,GAAG,WAAA,CAAY,MAAA,CAAO,GAAA,CAAI,CAAC,KAAA,MAAgB;AAAA,QACrD,WAAW,IAAI,IAAA,CAAK,MAAM,YAAA,IAAgB,IAAA,CAAK,KAAK,CAAA;AAAA,QACpD,MAAA,EAAQ,MAAM,IAAA,IAAQ,MAAA;AAAA,QACtB,WAAA,EAAa,KAAA,CAAM,WAAA,IAAe,CAAA,WAAA,EAAc,MAAM,CAAA;AAAA,QACtD,CAAC,CAAA;AAAA,IACL,CAAA,MAAO;AAEL,MAAA,MAAA,CAAO,IAAA,CAAK;AAAA,QACV,SAAA,sBAAe,IAAA,EAAK;AAAA,QACpB,MAAA;AAAA,QACA,WAAA,EAAa,cAAc,MAAM,CAAA;AAAA,OAClC,CAAA;AAAA,IACH;AAEA,IAAA,OAAO;AAAA,MACL,EAAA,EAAI,KAAA;AAAA,MACJ,MAAA;AAAA,MACA,cAAA;AAAA,MACA,qBAAA;AAAA,MACA,MAAA;AAAA,MACA,QAAA;AAAA,MACA,OAAA,EAAS;AAAA;AAAA,KACX;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,+BAA+B,KAAK,CAAA;AAGlD,IAAA,IAAI,KAAA,IAAS,OAAO,KAAA,KAAU,QAAA,IAAY,aAAa,KAAA,EAAO;AAC5D,MAAA,MAAM,eAAgB,KAAA,CAAc,OAAA;AACpC,MAAA,IAAI,YAAA,CAAa,QAAA,CAAS,WAAW,CAAA,EAAG;AACtC,QAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,iCAAiC,CAAA;AAAA,MAC5D,CAAA,MAAA,IAAW,YAAA,CAAa,QAAA,CAAS,YAAY,CAAA,EAAG;AAC9C,QAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,8CAA8C,CAAA;AAAA,MACzE;AAAA,IACF;AAEA,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,mDAAmD,CAAA;AAAA,EAC9E;AACF;;ACvfA,eAAsBC,yBAAA,CACpB,SAAA,EAOA,MAAA,EACA,OAAA,EACoD;AACpD,EAAA,IAAI;AAEF,IAAA,MAAM,QAAA,GAAW,MAAM,aAAA,CAAc,SAAS,CAAA;AAG9C,IAAA,MAAM,aAAA,GAAgB,MAAM,MAAA,CAAO,cAAA,CAAe,MAAA,CAAO;AAAA,MACvD,QAAQ,QAAA,CAAS,IAAA;AAAA;AAAA,MACjB,QAAA,EAAU,QAAA,CAAS,QAAA,CAAS,WAAA,EAAY;AAAA,MACxC,QAAA,EAAU;AAAA,QACR,MAAA;AAAA,QACA,UAAU,SAAA,CAAU,QAAA;AAAA,QACpB,WAAW,SAAA,CAAU,SAAA;AAAA,QACrB,UAAU,SAAA,CAAU,QAAA;AAAA,QACpB,IAAA,EAAM;AAAA;AAAA,OAER;AAAA,MACA,yBAAA,EAA2B;AAAA,QACzB,OAAA,EAAS;AAAA;AACX,KACD,CAAA;AAED,IAAA,OAAO;AAAA,MACL,iBAAiB,aAAA,CAAc,EAAA;AAAA,MAC/B,MAAM,QAAA,CAAS;AAAA,KACjB;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,uCAAuC,KAAK,CAAA;AAC1D,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,iCAAiC,CAAA;AAAA,EAC5D;AACF;AAKA,eAAsBC,oBAAA,CACpB,eAAA,EACA,WAAA,EACA,OAAA,EACkB;AAClB,EAAA,IAAI;AAEF,IAAA,MAAM,aAAA,GAAgB,MAAM,MAAA,CAAO,cAAA,CAAe,SAAS,eAAe,CAAA;AAE1E,IAAA,IAAI,aAAA,CAAc,WAAW,WAAA,EAAa;AACxC,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,uBAAuB,CAAA;AAAA,IAClD;AAGA,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,SAAA,CAAU,MAAA,CAAO;AAAA,MACtC,KAAA,EAAO,EAAE,EAAA,EAAI,WAAA,EAAY;AAAA,MACzB,IAAA,EAAM;AAAA,QACJ,aAAA,EAAe,MAAA;AAAA,QACf,eAAA;AAAA,QACA,MAAA,EAAQ;AAAA;AACV,KACD,CAAA;AAGD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,sBAAA,CAAuB,MAAA,CAAO;AAAA,MACnD,IAAA,EAAM;AAAA,QACJ,WAAA;AAAA,QACA,MAAA,EAAQ,MAAA;AAAA,QACR,cAAA,EAAgB,iBAAA;AAAA,QAChB,WAAA,EAAa,mBAAA;AAAA,QACb,MAAA,EAAQ;AAAA;AACV,KACD,CAAA;AAED,IAAA,OAAO,IAAA;AAAA,EACT,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,kCAAkC,KAAK,CAAA;AACrD,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,2BAA2B,CAAA;AAAA,EACtD;AACF;AAKA,eAAsBC,mBAAA,CACpB,eAAA,EACA,WAAA,EACA,MAAA,EACA,OAAA,EACkB;AAClB,EAAA,IAAI;AAEF,IAAA,MAAM,MAAA,GAAS,MAAM,MAAA,CAAO,OAAA,CAAQ,MAAA,CAAO;AAAA,MACzC,cAAA,EAAgB,eAAA;AAAA,MAChB,MAAA,EAAQ,uBAAA;AAAA,MACR,QAAA,EAAU;AAAA,QACR,WAAA;AAAA,QACA;AAAA;AACF,KACD,CAAA;AAGD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,SAAA,CAAU,MAAA,CAAO;AAAA,MACtC,KAAA,EAAO,EAAE,EAAA,EAAI,WAAA,EAAY;AAAA,MACzB,IAAA,EAAM;AAAA,QACJ,aAAA,EAAe,UAAA;AAAA,QACf,MAAA,EAAQ;AAAA;AACV,KACD,CAAA;AAGD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,sBAAA,CAAuB,MAAA,CAAO;AAAA,MACnD,IAAA,EAAM;AAAA,QACJ,WAAA;AAAA,QACA,MAAA,EAAQ,QAAA;AAAA,QACR,cAAA,EAAgB,MAAA;AAAA,QAChB,WAAA,EAAa,qBAAqB,MAAM,CAAA,CAAA;AAAA,QACxC,MAAA,EAAQ;AAAA;AACV,KACD,CAAA;AAED,IAAA,OAAO,IAAA;AAAA,EACT,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,iCAAiC,KAAK,CAAA;AACpD,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,0BAA0B,CAAA;AAAA,EACrD;AACF;;AC1DO,MAAMC,eAAA,GAOR,OAAO,IAAA,EAAM,OAAA,KAAY;AAC5B,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAgB,CAAA;AAAA,EAC3C;AAEA,EAAA,MAAM,IAAA,GAAO,KAAK,IAAA,IAAQ,CAAA;AAC1B,EAAA,MAAM,QAAQ,IAAA,CAAK,GAAA,CAAI,IAAA,CAAK,KAAA,IAAS,IAAI,GAAG,CAAA;AAC5C,EAAA,MAAM,IAAA,GAAA,CAAQ,OAAO,CAAA,IAAK,KAAA;AAG1B,EAAA,MAAM,KAAA,GAAa,EAAE,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA,EAAG;AAE7C,EAAA,IAAI,IAAA,CAAK,MAAA,IAAU,IAAA,CAAK,MAAA,KAAW,KAAA,EAAO;AACxC,IAAA,KAAA,CAAM,SAAS,IAAA,CAAK,MAAA;AAAA,EACtB;AAEA,EAAA,IAAI,IAAA,CAAK,QAAA,IAAY,IAAA,CAAK,QAAA,KAAa,KAAA,EAAO;AAC5C,IAAA,KAAA,CAAM,WAAW,IAAA,CAAK,QAAA;AAAA,EACxB;AAEA,EAAA,IAAI,KAAK,MAAA,EAAQ;AACf,IAAA,KAAA,CAAM,EAAA,GAAK;AAAA,MACT,EAAE,aAAa,EAAE,QAAA,EAAU,KAAK,MAAA,EAAQ,IAAA,EAAM,eAAc,EAAE;AAAA,MAC9D,EAAE,aAAA,EAAe,EAAE,WAAA,EAAa,EAAE,QAAA,EAAU,IAAA,CAAK,MAAA,EAAQ,IAAA,EAAM,aAAA,EAAc,EAAE,EAAE;AAAA,MACjF,EAAE,gBAAA,EAAkB,EAAE,WAAA,EAAa,EAAE,QAAA,EAAU,IAAA,CAAK,MAAA,EAAQ,IAAA,EAAM,aAAA,EAAc,EAAE;AAAE,KACtF;AAAA,EACF;AAGA,EAAA,MAAM,KAAA,GAAQ,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,KAAA,CAAM,EAAE,OAAO,CAAA;AAG9D,EAAA,MAAM,UAAA,GAAa,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,QAAA,CAAS;AAAA,IAC3D,KAAA;AAAA,IACA,OAAA,EAAS;AAAA,MACP,aAAA,EAAe,IAAA;AAAA,MACf,gBAAA,EAAkB,IAAA;AAAA,MAClB,IAAA,EAAM,IAAA;AAAA,MACN,aAAA,EAAe;AAAA,QACb,OAAA,EAAS,EAAE,SAAA,EAAW,MAAA,EAAO;AAAA,QAC7B,IAAA,EAAM;AAAA;AAAA;AACR,KACF;AAAA,IACA,OAAA,EAAS,EAAE,SAAA,EAAW,MAAA,EAAO;AAAA,IAC7B,IAAA;AAAA,IACA,IAAA,EAAM;AAAA,GACP,CAAA;AAED,EAAA,MAAM,UAAA,GAAa,IAAA,CAAK,IAAA,CAAK,KAAA,GAAQ,KAAK,CAAA;AAC1C,EAAA,MAAM,UAAU,IAAA,GAAO,UAAA;AACvB,EAAA,MAAM,UAAU,IAAA,GAAO,CAAA;AAEvB,EAAA,OAAO;AAAA,IACL,UAAA;AAAA,IACA,KAAA;AAAA,IACA,IAAA;AAAA,IACA,UAAA;AAAA,IACA,OAAA;AAAA,IACA;AAAA,GACF;AACF,CAAA;AAiCO,MAAMJ,iBAAA,GAAoE,OAAO,IAAA,EAAM,OAAA,KAAY;AACxG,EAAA,IAAI;AAEF,IAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,YAAY,CAAA;AAAA,IACxD;AAGA,IAAA,MAAM,cAAA,GAAiB,qBAAA,CAAsB,KAAA,CAAM,IAAI,CAAA;AAGvD,IAAA,MAAM,aAAA,GAAgB,MAAM,OAAA,CAAQ,QAAA,CAAS,YAAY,SAAA,CAAU;AAAA,MACjE,KAAA,EAAO,EAAE,EAAA,EAAI,cAAA,CAAe,iBAAiB,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA;AAAG,KACtE,CAAA;AAED,IAAA,IAAI,CAAC,aAAA,EAAe;AAClB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,iBAAiB,CAAA;AAAA,IAC7D;AAEA,IAAA,MAAM,gBAAA,GAAmB,MAAM,OAAA,CAAQ,QAAA,CAAS,YAAY,SAAA,CAAU;AAAA,MACpE,KAAA,EAAO,EAAE,EAAA,EAAI,cAAA,CAAe,oBAAoB,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA;AAAG,KACzE,CAAA;AAED,IAAA,IAAI,CAAC,gBAAA,EAAkB;AACrB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,iBAAiB,CAAA;AAAA,IAC7D;AAGA,IAAA,IAAI,eAAe,MAAA,EAAQ;AACzB,MAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,QAAA,CAAS,KAAK,SAAA,CAAU;AAAA,QACjD,KAAA,EAAO,EAAE,EAAA,EAAI,cAAA,CAAe,QAAQ,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA;AAAG,OAC7D,CAAA;AAED,MAAA,IAAI,CAAC,IAAA,EAAM;AACT,QAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,cAAc,CAAA;AAAA,MAC1D;AAAA,IACF;AAGA,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,MAAA,CAAO;AAAA,MACxD,IAAA,EAAM;AAAA,QACJ,MAAA,EAAQ,QAAQ,IAAA,CAAK,EAAA;AAAA,QACrB,UAAU,cAAA,CAAe,QAAA;AAAA,QACzB,WAAW,cAAA,CAAe,SAAA;AAAA,QAC1B,UAAU,cAAA,CAAe,QAAA;AAAA,QACzB,iBAAiB,cAAA,CAAe,eAAA;AAAA,QAChC,oBAAoB,cAAA,CAAe,kBAAA;AAAA,QACnC,QAAQ,cAAA,CAAe,MAAA;AAAA,QACvB,aAAa,cAAA,CAAe,WAAA;AAAA,QAC5B,MAAA,EAAQ,OAAA;AAAA,QACR,aAAA,EAAe;AAAA;AACjB,KACD,CAAA;AAGD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,sBAAA,CAAuB,MAAA,CAAO;AAAA,MACnD,IAAA,EAAM;AAAA,QACJ,aAAa,SAAA,CAAU,EAAA;AAAA,QACvB,MAAA,EAAQ,OAAA;AAAA,QACR,WAAA,EAAa,oBAAA;AAAA,QACb,MAAA,EAAQ;AAAA;AACV,KACD,CAAA;AAED,IAAA,OAAO,SAAA;AAAA,EACT,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,IAAI,KAAA,YAAiB,KAAA,IAAS,KAAA,CAAM,IAAA,KAAS,UAAA,EAAY;AACvD,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,CAAA,kBAAA,EAAqB,KAAA,CAAM,OAAO,CAAA,CAAE,CAAA;AAAA,IAC/D;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,gCAAgC,KAAK,CAAA;AACnD,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,uDAAuD,CAAA;AAAA,EAClF;AACF,CAAA;AA2BO,MAAMK,uBAAA,GAAsF,OAAO,IAAA,EAAM,OAAA,KAAY;AAC1H,EAAA,IAAI;AAEF,IAAA,MAAM,cAAA,GAAiB,sBAAA,CAAuB,KAAA,CAAM,IAAI,CAAA;AAGxD,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,SAAA,CAAU;AAAA,MAC3D,KAAA,EAAO,EAAE,KAAA,EAAO,cAAA,CAAe,KAAA;AAAM,KACtC,CAAA;AAED,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,oBAAoB,CAAA;AAAA,IAChE;AAGA,IAAA,IAAI,YAAY,SAAA,CAAU,MAAA;AAC1B,IAAA,IAAI,eAAe,SAAA,EAAW;AAE5B,MAAA,MAAM,aAAA,GAAwC;AAAA,QAC5C,WAAA,EAAa,WAAA;AAAA,QACb,UAAA,EAAY,UAAA;AAAA,QACZ,YAAA,EAAc,YAAA;AAAA,QACd,YAAA,EAAc,WAAA;AAAA,QACd,SAAA,EAAW,WAAA;AAAA,QACX,QAAA,EAAU;AAAA,OACZ;AACA,MAAA,SAAA,GAAY,aAAA,CAAc,cAAA,CAAe,SAAS,CAAA,IAAK,SAAA,CAAU,MAAA;AAAA,IACnE;AAGA,IAAA,MAAM,gBAAA,GAAmB,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,MAAA,CAAO;AAAA,MAC/D,KAAA,EAAO,EAAE,EAAA,EAAI,SAAA,CAAU,EAAA,EAAG;AAAA,MAC1B,IAAA,EAAM;AAAA,QACJ,WAAW,cAAA,CAAe,SAAA;AAAA,QAC1B,mBAAmB,cAAA,CAAe,iBAAA;AAAA,QAClC,UAAU,cAAA,CAAe,OAAA;AAAA,QACzB,MAAA,EAAQ;AAAA;AACV,KACD,CAAA;AAGD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,sBAAA,CAAuB,MAAA,CAAO;AAAA,MACnD,IAAA,EAAM;AAAA,QACJ,aAAa,SAAA,CAAU,EAAA;AAAA,QACvB,MAAA,EAAQ,SAAA;AAAA,QACR,gBAAgB,SAAA,CAAU,MAAA;AAAA,QAC1B,WAAA,EAAa,CAAA,yBAAA,EAA4B,cAAA,CAAe,SAAS,CAAA,CAAA;AAAA,QACjE,MAAA,EAAQ,SAAA;AAAA,QACR,SAAS,cAAA,CAAe;AAAA;AAC1B,KACD,CAAA;AAED,IAAA,OAAO,gBAAA;AAAA,EACT,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,IAAI,KAAA,YAAiB,KAAA,IAAS,KAAA,CAAM,IAAA,KAAS,UAAA,EAAY;AACvD,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,CAAA,kBAAA,EAAqB,KAAA,CAAM,OAAO,CAAA,CAAE,CAAA;AAAA,IAC/D;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,uCAAuC,KAAK,CAAA;AAC1D,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,8DAA8D,CAAA;AAAA,EACzF;AACF,CAAA;AAgBO,MAAMC,iBAAA,GAAoE,OAAO,IAAA,EAAM,OAAA,KAAY;AACxG,EAAA,IAAI;AAEF,IAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,YAAY,CAAA;AAAA,IACxD;AAGA,IAAA,MAAM,cAAA,GAAiB,qBAAA,CAAsB,KAAA,CAAM,IAAI,CAAA;AAGvD,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,SAAA,CAAU;AAAA,MAC3D,KAAA,EAAO,EAAE,EAAA,EAAI,cAAA,CAAe,IAAI,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA;AAAG,KACzD,CAAA;AAED,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,oBAAoB,CAAA;AAAA,IAChE;AAGA,IAAA,IAAI,SAAA,CAAU,WAAW,OAAA,EAAS;AAChC,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gDAAgD,CAAA;AAAA,IAC3E;AAGA,IAAA,IAAI,eAAe,eAAA,EAAiB;AAClC,MAAA,MAAM,aAAA,GAAgB,MAAM,OAAA,CAAQ,QAAA,CAAS,YAAY,SAAA,CAAU;AAAA,QACjE,KAAA,EAAO,EAAE,EAAA,EAAI,cAAA,CAAe,iBAAiB,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA;AAAG,OACtE,CAAA;AACD,MAAA,IAAI,CAAC,aAAA,EAAe;AAClB,QAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,iBAAiB,CAAA;AAAA,MAC7D;AAAA,IACF;AAEA,IAAA,IAAI,eAAe,kBAAA,EAAoB;AACrC,MAAA,MAAM,gBAAA,GAAmB,MAAM,OAAA,CAAQ,QAAA,CAAS,YAAY,SAAA,CAAU;AAAA,QACpE,KAAA,EAAO,EAAE,EAAA,EAAI,cAAA,CAAe,oBAAoB,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA;AAAG,OACzE,CAAA;AACD,MAAA,IAAI,CAAC,gBAAA,EAAkB;AACrB,QAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,iBAAiB,CAAA;AAAA,MAC7D;AAAA,IACF;AAGA,IAAA,IAAI,eAAe,MAAA,EAAQ;AACzB,MAAA,MAAM,IAAA,GAAO,MAAM,OAAA,CAAQ,QAAA,CAAS,KAAK,SAAA,CAAU;AAAA,QACjD,KAAA,EAAO,EAAE,EAAA,EAAI,cAAA,CAAe,QAAQ,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA;AAAG,OAC7D,CAAA;AACD,MAAA,IAAI,CAAC,IAAA,EAAM;AACT,QAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,cAAc,CAAA;AAAA,MAC1D;AAAA,IACF;AAGA,IAAA,MAAM,gBAAA,GAAmB,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,MAAA,CAAO;AAAA,MAC/D,KAAA,EAAO,EAAE,EAAA,EAAI,cAAA,CAAe,EAAA,EAAG;AAAA,MAC/B,IAAA,EAAM;AAAA,QACJ,UAAU,cAAA,CAAe,QAAA;AAAA,QACzB,WAAW,cAAA,CAAe,SAAA;AAAA,QAC1B,UAAU,cAAA,CAAe,QAAA;AAAA,QACzB,iBAAiB,cAAA,CAAe,eAAA;AAAA,QAChC,oBAAoB,cAAA,CAAe,kBAAA;AAAA,QACnC,QAAQ,cAAA,CAAe,MAAA;AAAA,QACvB,aAAa,cAAA,CAAe;AAAA;AAC9B,KACD,CAAA;AAGD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,sBAAA,CAAuB,MAAA,CAAO;AAAA,MACnD,IAAA,EAAM;AAAA,QACJ,aAAa,gBAAA,CAAiB,EAAA;AAAA,QAC9B,MAAA,EAAQ,OAAA;AAAA,QACR,WAAA,EAAa,oBAAA;AAAA,QACb,MAAA,EAAQ;AAAA;AACV,KACD,CAAA;AAED,IAAA,OAAO,gBAAA;AAAA,EACT,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,IAAI,KAAA,YAAiB,KAAA,IAAS,KAAA,CAAM,IAAA,KAAS,UAAA,EAAY;AACvD,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,CAAA,kBAAA,EAAqB,KAAA,CAAM,OAAO,CAAA,CAAE,CAAA;AAAA,IAC/D;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,gCAAgC,KAAK,CAAA;AACnD,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,uDAAuD,CAAA;AAAA,EAClF;AACF,CAAA;AASO,MAAMC,iBAAA,GAA+E,OAAO,IAAA,EAAM,OAAA,KAAY;AACnH,EAAA,IAAI;AAEF,IAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,YAAY,CAAA;AAAA,IACxD;AAGA,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,SAAA,CAAU;AAAA,MAC3D,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,IAAI,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA;AAAG,KAC/C,CAAA;AAED,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,oBAAoB,CAAA;AAAA,IAChE;AAGA,IAAA,IAAI,SAAA,CAAU,WAAW,OAAA,EAAS;AAChC,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gDAAgD,CAAA;AAAA,IAC3E;AAGA,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,SAAA,CAAU,MAAA,CAAO;AAAA,MACtC,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,EAAA;AAAG,KACtB,CAAA;AAED,IAAA,OAAO,EAAE,SAAS,IAAA,EAAK;AAAA,EACzB,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,gCAAgC,KAAK,CAAA;AACnD,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,uDAAuD,CAAA;AAAA,EAClF;AACF,CAAA;AASO,MAAMC,cAAA,GAA+E,OAAO,IAAA,EAAM,OAAA,KAAY;AACnH,EAAA,IAAI;AAEF,IAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,YAAY,CAAA;AAAA,IACxD;AAGA,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,SAAA,CAAU;AAAA,MAC3D,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,IAAI,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA,EAAG;AAAA,MAC9C,OAAA,EAAS;AAAA,QACP,aAAA,EAAe,IAAA;AAAA,QACf,gBAAA,EAAkB,IAAA;AAAA,QAClB,IAAA,EAAM,IAAA;AAAA,QACN,aAAA,EAAe;AAAA,UACb,OAAA,EAAS,EAAE,SAAA,EAAW,MAAA;AAAO;AAC/B;AACF,KACD,CAAA;AAED,IAAA,OAAO,SAAA;AAAA,EACT,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,6BAA6B,KAAK,CAAA;AAChD,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,oDAAoD,CAAA;AAAA,EAC/E;AACF,CAAA;AA8BO,MAAMP,yBAAA,GAAkJ,OAAO,IAAA,EAAM,OAAA,KAAY;AACtL,EAAA,IAAI;AAEF,IAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,YAAY,CAAA;AAAA,IACxD;AAGA,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,SAAA,CAAU;AAAA,MAC3D,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,aAAa,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA,EAAG;AAAA,MACvD,OAAA,EAAS;AAAA,QACP,aAAA,EAAe,IAAA;AAAA,QACf,gBAAA,EAAkB;AAAA;AACpB,KACD,CAAA;AAED,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,oBAAoB,CAAA;AAAA,IAChE;AAGA,IAAA,IAAI,SAAA,CAAU,WAAW,OAAA,EAAS;AAChC,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,mDAAmD,CAAA;AAAA,IAC9E;AAGA,IAAA,MAAM,WAAA,GAAc,MAAMQ,yBAAA,CAA+B;AAAA,MACvD,UAAU,SAAA,CAAU,QAAA;AAAA,MACpB,WAAW,SAAA,CAAU,SAAA;AAAA,MACrB,UAAU,SAAA,CAAU,QAAA;AAAA,MACpB,WAAW,SAAA,CAAU,gBAAA;AAAA,MACrB,aAAa,SAAA,CAAU;AAAA,KACzB,EAAG,OAAA,CAAQ,IAAA,CAAK,EAAA,EAAI,OAAO,CAAA;AAG3B,IAAA,MAAM,YAAA,GAAe,OAAA,CAAQ,mCAAmC,CAAA,CAAE,MAAA;AAClE,IAAA,MAAM,YAAA,CAAa,cAAA,CAAe,MAAA,CAAO,WAAA,CAAY,eAAA,EAAiB;AAAA,MACpE,QAAA,EAAU;AAAA,QACR,aAAa,IAAA,CAAK,WAAA;AAAA,QAClB,MAAA,EAAQ,QAAQ,IAAA,CAAK,EAAA;AAAA,QACrB,UAAU,SAAA,CAAU,QAAA;AAAA,QACpB,WAAW,SAAA,CAAU,SAAA;AAAA,QACrB,UAAU,SAAA,CAAU,QAAA;AAAA,QACpB,IAAA,EAAM;AAAA;AACR,KACD,CAAA;AAGD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,SAAA,CAAU,MAAA,CAAO;AAAA,MACtC,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,WAAA,EAAY;AAAA,MAC9B,IAAA,EAAM;AAAA,QACJ,iBAAiB,WAAA,CAAY,eAAA;AAAA,QAC7B,IAAA,EAAM,YAAY,IAAA,GAAO,GAAA;AAAA;AAAA,QACzB,MAAA,EAAQ;AAAA;AACV,KACD,CAAA;AAGD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,sBAAA,CAAuB,MAAA,CAAO;AAAA,MACnD,IAAA,EAAM;AAAA,QACJ,aAAa,IAAA,CAAK,WAAA;AAAA,QAClB,MAAA,EAAQ,iBAAA;AAAA,QACR,cAAA,EAAgB,OAAA;AAAA,QAChB,WAAA,EAAa,wBAAA;AAAA,QACb,MAAA,EAAQ;AAAA;AACV,KACD,CAAA;AAGD,IAAA,MAAM,gBAAgB,MAAM,YAAA,CAAa,cAAA,CAAe,QAAA,CAAS,YAAY,eAAe,CAAA;AAE5F,IAAA,OAAO;AAAA,MACL,iBAAiB,WAAA,CAAY,eAAA;AAAA,MAC7B,MAAM,WAAA,CAAY,IAAA;AAAA,MAClB,cAAc,aAAA,CAAc;AAAA,KAC9B;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,yCAAyC,KAAK,CAAA;AAC5D,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,2DAA2D,CAAA;AAAA,EACtF;AACF,CAAA;AAsBO,MAAMC,2BAAA,GAAkI,OAAO,IAAA,EAAM,OAAA,KAAY;AACtK,EAAA,IAAI;AAEF,IAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,YAAY,CAAA;AAAA,IACxD;AAGA,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,SAAA,CAAU;AAAA,MAC3D,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,aAAa,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA,EAAG;AAAA,MACvD,OAAA,EAAS;AAAA,QACP,aAAA,EAAe,IAAA;AAAA,QACf,gBAAA,EAAkB;AAAA;AACpB,KACD,CAAA;AAED,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,oBAAoB,CAAA;AAAA,IAChE;AAGA,IAAA,IAAI,SAAA,CAAU,WAAW,OAAA,EAAS;AAChC,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,oDAAoD,CAAA;AAAA,IAC/E;AAGA,IAAA,MAAM,QAAA,GAAW,MAAMD,yBAAA,CAA+B;AAAA,MACpD,UAAU,SAAA,CAAU,QAAA;AAAA,MACpB,WAAW,SAAA,CAAU,SAAA;AAAA,MACrB,UAAU,SAAA,CAAU,QAAA;AAAA,MACpB,WAAW,SAAA,CAAU,gBAAA;AAAA,MACrB,aAAa,SAAA,CAAU;AAAA,KACzB,EAAG,OAAA,CAAQ,IAAA,CAAK,EAAA,EAAI,OAAO,CAAA;AAG3B,IAAA,MAAM,MAAA,GAAS,OAAA,CAAQ,mCAAmC,CAAA,CAAE,MAAA;AAC5D,IAAA,MAAM,MAAA,GAAS,OAAA,CAAQ,GAAA,CAAI,mBAAA,IAAuB,uBAAA;AAElD,IAAA,MAAM,OAAA,GAAU,MAAM,MAAA,CAAO,QAAA,CAAS,SAAS,MAAA,CAAO;AAAA,MACpD,oBAAA,EAAsB,CAAC,MAAM,CAAA;AAAA,MAC7B,UAAA,EAAY;AAAA,QACV;AAAA,UACE,UAAA,EAAY;AAAA,YACV,QAAA,EAAU,KAAA;AAAA,YACV,YAAA,EAAc;AAAA,cACZ,IAAA,EAAM,CAAA,aAAA,EAAgB,SAAA,CAAU,QAAQ,CAAA,CAAA;AAAA,cACxC,aAAa,CAAA,KAAA,EAAQ,SAAA,CAAU,QAAQ,CAAA,KAAA,EAAQ,UAAU,SAAS,CAAA,KAAA;AAAA,aACpE;AAAA,YACA,aAAa,QAAA,CAAS;AAAA;AAAA,WACxB;AAAA,UACA,QAAA,EAAU;AAAA;AACZ,OACF;AAAA,MACA,IAAA,EAAM,SAAA;AAAA,MACN,WAAA,EAAa,CAAA,EAAG,MAAM,CAAA,4CAAA,EAA+C,KAAK,WAAW,CAAA,CAAA;AAAA,MACrF,UAAA,EAAY,CAAA,EAAG,MAAM,CAAA,6CAAA,EAAgD,KAAK,WAAW,CAAA,CAAA;AAAA,MACrF,QAAA,EAAU;AAAA,QACR,aAAa,IAAA,CAAK,WAAA;AAAA,QAClB,MAAA,EAAQ,QAAQ,IAAA,CAAK,EAAA;AAAA,QACrB,UAAU,SAAA,CAAU,QAAA;AAAA,QACpB,WAAW,SAAA,CAAU,SAAA;AAAA,QACrB,UAAU,SAAA,CAAU,QAAA;AAAA,QACpB,IAAA,EAAM;AAAA,OACR;AAAA,MACA,cAAA,EAAgB,QAAQ,IAAA,CAAK;AAAA,KAC9B,CAAA;AAED,IAAA,IAAI,CAAC,QAAQ,GAAA,EAAK;AAChB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,uCAAuC,CAAA;AAAA,IAClE;AAGA,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,SAAA,CAAU,MAAA,CAAO;AAAA,MACtC,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,WAAA,EAAY;AAAA,MAC9B,IAAA,EAAM;AAAA,QACJ,iBAAiB,OAAA,CAAQ,EAAA;AAAA;AAAA,QACzB,MAAA,EAAQ;AAAA;AACV,KACD,CAAA;AAGD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,sBAAA,CAAuB,MAAA,CAAO;AAAA,MACnD,IAAA,EAAM;AAAA,QACJ,aAAa,IAAA,CAAK,WAAA;AAAA,QAClB,MAAA,EAAQ,iBAAA;AAAA,QACR,cAAA,EAAgB,OAAA;AAAA,QAChB,WAAA,EAAa,0BAAA;AAAA,QACb,MAAA,EAAQ;AAAA;AACV,KACD,CAAA;AAED,IAAA,OAAO;AAAA,MACL,YAAY,OAAA,CAAQ,GAAA;AAAA,MACpB,WAAW,OAAA,CAAQ;AAAA,KACrB;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,2CAA2C,KAAK,CAAA;AAC9D,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,6DAA6D,CAAA;AAAA,EACxF;AACF,CAAA;AAUO,MAAMP,oBAAA,GAAwF,OAAO,IAAA,EAAM,OAAA,KAAY;AAC5H,EAAA,IAAI;AAEF,IAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,YAAY,CAAA;AAAA,IACxD;AAGA,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,SAAA,CAAU;AAAA,MAC3D,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,aAAa,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA;AAAG,KACxD,CAAA;AAED,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,oBAAoB,CAAA;AAAA,IAChE;AAGA,IAAA,IAAI,SAAA,CAAU,eAAA,KAAoB,IAAA,CAAK,eAAA,EAAiB;AACtD,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,0CAA0C,CAAA;AAAA,IACrE;AAGA,IAAA,MAAM,UAAU,MAAMS,oBAAA,CAA0B,KAAK,eAAA,EAAiB,IAAA,CAAK,aAAa,OAAO,CAAA;AAE/F,IAAA,OAAO,EAAE,OAAA,EAAQ;AAAA,EACnB,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,mCAAmC,KAAK,CAAA;AACtD,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,qDAAqD,CAAA;AAAA,EAChF;AACF,CAAA;AAUO,MAAMR,mBAAA,GAAqF,OAAO,IAAA,EAAM,OAAA,KAAY;AACzH,EAAA,IAAI;AAEF,IAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,YAAY,CAAA;AAAA,IACxD;AAGA,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,SAAA,CAAU;AAAA,MAC3D,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,aAAa,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA;AAAG,KACxD,CAAA;AAED,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,oBAAoB,CAAA;AAAA,IAChE;AAGA,IAAA,IAAI,SAAA,CAAU,kBAAkB,MAAA,EAAQ;AACtC,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,mDAAmD,CAAA;AAAA,IAC9E;AAEA,IAAA,IAAI,CAAC,UAAU,eAAA,EAAiB;AAC9B,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,6CAA6C,CAAA;AAAA,IACxE;AAGA,IAAA,MAAM,OAAA,GAAU,MAAMS,mBAAA,CAAyB,SAAA,CAAU,iBAAiB,IAAA,CAAK,WAAA,EAAa,IAAA,CAAK,MAAA,EAAQ,OAAO,CAAA;AAEhH,IAAA,OAAO,EAAE,OAAA,EAAQ;AAAA,EACnB,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,kCAAkC,KAAK,CAAA;AACrD,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,oDAAoD,CAAA;AAAA,EAC/E;AACF,CAAA;AA8BO,MAAMC,sBAAA,GAA8G,OAAO,IAAA,EAAM,OAAA,KAAY;AAClJ,EAAA,IAAI;AAEF,IAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,YAAY,CAAA;AAAA,IACxD;AAGA,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,SAAA,CAAU;AAAA,MAC3D,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,aAAa,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA,EAAG;AAAA,MACvD,OAAA,EAAS;AAAA,QACP,aAAA,EAAe,IAAA;AAAA,QACf,gBAAA,EAAkB,IAAA;AAAA,QAClB,IAAA,EAAM;AAAA;AACR,KACD,CAAA;AAED,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,oBAAoB,CAAA;AAAA,IAChE;AAGA,IAAA,IAAI,SAAA,CAAU,kBAAkB,MAAA,EAAQ;AACtC,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,kDAAkD,CAAA;AAAA,IAC7E;AAGA,IAAA,IAAI,UAAU,KAAA,EAAO;AACnB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,qCAAqC,CAAA;AAAA,IAChE;AAGA,IAAA,MAAM,WAAA,GAAc;AAAA,MAClB,IAAI,SAAA,CAAU,gBAAA;AAAA,MACd,MAAM,SAAA,CAAU,aAAA;AAAA,MAChB,UAAU,SAAA,CAAU,QAAA;AAAA,MACpB,WAAW,SAAA,CAAU,SAAA;AAAA,MACrB,UAAU,SAAA,CAAU,QAAA;AAAA,MACpB,OAAA,EAAS,UAAU,IAAA,EAAM,SAAA;AAAA,MACzB,WAAA,EAAa,SAAA,CAAU,WAAA,IAAe,CAAA,mCAAA,EAAsC,UAAU,QAAQ,CAAA;AAAA,KAChG;AAGA,IAAA,MAAM,WAAA,GAAc,MAAMC,iBAAA,CAAmB,WAAW,CAAA;AAGxD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,SAAA,CAAU,MAAA,CAAO;AAAA,MACtC,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,WAAA,EAAY;AAAA,MAC9B,IAAA,EAAM;AAAA,QACJ,OAAO,WAAA,CAAY,EAAA;AAAA,QACnB,WAAW,WAAA,CAAY,MAAA;AAAA,QACvB,mBAAmB,WAAA,CAAY,cAAA;AAAA,QAC/B,MAAA,EAAQ,WAAA;AAAA,QACR,IAAA,EAAM,YAAY,IAAA,GAAO,GAAA;AAAA;AAAA,QACzB,QAAA,EAAU;AAAA,UACR,SAAS,WAAA,CAAY,OAAA;AAAA,UACrB,WAAA,EAAA,iBAAa,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY;AACtC;AACF,KACD,CAAA;AAGD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,sBAAA,CAAuB,MAAA,CAAO;AAAA,MACnD,IAAA,EAAM;AAAA,QACJ,aAAa,IAAA,CAAK,WAAA;AAAA,QAClB,MAAA,EAAQ,WAAA;AAAA,QACR,cAAA,EAAgB,MAAA;AAAA,QAChB,WAAA,EAAa,CAAA,2BAAA,EAA8B,WAAA,CAAY,EAAE,CAAA,CAAA;AAAA,QACzD,MAAA,EAAQ,QAAA;AAAA,QACR,OAAA,EAAS;AAAA,UACP,OAAO,WAAA,CAAY,EAAA;AAAA,UACnB,WAAW,WAAA,CAAY,MAAA;AAAA,UACvB,gBAAgB,WAAA,CAAY,cAAA;AAAA,UAC5B,WAAA,EAAA,iBAAa,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY;AACtC;AACF,KACD,CAAA;AAED,IAAA,OAAA,CAAQ,IAAI,CAAA,kCAAA,EAAqC,IAAA,CAAK,WAAW,CAAA,iBAAA,EAAoB,WAAA,CAAY,EAAE,CAAA,CAAE,CAAA;AAErG,IAAA,OAAO;AAAA,MACL,OAAA,EAAS,IAAA;AAAA,MACT,OAAO,WAAA,CAAY;AAAA,KACrB;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,uCAAuC,KAAK,CAAA;AAC1D,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,8DAA8D,CAAA;AAAA,EACzF;AACF,CAAA;AASO,MAAMC,qBAAA,GAA4G,OAAO,IAAA,EAAM,OAAA,KAAY;AAChJ,EAAA,IAAI;AAEF,IAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,YAAY,CAAA;AAAA,IACxD;AAGA,IAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,SAAA,CAAU;AAAA,MAC3D,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,aAAa,MAAA,EAAQ,OAAA,CAAQ,KAAK,EAAA;AAAG,KACxD,CAAA;AAED,IAAA,IAAI,CAAC,SAAA,EAAW;AACd,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAA,CAAiB,oBAAoB,CAAA;AAAA,IAChE;AAGA,IAAA,IAAI,CAAC,UAAU,KAAA,EAAO;AACpB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,8CAA8C,CAAA;AAAA,IACzE;AAGA,IAAA,MAAM,SAAA,GAAY,MAAMC,kBAAA,CAAsB,SAAA,CAAU,KAAK,CAAA;AAG7D,IAAA,MAAM,aAAA,GAAwC;AAAA,MAC5C,WAAA,EAAa,WAAA;AAAA,MACb,UAAA,EAAY,UAAA;AAAA,MACZ,YAAA,EAAc,YAAA;AAAA,MACd,YAAA,EAAc,WAAA;AAAA,MACd,SAAA,EAAW,WAAA;AAAA,MACX,QAAA,EAAU,WAAA;AAAA,MACV,SAAA,EAAW,WAAA;AAAA,MACX,WAAA,EAAa,QAAA;AAAA,MACb,QAAA,EAAU;AAAA,KACZ;AAEA,IAAA,MAAM,YAAY,aAAA,CAAc,SAAA,CAAU,MAAM,CAAA,IAAK,SAAA,CAAU,UAAU,SAAA,CAAU,MAAA;AAGnF,IAAA,IAAI,SAAA,KAAc,UAAU,MAAA,EAAQ;AAClC,MAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,SAAA,CAAU,MAAA,CAAO;AAAA,QACtC,KAAA,EAAO,EAAE,EAAA,EAAI,IAAA,CAAK,WAAA,EAAY;AAAA,QAC9B,IAAA,EAAM;AAAA,UACJ,MAAA,EAAQ,SAAA;AAAA,UACR,WAAW,SAAA,CAAU,MAAA;AAAA,UACrB,mBAAmB,SAAA,CAAU,cAAA;AAAA,UAC7B,QAAA,EAAU;AAAA,YACR,GAAI,UAAU,QAAA,IAAY,OAAO,UAAU,QAAA,KAAa,QAAA,GAAW,SAAA,CAAU,QAAA,GAAW,EAAC;AAAA,YACzF,YAAA,EAAA,iBAAc,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AAAA,YACrC,OAAA,EAAS,SAAA,CAAU,OAAA,IAAW;AAAC;AACjC;AACF,OACD,CAAA;AAGD,MAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,sBAAA,CAAuB,MAAA,CAAO;AAAA,QACnD,IAAA,EAAM;AAAA,UACJ,aAAa,IAAA,CAAK,WAAA;AAAA,UAClB,MAAA,EAAQ,SAAA;AAAA,UACR,gBAAgB,SAAA,CAAU,MAAA;AAAA,UAC1B,WAAA,EAAa,CAAA,wBAAA,EAA2B,SAAA,CAAU,MAAM,CAAA,CAAA;AAAA,UACxD,MAAA,EAAQ,QAAA;AAAA,UACR,OAAA,EAAS;AAAA,YACP,WAAW,SAAA,CAAU,MAAA;AAAA,YACrB,gBAAgB,SAAA,CAAU,cAAA;AAAA,YAC1B,QAAA,EAAA,iBAAU,IAAI,IAAA,EAAK,EAAE,WAAA;AAAY;AACnC;AACF,OACD,CAAA;AAED,MAAA,OAAA,CAAQ,GAAA,CAAI,kCAAkC,IAAA,CAAK,WAAW,YAAY,SAAA,CAAU,MAAM,CAAA,IAAA,EAAO,SAAS,CAAA,CAAE,CAAA;AAAA,IAC9G;AAEA,IAAA,OAAO;AAAA,MACL,OAAA,EAAS,IAAA;AAAA,MACT,MAAA,EAAQ;AAAA,KACV;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,8CAA8C,KAAK,CAAA;AACjE,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,qEAAqE,CAAA;AAAA,EAChG;AACF,CAAA;AASO,MAAMC,sBAAA,GAGR,OAAO,IAAA,EAAM,OAAA,KAAY;AAC5B,EAAA,IAAI;AACF,IAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gBAAgB,CAAA;AAAA,IAC3C;AAEA,IAAA,IAAI,CAAC,IAAA,CAAK,YAAA,IAAgB,IAAA,CAAK,YAAA,CAAa,WAAW,CAAA,EAAG;AACxD,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,4BAA4B,CAAA;AAAA,IACvD;AAEA,IAAA,IAAI,IAAA,CAAK,YAAA,CAAa,MAAA,GAAS,EAAA,EAAI;AACjC,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gDAAgD,CAAA;AAAA,IAC3E;AAEA,IAAA,MAAM,aAAuB,EAAC;AAC9B,IAAA,MAAM,YAAsB,EAAC;AAG7B,IAAA,KAAA,MAAW,WAAA,IAAe,KAAK,YAAA,EAAc;AAC3C,MAAA,IAAI;AAEF,QAAA,MAAM,SAAA,GAAY,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAU,SAAA,CAAU;AAAA,UAC3D,KAAA,EAAO;AAAA,YACL,EAAA,EAAI,WAAA;AAAA,YACJ,MAAA,EAAQ,QAAQ,IAAA,CAAK,EAAA;AAAA,YACrB,MAAA,EAAQ;AAAA;AAAA;AACV,SACD,CAAA;AAED,QAAA,IAAI,CAAC,SAAA,EAAW;AACd,UAAA,SAAA,CAAU,KAAK,WAAW,CAAA;AAC1B,UAAA;AAAA,QACF;AAGA,QAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,SAAA,CAAU,MAAA,CAAO;AAAA,UACtC,KAAA,EAAO,EAAE,EAAA,EAAI,WAAA;AAAY,SAC1B,CAAA;AAED,QAAA,UAAA,CAAW,KAAK,WAAW,CAAA;AAAA,MAC7B,SAAS,KAAA,EAAO;AACd,QAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,4BAAA,EAA+B,WAAW,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAClE,QAAA,SAAA,CAAU,KAAK,WAAW,CAAA;AAAA,MAC5B;AAAA,IACF;AAEA,IAAA,OAAO;AAAA,MACL,cAAc,UAAA,CAAW,MAAA;AAAA,MACzB;AAAA,KACF;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,MAAM,KAAA;AAAA,IACR;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,sCAAsC,KAAK,CAAA;AACzD,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,6DAA6D,CAAA;AAAA,EACxF;AACF,CAAA;;AC5oCA,gCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQjB,kBAAwB,IAAA,EAAM;AAAA,IACpC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAW/B,QAAA,CAAO,SAAA;AAAA,MAClB,aAAaA,QAAA,CAAO,WAAA;AAAA,MACpB,MAAMA,QAAA,CAAO,IAAA;AAAA,MACb,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACZA,sBAAe,aAAa+B,iBAAe,CAAA;;ACE3C,gCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQM,kBAAwB,IAAA,EAAM;AAAA,IACpC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAWrC,QAAA,CAAO,SAAA;AAAA,MAClB,aAAaA,QAAA,CAAO,WAAA;AAAA,MACpB,MAAMA,QAAA,CAAO,IAAA;AAAA,MACb,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACZA,sBAAe,aAAaqC,iBAAe,CAAA;;ACE3C,gCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQC,kBAAwB,IAAA,EAAM;AAAA,IACpC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAWtC,QAAA,CAAO,SAAA;AAAA,MAClB,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACVA,sBAAe,aAAasC,iBAAe,CAAA;;ACE3C,sCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQF,wBAA8B,IAAA,EAAM;AAAA,IAC1C,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAWpC,QAAA,CAAO,SAAA;AAAA,MAClB,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACVA,4BAAe,aAAaoC,uBAAqB,CAAA;;ACEjD,wCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQJ,0BAAgC,IAAA,EAAM;AAAA,IAC5C,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAWhC,QAAA,CAAO,SAAA;AAAA,MAClB,aAAaA,QAAA,CAAO,WAAA;AAAA,MACpB,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACXA,8BAAe,aAAagC,yBAAuB,CAAA;;ACEnD,0CAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQS,4BAAkC,IAAA,EAAM;AAAA,IAC9C,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAWzC,QAAA,CAAO,SAAA;AAAA,MAClB,aAAaA,QAAA,CAAO,WAAA;AAAA,MACpB,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACXA,gCAAe,aAAayC,2BAAyB,CAAA;;ACErD,mCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQR,qBAA2B,IAAA,EAAM;AAAA,IACvC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAWjC,QAAA,CAAO,SAAA;AAAA,MAClB,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACVA,yBAAe,aAAaiC,oBAAkB,CAAA;;ACE9C,kCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQC,oBAA0B,IAAA,EAAM;AAAA,IACtC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAWlC,QAAA,CAAO,SAAA;AAAA,MAClB,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACVA,wBAAe,aAAakC,mBAAiB,CAAA;;ACE7C,qCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQU,uBAA6B,IAAA,EAAM;AAAA,IACzC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAW5C,QAAA,CAAO,SAAA;AAAA,MAClB,aAAaA,QAAA,CAAO,WAAA;AAAA,MACpB,MAAMA,QAAA,CAAO,IAAA;AAAA,MACb,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACZA,2BAAe,aAAa4C,sBAAoB,CAAA;;ACEhD,oCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQE,sBAA4B,IAAA,EAAM;AAAA,IACxC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAW9C,QAAA,CAAO,SAAA;AAAA,MAClB,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACVA,0BAAe,aAAa8C,qBAAmB,CAAA;;ACE/C,qCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQE,uBAA6B,IAAA,EAAM;AAAA,IACzC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAWhD,QAAA,CAAO,SAAA;AAAA,MAClB,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACVA,2BAAe,aAAagD,sBAAoB,CAAA;;ACEhD,kCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQ3C,oBAA0B,IAAA,EAAM;AAAA,IACtC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAML,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACTA,wBAAe,YAAYK,mBAAiB,CAAA;;ACE5C,gCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQK,kBAAwB,IAAA,EAAM;AAAA,IACpC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMV,QAAA,CAAO,IAAA;AAAA,MACb,aAAaA,QAAA,CAAO;AAAA;AACtB,GACD,CAAA;AACH;;ACVA,sBAAe,YAAYU,iBAAe,CAAA;;ACE1C,kCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQC,oBAA0B,IAAA,EAAM;AAAA,IACtC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMX,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACTA,wBAAe,YAAYW,mBAAiB,CAAA;;ACE5C,qCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQI,uBAA6B,IAAA,EAAM;AAAA,IACzC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMf,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACTA,2BAAe,YAAYe,sBAAoB,CAAA;;ACE/C,kCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQO,oBAA0B,IAAA,EAAM;AAAA,IACtC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMtB,QAAA,CAAO,IAAA;AAAA,MACb,MAAMA,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACVA,wBAAe,YAAYsB,mBAAiB,CAAA;;ACE5C,yCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQC,2BAAiC,IAAA,EAAM;AAAA,IAC7C,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMvB,QAAA,CAAO,IAAA;AAAA,MACb,MAAMA,QAAA,CAAO;AAAA;AACf,GACD,CAAA;AACH;;ACVA,+BAAe,YAAYuB,0BAAwB,CAAA;;ACEnD,uCAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQG,yBAA+B,IAAA,EAAM;AAAA,IAC3C,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAM1B,QAAA,CAAO,IAAA;AAAA,MACb,aAAaA,QAAA,CAAO;AAAA;AACtB,GACD,CAAA;AACH;;ACVA,6BAAe,YAAY0B,wBAAsB,CAAA;;ACU1C,MAAMuB,eAAA,GAAmE,OAAO,KAAA,EAAO,OAAA,KAAY;AACxG,EAAA,IAAI,CAAC,QAAQ,IAAA,EAAM;AACjB,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,gEAAgE,CAAA;AAAA,EAC3F;AAEA,EAAA,IAAI,CAAC,OAAA,CAAQ,IAAA,CAAK,OAAA,EAAS;AACzB,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,mDAAmD,CAAA;AAAA,EAC9E;AAEA,EAAA,MAAM,UAAA,GAAa;AAAA,IACjB,OAAA,EAAS;AAAA,MACP,IAAA,EAAM;AAAA,KACR;AAAA,IACA,OAAA,EAAS;AAAA,MACP,OAAA,EAAS;AAAA;AACX,GACF;AAEA,EAAA,MAAM,CAAC,UAAA,EAAY,WAAW,CAAA,GAAI,MAAMjD,SAAO,YAAA,CAAa;AAAA,IAC1D,OAAA,CAAQ,QAAA,CAAS,UAAA,CAAW,SAAA,CAAU,UAAU,CAAA;AAAA,IAChD,OAAA,CAAQ,SAAS,UAAA,CAAW,QAAA,CAAS,EAAE,GAAG,UAAA,EAAY,IAAA,EAAM,CAAA,EAAG;AAAA,GAChE,CAAA;AAED,EAAA,IAAI,CAAC,UAAA,EAAY;AACf,IAAA,OAAA,CAAQ,IAAI,oFAAoF,CAAA;AAChG,IAAA,OAAO,MAAA;AAAA,EACT;AAEA,EAAA,OAAO,EAAE,YAAY,WAAA,EAAY;AACnC,CAAA;;ACrCA,8BAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQiD,gBAAsB,IAAA,EAAM;AAAA,IAClC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,MAAMjD,QAAA,CAAO,IAAA;AAAA,MACb,YAAYA,QAAA,CAAO;AAAA;AACrB,GACD,CAAA;AACH;;ACVA,oBAAe,YAAYiD,eAAa,CAAA;;ACExC,8BAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQd,gBAAsB,IAAA,EAAM;AAAA,IAClC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAWnC,QAAA,CAAO,SAAA;AAAA,MAClB,aAAaA,QAAA,CAAO,WAAA;AAAA,MACpB,MAAMA,QAAA,CAAO,IAAA;AAAA,MACb,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACZA,oBAAe,YAAYmC,eAAa,CAAA;;ACExC,6BAAA,CAA+B,MAAM,OAAA,EAAS;AAC5C,EAAA,OAAQI,eAAqB,IAAA,EAAM;AAAA,IACjC,GAAG,OAAA;AAAA,IACH,QAAA,EAAU;AAAA,MACR,WAAWvC,QAAA,CAAO,SAAA;AAAA,MAClB,aAAaA,QAAA,CAAO,WAAA;AAAA,MACpB,MAAMA,QAAA,CAAO,IAAA;AAAA,MACb,wBAAwBA,QAAA,CAAO;AAAA;AACjC,GACD,CAAA;AACH;;ACZA,mBAAe,YAAYuC,cAAY,CAAA;;ACmCvC,MAAMW,QAAA,GAAS,QAAQ,MAAA,EAAO;AAE9BA,QAAA,CAAO,IAAA,CAAK,6BAAA,EAA+B,IAAA,EAAM,qBAAqB,CAAA;AACtEA,QAAA,CAAO,IAAA,CAAK,wBAAA,EAA0B,IAAA,EAAM,mBAAmB,CAAA;AAC/DA,QAAA,CAAO,IAAA,CAAK,cAAA,EAAgB,IAAA,EAAM,UAAU,CAAA;AAC5CA,QAAA,CAAO,IAAA,CAAK,cAAA,EAAgB,IAAA,EAAM,UAAU,CAAA;AAC5CA,QAAA,CAAO,IAAA,CAAK,cAAA,EAAgB,IAAA,EAAM,UAAU,CAAA;AAC5CA,QAAA,CAAO,IAAA,CAAK,4BAAA,EAA8B,IAAA,EAAM,uBAAuB,CAAA;AACvEA,QAAA,CAAO,IAAA,CAAK,cAAA,EAAgB,IAAA,EAAM,UAAU,CAAA;AAC5CA,QAAA,CAAO,IAAA,CAAK,cAAA,EAAgB,IAAA,EAAM,UAAU,CAAA;AAC5CA,QAAA,CAAO,IAAA,CAAK,sBAAA,EAAwB,IAAA,EAAM,iBAAiB,CAAA;AAC3DA,QAAA,CAAO,IAAA,CAAK,sBAAA,EAAwB,IAAA,EAAM,iBAAiB,CAAA;AAC3DA,QAAA,CAAO,IAAA,CAAK,sBAAA,EAAwB,IAAA,EAAM,iBAAiB,CAAA;AAC3DA,QAAA,CAAO,IAAA,CAAK,sBAAA,EAAwB,IAAA,EAAM,iBAAiB,CAAA;AAC3DA,QAAA,CAAO,IAAA,CAAK,oBAAA,EAAsB,IAAA,EAAM,eAAe,CAAA;AACvDA,QAAA,CAAO,IAAA,CAAK,oBAAA,EAAsB,IAAA,EAAM,eAAe,CAAA;AACvDA,QAAA,CAAO,IAAA,CAAK,oBAAA,EAAsB,IAAA,EAAM,eAAe,CAAA;AACvDA,QAAA,CAAO,IAAA,CAAK,2BAAA,EAA6B,IAAA,EAAM,qBAAqB,CAAA;AACpEA,QAAA,CAAO,IAAA,CAAK,6BAAA,EAA+B,IAAA,EAAM,uBAAuB,CAAA;AACxEA,QAAA,CAAO,IAAA,CAAK,+BAAA,EAAiC,IAAA,EAAM,yBAAyB,CAAA;AAC5EA,QAAA,CAAO,IAAA,CAAK,uBAAA,EAAyB,IAAA,EAAM,kBAAkB,CAAA;AAC7DA,QAAA,CAAO,IAAA,CAAK,sBAAA,EAAwB,IAAA,EAAM,iBAAiB,CAAA;AAC3DA,QAAA,CAAO,IAAA,CAAK,2BAAA,EAA6B,IAAA,EAAM,oBAAoB,CAAA;AACnEA,QAAA,CAAO,IAAA,CAAK,yBAAA,EAA2B,IAAA,EAAM,mBAAmB,CAAA;AAChEA,QAAA,CAAO,IAAA,CAAK,0BAAA,EAA4B,IAAA,EAAM,oBAAoB,CAAA;AAClEA,QAAA,CAAO,IAAA,CAAK,sBAAA,EAAwB,IAAA,EAAM,iBAAiB,CAAA;AAC3DA,QAAA,CAAO,IAAA,CAAK,oBAAA,EAAsB,IAAA,EAAM,eAAe,CAAA;AACvDA,QAAA,CAAO,IAAA,CAAK,wBAAA,EAA0B,IAAA,EAAM,iBAAiB,CAAA;AAC7DA,QAAA,CAAO,IAAA,CAAK,0BAAA,EAA4B,IAAA,EAAM,oBAAoB,CAAA;AAClEA,QAAA,CAAO,IAAA,CAAK,wBAAA,EAA0B,IAAA,EAAM,iBAAiB,CAAA;AAC7DA,QAAA,CAAO,IAAA,CAAK,+BAAA,EAAiC,IAAA,EAAM,wBAAwB,CAAA;AAC3EA,QAAA,CAAO,IAAA,CAAK,6BAAA,EAA+B,IAAA,EAAM,sBAAsB,CAAA;AACvEA,QAAA,CAAO,IAAA,CAAK,kBAAA,EAAoB,IAAA,EAAM,aAAa,CAAA;AACnDA,QAAA,CAAO,IAAA,CAAK,kBAAA,EAAoB,IAAA,EAAM,aAAa,CAAA;AACnDA,QAAA,CAAO,IAAA,CAAK,iBAAA,EAAmB,IAAA,EAAM,YAAY,CAAA;;AC9DjD,MAAM,6BAAA,GAAgC,CAAC,EAAA,KAAyB,EAAA;AAIhE,MAAM,6BAAA,uBAAsD,GAAA,CAAI;AAAA,EAC9D,CAAC,QAAA,EAAU,MAAA,EAAQ,CAAA;AAAA,EACnB,CAAC,QAAQ,IAAA,CAAK,EAAE,QAAQpD,QAAA,CAAO,kBAAA,EAAoB,CAAC,CAAA;AAAA,EACpD,CAAC,QAAA,EAAU,MAAA,CAAO,KAAK,CAAC,CAAA;AAAA,EACxB,CAAC,cAAA,EAAgB,OAAA,CAAQ,IAAA,EAAM,CAAA;AAAA,EAC/B,CAAC,oBAAA,EAAsB,OAAA,CAAQ,UAAA,EAAY,CAAA;AAAA,EAC3C,CAAC,cAAA,EAAgB,YAAA,EAAc;AACjC,CAAC,CAAA;AAID,MAAM,sBAAA,GAA2C,8BAA8B,6BAA6B,CAAA;AAIrG,SAAS,iCAAiC,kBAAA,EAAmE;AAClH,EAAA,IAAI,CAAC,kBAAA,EAAoB;AACvB,IAAA,OAAO,KAAA,CAAM,IAAA,CAAK,sBAAA,CAAuB,MAAA,EAAQ,CAAA;AAAA,EACnD;AAGA,EAAA,MAAM,2BAAA,GAA8B,IAAI,GAAA,CAAI,sBAAsB,CAAA;AAClE,EAAA,MAAM,wBAAA,GAA2B,mBAAmB,2BAA2B,CAAA;AAC/E,EAAA,OAAO,KAAA,CAAM,IAAA,CAAK,wBAAA,CAAyB,MAAA,EAAQ,CAAA;AACrD;;ACnCA,SAAe,aAAA,CAAc,OAAO,GAAA,EAAK,GAAA,KAAQ;AAC/C,EAAA,IAAI,IAAI,IAAA,EAAM;AACZ,IAAA,GAAA,CAAI,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,IAAI,CAAC,CAAA;AAAA,EAC9B,CAAA,MAAO;AACL,IAAA,GAAA,CAAI,IAAA,CAAK,SAAA,CAAU,IAAI,CAAC,CAAA;AAAA,EAC1B;AACF,CAAC,CAAA;;ACLD,aAAe,aAAA,CAAc,OAAO,GAAA,EAAK,GAAA,KAAQ;AAC/C,EAAA,IAAI,IAAI,SAAA,EAAW;AACjB,IAAA,MAAM,iBAAA,CAAkB,IAAI,SAAS,CAAA;AACrC,IAAA,GAAA,CAAI,IAAA,CAAK,EAAE,OAAA,EAAS,IAAA,EAAM,CAAA;AAAA,EAC5B,CAAA,MAAO;AACL,IAAA,MAAM,6BAAA,EAA8B;AAAA,EACtC;AACF,CAAC,CAAA;;ACYM,MAAM,kBAAA,GAAkE,OAAO,OAAA,KAAY;AAAC,CAAA;AAK5F,MAAM,iBAAA,GAAgE,OAAO,OAAA,KAAY;AAAC,CAAA;AAK1F,MAAM,wBAAA,GAA8E,OAAO,OAAA,KAAY;AAAC,CAAA;AAWxG,MAAM,iBAAA,GAAgE,OAAO,OAAA,KAAY;AAAC,CAAA;AAK1F,MAAM,gBAAA,GAA8D,OAAO,OAAA,KAAY;AAAC,CAAA;;ACpCxF,SAAS,aAAA,GAAgB;AAC5B,EAAA,OAAO,eAAe,KAAA,CAClB,GAAA,EACA,GAAA,EACa;AACb,IAAA,MAAM,MAAA,GAAS,GAAA,CAAI,IAAA,IAAQ,EAAC;AAC5B,IAAAqD,iBAAA,CAAgB,MAAM,CAAA;AAEtB,IAAA,MAAM,UAAA,GAAa,gBAAA,CAAiB,OAAA,EAAS,MAAA,CAAO,KAAK,CAAA;AACzD,IAAA,MAAM,YAAA,GAAe,MAAM,gBAAA,CAAiB,UAAU,CAAA;AACtD,IAAA,IAAI,CAAC,YAAA,EAAc;AACf,MAAA,MAAM,6BAAA,EAA8B;AAAA,IACxC;AACA,IAAA,MAAM,YAAA,GAAe,2BAAA,CAAqC,YAAA,CAAa,YAAY,CAAA;AACnF,IAAA,IAAI,CAAC,aAAa,eAAA,EAAiB;AAC/B,MAAA,MAAM,6BAAA,EAA8B;AAAA,IACxC;AACA,IAAA,IAAI;AACA,MAAA,MAAM,cAAA,CAAe,YAAA,CAAa,cAAA,EAAgB,MAAA,CAAO,QAAQ,CAAA;AAAA,IACrE,SAAQ,CAAA,EAAG;AACP,MAAA,MAAM,6BAAA,EAA8B;AAAA,IACxC;AAEA,IAAA,MAAM,OAAO,MAAM,kBAAA,CAAmB,EAAE,EAAA,EAAI,YAAA,CAAa,QAAQ,CAAA;AAEjE,IAAA,IAAI,SAAS,IAAA,EAAM;AACf,MAAA,MAAM,6BAAA,EAA8B;AAAA,IACxC;AAEA,IAAA,MAAM,iBAAA,CAAkB;AAAA,MAGpB,MAAM,IAAA,CAAK;AAAA,KACd,CAAA;AAED,IAAA,MAAM,OAAA,GAAU,MAAM,aAAA,CAAc,IAAA,CAAK,EAAE,CAAA;AAE3C,IAAA,MAAM,gBAAA,CAAiB;AAAA,MAGnB,MAAM,IAAA,CAAK;AAAA,KACd,CAAA;AAED,IAAA,GAAA,CAAI,IAAA,CAAK;AAAA,MACL,WAAW,OAAA,CAAQ;AAAA,KACtB,CAAA;AAAA,EACL,CAAA;AACJ;AAEA,SAASA,kBAAgB,IAAA,EAAoB;AACzC,EAAA,gBAAA,CAAiB,IAAI,CAAA;AACrB,EAAA,uBAAA,CAAwB,IAAI,CAAA;AAChC;;AC/DA,MAAM,aAAa,IAAI,WAAA,GAAc,MAAA,CAAOrD,QAAA,CAAO,KAAK,SAAS,CAAA;AACjE,MAAM,aAAA,GAAgB,OAAA;AAEf,SAAS,SAAA,CAAU,MAAM,OAAA,EAAS;AACrC,EAAA,OAAO,GAAA,CAAI,SAAA,CAAU,aAAA,EAAe,UAAA,EAAY,MAAM,OAAO,CAAA;AACjE;AAEA,eAAsB,YAAY,KAAA,EAAO;AACrC,EAAA,MAAM,EAAE,SAAQ,GAAI,MAAM,IAAI,WAAA,CAAY,aAAA,EAAe,YAAY,KAAK,CAAA;AAC1E,EAAA,OAAO,OAAA;AACX;;ACPA,eAAsB,2BAAA,CAA4B,OAAO,WAAA,EAAa;AAClE,EAAA,MAAM,EAAE,QAAA,EAAS,GAAI,MAAM,eAAe,KAAK,CAAA;AAC/C,EAAA,OAAO,GAAGsD,QAAA,CAAiB,WAAW,CAAA,EAAG,WAAW,UAAU,QAAQ,CAAA,CAAA;AAC1E;AAEA,eAAsB,uBAAA,CAAwB,OAAO,WAAA,EAAa;AAC9D,EAAA,MAAM,EAAE,QAAA,EAAS,GAAI,MAAM,eAAe,KAAK,CAAA;AAC/C,EAAA,OAAO,GAAGA,QAAA,CAAiB,WAAW,CAAA,EAAG,WAAW,UAAU,QAAQ,CAAA,CAAA;AAC1E;AACA,eAAe,eAAe,KAAA,EAAO;AACjC,EAAA,MAAM,QAAA,GAAW,MAAM,SAAA,CAAU,EAAE,KAAA,EAAM,EAAG,EAAE,SAAA,EAAW,IAAI,QAAA,CAAS,EAAA,EAAI,GAAG,GAAG,CAAA;AAChF,EAAA,OAAO,EAAE,QAAA,EAAS;AACtB;AAEA,eAAsB,sBAAA,CAAuB,OAAO,OAAA,EAAS;AACzD,EAAA,OAAO,wBAAA,CAAyB,OAAO,OAAA,EAAS;AAAA,IAC5C,mBAAA,EAAA,iBAAsB,IAAI,IAAA,EAAK,EAAG,WAAA;AAAY,GACjD,CAAA;AACL;AAEA,eAAsB,0BAAA,CAA2B,OAAO,OAAA,EAAS;AAC7D,EAAA,OAAO,wBAAA,CAAyB,OAAO,OAAA,EAAS;AAAA,IAC5C,uBAAA,EAAA,iBAA0B,IAAI,IAAA,EAAK,EAAG,WAAA;AAAY,GACrD,CAAA;AACL;AACA,eAAe,wBAAA,CAAyB,KAAA,EAAO,OAAA,EAAS,QAAA,EAAU;AAG9D,EAAA,MAAM,UAAA,GAAa,gBAAA,CAAiB,OAAA,EAAS,KAAK,CAAA;AAClD,EAAA,MAAM,YAAA,GAAe,MAAM,gBAAA,CAAiB,UAAU,CAAA;AACtD,EAAA,IAAI,CAAC,YAAA,EAAc;AACf,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,iBAAA,EAAoB,KAAK,CAAA,WAAA,CAAa,CAAA;AAAA,EAC1D;AACA,EAAA,MAAM,YAAA,GAAe,2BAAA,CAA4B,YAAA,CAAa,YAAY,CAAA;AAC1E,EAAA,MAAM,8BAAA,CAA+B,UAAA,EAAY,YAAA,EAAc,QAAQ,CAAA;AACvE,EAAA,WAAA,CAAY,IAAA,CAAK,OAAO,CAAA,CAAE,KAAA,CAAM,CAAC,CAAA,KAAM;AACnC,IAAA,OAAA,CAAQ,KAAA,CAAM,wBAAwB,CAAC,CAAA;AAAA,EAC3C,CAAC,CAAA;AACL;AAEO,SAAS,oBAAA,CAAqB,MAAA,EAAQ,KAAA,EAAO,cAAA,GAAiB,MAAO,EAAA,EAAI;AAC5E,EAAA,MAAM,MAAA,GAAS,OAAO,KAAK,CAAA;AAC3B,EAAA,IAAI,CAAC,MAAA,EAAQ;AACT,IAAA,OAAO;AAAA,MACH,eAAA,EAAiB,IAAA;AAAA,MACjB,QAAA,EAAU;AAAA,KACd;AAAA,EACJ;AACA,EAAA,MAAM,GAAA,uBAAU,IAAA,EAAK;AACrB,EAAA,MAAM,IAAA,GAAO,IAAI,OAAA,EAAQ,GAAI,IAAI,IAAA,CAAK,MAAM,EAAE,OAAA,EAAQ;AACtD,EAAA,MAAM,kBAAkB,IAAA,GAAO,cAAA;AAE/B,EAAA,MAAM,WAAW,eAAA,GAAkB,CAAA,GAAI,KAAK,KAAA,CAAA,CAAO,cAAA,GAAiB,QAAQ,GAAI,CAAA;AAChF,EAAA,OAAO,EAAE,iBAAiB,QAAA,EAAS;AACvC;;AC/BO,SAAS,cAAA,CAAe;AAAA,EAC7B,gBAAA;AAAA,EACA,SAAA;AAAA,EACA,WAAA;AAAA,EACA,2BAAA;AAAA,EACA;AACF,CAAA,EAMG;AACD,EAAA,OAAO,eAAe,MAAA,CACpB,GAAA,EACA,GAAA,EACe;AACf,IAAA,MAAM,SAAS,GAAA,CAAI,IAAA;AACnB,IAAAD,iBAAA,CAAgB,MAAM,CAAA;AAEtB,IAAA,MAAM,UAAA,GAAa,gBAAA,CAAiB,OAAA,EAAS,MAAA,CAAO,KAAK,CAAA;AACzD,IAAA,MAAM,oBAAA,GAAuB,MAAM,gBAAA,CAAiB,UAAU,CAAA;AA0B9D,IAAA,IAAI,oBAAA,EAAsB;AACxB,MAAA,MAAM,YAAA,GAAe,2BAAA;AAAA,QACnB,oBAAA,CAAqB;AAAA,OACvB;AAKA,MAAA,IAAI,aAAa,eAAA,EAAiB;AAChC,QAAA,MAAM,UAAA,EAAW;AACjB,QAAA,GAAA,CAAI,IAAA,CAAK,EAAE,OAAA,EAAS,IAAA,EAAM,CAAA;AAC1B,QAAA;AAAA,MACF;AAIA,MAAA,MAAM,EAAE,eAAA,EAAiB,QAAA,EAAS,GAAI,oBAAA;AAAA,QACpC,YAAA;AAAA,QACA;AAAA,OACF;AACA,MAAA,IAAI,CAAC,eAAA,EAAiB;AACpB,QAAA,MAAM,IAAI,SAAA;AAAA,UACR,GAAA;AAAA,UACA,eAAe,QAAQ,CAAA,0BAAA;AAAA,SACzB;AAAA,MACF;AAEA,MAAA,IAAI;AACF,QAAA,MAAM,kBAAA,CAAmB,qBAAqB,MAAM,CAAA;AAAA,MACtD,SAAS,CAAA,EAAY;AACnB,QAAA,wBAAA,CAAyB,CAAC,CAAA;AAAA,MAC5B;AAAA,IACF;AAEA,IAAA,MAAM,UAAA,GAAa,MAAM,wBAAA,CAAyB,MAAA,EAAQ,gBAAgB,CAAA;AAE1E,IAAA,MAAM,sBAAsB,MAAM,gCAAA;AAAA,MAChC;AAAA,QACE,gBAAgB,MAAA,CAAO,QAAA;AAAA,QACvB,eAAA,EAAiB,sBAAsB,IAAA,GAAO,KAAA;AAAA,QAC9C,uBAAA,EAAyB,IAAA;AAAA,QACzB,mBAAA,EAAqB;AAAA;AACvB,KACF;AAEA,IAAA,IAAI;AACF,MAAA,MAAM,kBAAA,CAAmB,EAAE,GAAA,EAAK,UAAA,EAAY,CAAA;AAC5C,MAAA,MAAM,OAAO,MAAM,UAAA;AAAA,QACjB,UAAA;AAAA,QACA,mBAAA;AAAA;AAAA;AAAA,QAGA;AAAA,OACF;AACA,MAAA,MAAM,iBAAA,CAAkB,EAAE,GAAA,EAAK,UAAA,EAAY,MAAM,CAAA;AAAA,IACnD,SAAS,CAAA,EAAY;AACnB,MAAA,wBAAA,CAAyB,CAAC,CAAA;AAAA,IAC5B;AAIA,IAAA,IAAI,mBAAA,EAAqB;AACvB,MAAA,GAAA,CAAI,IAAA,CAAK,EAAE,OAAA,EAAS,IAAA,EAAM,CAAA;AAC1B,MAAA;AAAA,IACF;AAEA,IAAA,MAAM,mBAAmB,MAAM,2BAAA;AAAA,MAC7B,MAAA,CAAO,KAAA;AAAA,MACP;AAAA,KACF;AACA,IAAA,IAAI;AACF,MAAA,MAAM,0BAAA,CAA2B,OAAO,KAAA,EAAO;AAAA,QAC7C,IAAA,EAAM,SAAA;AAAA,QACN,IAAI,MAAA,CAAO,KAAA;AAAA,QACX,GAAG,2BAAA,CAA4B,EAAE,gBAAA,EAAkB;AAAA,OACpD,CAAA;AAAA,IACH,SAAS,CAAA,EAAY;AACnB,MAAA,OAAA,CAAQ,KAAA,CAAM,4CAA4C,CAAC,CAAA;AAC3D,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,0CAA0C,CAAA;AAAA,IACrE;AAEA,IAAA,GAAA,CAAI,IAAA,CAAK,EAAE,OAAA,EAAS,IAAA,EAAM,CAAA;AAAA,EAC5B,CAAA;AACF;AAEA,SAASA,kBAAgB,IAAA,EAAoB;AAC3C,EAAA,gBAAA,CAAiB,IAAI,CAAA;AACrB,EAAA,uBAAA,CAAwB,IAAI,CAAA;AAC5B,EAAA,mBAAA,CAAoB,IAAI,CAAA;AAC1B;;ACnJO,SAAS,4BAAA,CAA6B;AAAA,EAC1C,SAAA;AAAA,EACA,WAAA;AAAA,EACA;AACH,CAAA,EAIG;AACC,EAAA,OAAO,eAAe,oBAAA,CAClB,GAAA,EACA,GAAA,EACa;AACb,IAAA,MAAM,IAAA,GAAO,GAAA,CAAI,IAAA,IAAQ,EAAC;AAC1B,IAAA,gBAAA,CAAiB,IAAI,CAAA;AAErB,IAAA,MAAM,eAAe,MAAM,gBAAA;AAAA,MACvB,gBAAA,CAAiB,OAAA,EAAS,IAAA,CAAK,KAAK;AAAA,KACxC;AAQA,IAAA,IAAI,CAAC,YAAA,EAAc;AACf,MAAA,MAAM,UAAA,EAAW;AACjB,MAAA,GAAA,CAAI,IAAA,CAAK,EAAE,OAAA,EAAS,IAAA,EAAM,CAAA;AAC1B,MAAA;AAAA,IACJ;AAEA,IAAA,MAAM,YAAA,GAAe,2BAAA,CAAqC,YAAA,CAAa,YAAY,CAAA;AACnF,IAAA,MAAM,EAAE,eAAA,EAAiB,QAAA,EAAS,GAAI,oBAAA,CAAqB,cAAc,qBAAqB,CAAA;AAC9F,IAAA,IAAI,CAAC,eAAA,EAAiB;AAClB,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,CAAA,YAAA,EAAe,QAAQ,CAAA,0BAAA,CAA4B,CAAA;AAAA,IAChF;AAEA,IAAA,MAAM,iBAAA,GAAoB,MAAM,uBAAA,CAAwB,IAAA,CAAK,OAAO,WAAW,CAAA;AAC/E,IAAA,IAAI;AACA,MAAA,MAAM,QAAQ,YAAA,CAAa,cAAA;AAC3B,MAAA,MAAM,sBAAA;AAAA,QACF,KAAA;AAAA,QACA;AAAA,UACI,IAAA,EAAM,SAAA;AAAA,UACN,EAAA,EAAI,KAAA;AAAA,UACJ,GAAG,4BAAA,CAA6B,EAAE,iBAAA,EAAmB;AAAA;AACzD,OACJ;AAAA,IACJ,SAAS,CAAA,EAAQ;AACb,MAAA,OAAA,CAAQ,KAAA,CAAM,wCAAwC,CAAC,CAAA;AACvD,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,sCAAsC,CAAA;AAAA,IACnE;AAEA,IAAA,GAAA,CAAI,IAAA,CAAK,EAAE,OAAA,EAAS,IAAA,EAAM,CAAA;AAAA,EAC9B,CAAA;AACJ;;AC9DA,eAAsB,aAAA,CAClB,KACA,GAAA,EACa;AACb,EAAA,MAAM,IAAA,GAAO,GAAA,CAAI,IAAA,IAAQ,EAAC;AAC1B,EAAA,eAAA,CAAgB,IAAI,CAAA;AAEpB,EAAA,MAAM,EAAE,KAAA,EAAO,QAAA,EAAS,GAAI,IAAA;AAC5B,EAAA,MAAM,EAAE,OAAM,GAAI,MAAM,YAA+B,KAAK,CAAA,CACvD,MAAM,MAAM;AACT,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,sCAAsC,CAAA;AAAA,EACnE,CAAC,CAAA;AAEL,EAAA,MAAM,UAAA,GAAa,gBAAA,CAAiB,OAAA,EAAS,KAAK,CAAA;AAClD,EAAA,MAAM,YAAA,GAAe,MAAM,gBAAA,CAAiB,UAAU,CAAA;AACtD,EAAA,IAAI,CAAC,YAAA,EAAc;AACf,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,sCAAsC,CAAA;AAAA,EACnE;AAEA,EAAA,MAAM,YAAA,GAAe,2BAAA,CAAqC,YAAA,CAAa,YAAY,CAAA;AAEnF,EAAA,MAAM,8BAAA,CAA+B,YAAY,YAAA,EAAc;AAAA;AAAA,IAE3D,eAAA,EAAiB,IAAA;AAAA;AAAA;AAAA,IAGjB,cAAA,EAAgB;AAAA,GACnB,CAAA;AAED,EAAA,GAAA,CAAI,IAAA,CAAK,EAAE,OAAA,EAAS,IAAA,EAAM,CAAA;AAC9B;AAEA,SAAS,gBAAgB,IAAA,EAAoB;AACzC,EAAA,oBAAA,CAAqB,IAAI,CAAA;AACzB,EAAA,uBAAA,CAAwB,IAAI,CAAA;AAC5B,EAAA,mBAAA,CAAoB,IAAI,CAAA;AAC5B;;AClCA,eAAsB,WAAA,CAClB,KACA,GAAA,EACa;AACb,EAAA,MAAM,EAAE,KAAA,EAAM,GAAI,GAAA,CAAI,IAAA;AACtB,EAAA,MAAM,EAAE,OAAM,GAAI,MAAM,YAA+B,KAAK,CAAA,CACvD,MAAM,MAAM;AACT,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,0CAA0C,CAAA;AAAA,EACvE,CAAC,CAAA;AAEL,EAAA,MAAM,UAAA,GAAa,gBAAA,CAAiB,OAAA,EAAS,KAAK,CAAA;AAClD,EAAA,MAAM,YAAA,GAAe,MAAM,gBAAA,CAAiB,UAAU,CAAA;AACtD,EAAA,IAAI,CAAC,YAAA,EAAc;AACf,IAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,0CAA0C,CAAA;AAAA,EACvE;AAEA,EAAA,MAAM,YAAA,GAAe,2BAAA,CAAqC,YAAA,CAAa,YAAY,CAAA;AAEnF,EAAA,MAAM,8BAAA,CAA+B,YAAY,YAAA,EAAc;AAAA,IAC3D,eAAA,EAAiB;AAAA,GACpB,CAAA;AAED,EAAA,MAAM,OAAO,MAAM,kBAAA,CAAmB,EAAE,EAAA,EAAI,YAAA,CAAa,QAAQ,CAAA;AAEjE,EAAA,MAAM,yBAAyB,EAAc,IAAA,EAAM,IAAA,CAAK,MAAM,CAAA;AAE9D,EAAA,GAAA,CAAI,IAAA,CAAK,EAAE,OAAA,EAAS,IAAA,EAAM,CAAA;AAC9B;;ACvCO,SAAS,uBAAuB,MAAA,EAAQ;AAC3C,EAAA,OAAO,MAAA;AACX;;ACAA,MAAM,cAAc,OAAA,CAAQ,GAAA,CAAI,cAAc,KAAA,CAAM,GAAG,KAAK,EAAC;AAE7D,MAAM,eAAA,GAAkBrB,IAAE,MAAA,CAAO;AAAA,EAC/B,KAAA,EAAOA,IAAE,MAAA;AACX,CAAC,CAAA;AAEM,MAAM,qBAAqB,sBAAA,CAAuB;AAAA,EACvD,KAAA,EAAO,CAAC,IAAA,KAAS;AACf,IAAA,MAAM,SAAA,GAAY,eAAA,CAAgB,KAAA,CAAM,IAAI,CAAA;AAC5C,IAAA,OAAO,SAAA,CAAU,KAAA;AAAA,EACnB,CAAA;AAAA,EACA,QAAA,EAAU,CAAC,IAAA,KAAS;AAClB,IAAA,MAAM,SAAA,GAAY,eAAA,CAAgB,KAAA,CAAM,IAAI,CAAA;AAC5C,IAAA,OAAO,SAAA,CAAU,KAAA;AAAA,EACnB,CAAA;AAAA,EACA,OAAA,EAAS,CAAC,IAAA,KAAS;AACjB,IAAA,MAAM,SAAA,GAAY,eAAA,CAAgB,KAAA,CAAM,IAAI,CAAA;AAC5C,IAAA,OAAO,WAAA,CAAY,QAAA,CAAS,SAAA,CAAU,KAAK,CAAA;AAAA,EAC7C;AACF,CAAC,CAAA;AAEwBA,IAAE,MAAA,CAAO;AAAA,EAChC,OAAA,EAASA,IAAE,MAAA,CAAO;AAAA,IAChB,QAAQA,GAAA,CACL,KAAA;AAAA,MACCA,IAAE,MAAA,CAAO;AAAA,QACP,KAAA,EAAOA,IAAE,MAAA,EAAO;AAAA,QAChB,QAAA,EAAUA,IAAE,OAAA;AAAQ,OACrB;AAAA,KACH,CACC,GAAA,CAAI,CAAA,EAAG,mFAAmF,CAAA;AAAA,IAC7F,KAAA,EAAOA,IAAE,MAAA;AAAO,GACjB;AACH,CAAC;AAmCwBA,IAAE,MAAA,CAAO;AAAA,EAChC,OAAA,EAASA,IAAE,MAAA,CAAO;AAAA,IAChB,KAAA,EAAOA,IAAE,MAAA,EAAO;AAAA,IAChB,cAAA,EAAgBA,IAAE,OAAA;AAAQ,GAC3B;AACH,CAAC;AA0ByBA,IAAE,MAAA,CAAO;AAAA,EACjC,OAAA,EAASA,IAAE,MAAA,CAAO;AAAA,IAChB,QAAA,EAAUA,IAAE,MAAA,EAAO;AAAA,IACnB,OAAOA,GAAA,CAAE,MAAA,EAAO,CAAE,KAAA,GAAQ,QAAA,EAAS;AAAA,IACnC,QAAA,EAAUA,GAAA,CAAE,OAAA,EAAQ,CAAE,QAAA;AAAS,GAChC;AACH,CAAC;;AC1GM,MAAM,2BAAA,GAA6D,CAAC,EAAE,gBAAA,EAAiB,MAAO;AAAA,EACnG,OAAA,EAAS,mBAAA;AAAA,EACT,IAAA,EAAM,8CAA8C,gBAAgB,CAAA,CAAA;AAAA,EACpE,IAAA,EAAM;AAAA;AAAA,iBAAA,EAEW,gBAAgB,CAAA;AAAA,IAAA;AAEnC,CAAA,CAAA;AAEO,MAAM,4BAAA,GAA+D,CAAC,EAAE,iBAAA,EAAkB,MAAO;AAAA,EACtG,OAAA,EAAS,gBAAA;AAAA,EACT,IAAA,EAAM,gDAAgD,iBAAiB,CAAA,CAAA;AAAA,EACvE,IAAA,EAAM;AAAA;AAAA,iBAAA,EAEW,iBAAiB,CAAA;AAAA,IAAA;AAEpC,CAAA,CAAA;;ACHA,MAAM,qBAAA,GAAwB,kBAAA;AAG9B,MAAM,gCAAA,GAAkE,2BAAA;AAExE,MAAM,iCAAA,GAAoE,4BAAA;AAG1E,MAAM,SAAA,GAA4B;AAAA,EAC9B,IAAA,EAAM,WAAA;AAAA,EACN,KAAA,EAAO;AACX,CAAA;AAEA,MAAM,MAAA,GAAyB;AAAA,EAC3B,EAAA,EAAI,OAAA;AAAA,EACJ,WAAA,EAAa,oBAAA;AAAA,EACb,YAAA,GAAe;AACX,IAAA,MAAM,SAAS,MAAA,EAAO;AAEtB,IAAA,MAAM,UAAA,GAAa,aAAA,CAAc,aAAA,EAAe,CAAA;AAChD,IAAA,MAAA,CAAO,IAAA,CAAK,UAAU,UAAU,CAAA;AAEhC,IAAA,MAAM,WAAA,GAAc,cAAc,cAAA,CAAe;AAAA,MAC7C,gBAAA,EAAkB,qBAAA;AAAA,MAClB,SAAA;AAAA,MACA,WAAA,EAAa,qBAAA;AAAA,MACb,2BAAA,EAA6B,gCAAA;AAAA,MAC7B,qBAAqB,GAAA,CAAI;AAAA,KAC5B,CAAC,CAAA;AACF,IAAA,MAAA,CAAO,IAAA,CAAK,WAAW,WAAW,CAAA;AAElC,IAAA,MAAM,yBAAA,GAA4B,cAAc,4BAAA,CAA6B;AAAA,MACzE,SAAA;AAAA,MACA,WAAA,EAAa,iBAAA;AAAA,MACb,4BAAA,EAA8B;AAAA,KACjC,CAAC,CAAA;AACF,IAAA,MAAA,CAAO,IAAA,CAAK,2BAA2B,yBAAyB,CAAA;AAEhE,IAAA,MAAA,CAAO,IAAA,CAAK,iBAAA,EAAmB,aAAA,CAAc,aAAa,CAAC,CAAA;AAC3D,IAAA,MAAA,CAAO,IAAA,CAAK,eAAA,EAAiB,aAAA,CAAc,WAAW,CAAC,CAAA;AAEvD,IAAA,OAAO,MAAA;AAAA,EACX;AACJ,CAAA;;ACtDA,MAAM,SAAA,GAAY;AAAA,EAChBuB;AACF,CAAA;AAEA,MAAMH,WAAS,MAAA,EAAO;AAGtB,KAAA,MAAW,YAAY,SAAA,EAAW;AAChC,EAAA,MAAM,EAAE,cAAa,GAAI,QAAA;AACzB,EAAA,MAAM,cAAA,GAAiB,aAAa,QAAQ,CAAA;AAC5C,EAAAA,QAAA,CAAO,GAAA,CAAI,CAAA,CAAA,EAAI,QAAA,CAAS,EAAE,IAAI,cAAc,CAAA;AAC5C,EAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,WAAA,EAAO,QAAA,CAAS,WAAW,CAAA,kBAAA,CAAoB,CAAA;AAC7D;;ACRA,MAAMA,QAAA,GAAS,QAAQ,MAAA,EAAO;AAE9BA,QAAA,CAAO,GAAA,CAAI,KAAA,EAAO,IAAA,EAAM,EAAE,CAAA;AAC1BA,QAAA,CAAO,IAAA,CAAK,SAAA,EAAW,IAAA,EAAM,MAAM,CAAA;AACnCA,QAAA,CAAO,GAAA,CAAI,KAAKI,QAAe,CAAA;;ACVxB,MAAM,kBAAkB,gBAAA,CAAiB,OAAA;AACzC,MAAM,6BAA6B,gBAAA,CAAiB,yBAAA;;ACIpD,MAAM,UAAA,GAAa,OAAO,OAAA,EAA0B,QAAA,EAA4B,OAAA,KAAiB;AACtG,EAAA,IAAI;AACF,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,KAAA,CAAM,OAAA,CAAQ,IAAI,CAAA;AACvC,IAAA,MAAM,EAAE,EAAA,EAAI,KAAA,EAAO,MAAA,EAAQ,iBAAgB,GAAI,OAAA;AAE/C,IAAA,IAAI,CAAC,KAAA,EAAO;AACV,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,sCAAsC,CAAA;AAAA,IACjE;AAGA,IAAA,MAAM,aAAA,GAAwC;AAAA,MAC5C,WAAA,EAAa,WAAA;AAAA,MACb,UAAA,EAAY,UAAA;AAAA,MACZ,oBAAA,EAAsB,UAAA;AAAA,MACtB,YAAA,EAAc,YAAA;AAAA,MACd,YAAA,EAAc,WAAA;AAAA,MACd,SAAA,EAAW,WAAA;AAAA,MACX,QAAA,EAAU,WAAA;AAAA,MACV,SAAA,EAAW,WAAA;AAAA,MACX,WAAA,EAAa,QAAA;AAAA,MACb,QAAA,EAAU;AAAA,KACZ;AAEA,IAAA,MAAM,cAAA,GAAiB,aAAA,CAAc,MAAM,CAAA,IAAK,MAAA,IAAU,SAAA;AAG1D,IAAA,MAAMlB,uBAAA,CAAsB;AAAA,MAC1B,KAAA;AAAA,MACA,SAAA,EAAW,cAAA;AAAA,MACX,iBAAA,EAAmB,eAAA;AAAA,MACnB,OAAA,EAAS;AAAA,OACR,OAAO,CAAA;AAEV,IAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,mBAAA,EAAsB,KAAK,CAAA,YAAA,EAAe,cAAc,CAAA,CAAE,CAAA;AAEtE,IAAA,OAAO,QAAA,CAAS,OAAO,GAAG,CAAA,CAAE,KAAK,EAAE,QAAA,EAAU,MAAM,CAAA;AAAA,EACrD,SAAS,GAAA,EAAK;AACZ,IAAA,OAAA,CAAQ,KAAA,CAAM,sBAAsB,GAAG,CAAA;AACvC,IAAA,IAAI,eAAe,SAAA,EAAW;AAC5B,MAAA,OAAO,QAAA,CAAS,MAAA,CAAO,GAAA,CAAI,UAAU,CAAA,CAAE,KAAK,EAAE,KAAA,EAAO,GAAA,CAAI,OAAA,EAAS,CAAA;AAAA,IACpE,CAAA,MAAO;AACL,MAAA,OAAO,QAAA,CAAS,OAAO,GAAG,CAAA,CAAE,KAAK,EAAE,KAAA,EAAO,sCAAsC,CAAA;AAAA,IAClF;AAAA,EACF;AACF,CAAA;AAMO,MAAM,qBAAA,GAA4C,CAAC,gBAAA,KAAqB;AAC7E,EAAA,gBAAA,CAAiB,OAAO,cAAc,CAAA;AACtC,EAAA,gBAAA,CAAiB,GAAA,CAAI,eAAe,OAAA,CAAQ,GAAA,CAAI,EAAE,IAAA,EAAM,kBAAA,EAAoB,CAAC,CAAA;AAC7E,EAAA,OAAO,gBAAA;AACT,CAAA;;ACtDA,eAAsB,uBAAA,CAAwB,GAAA,EAAU,GAAA,EAAU,OAAA,EAAc;AAC9E,EAAA,IAAI;AACF,IAAA,MAAM,EAAE,eAAe,aAAA,EAAe,IAAA,EAAM,OAAO,QAAA,EAAU,OAAA,KAAY,GAAA,CAAI,IAAA;AAE7E,IAAA,IAAI,CAAC,iBAAiB,CAAC,IAAA,IAAQ,CAAC,KAAA,IAAS,CAAC,QAAA,IAAY,CAAC,OAAA,EAAS;AAC9D,MAAA,MAAM,IAAI,SAAA,CAAU,GAAA,EAAK,iCAAiC,CAAA;AAAA,IAC5D;AAEA,IAAA,MAAM,MAAA,GAAS,MAAM,eAAA,CAAgB;AAAA,MACnC,aAAA;AAAA,MACA,aAAA;AAAA,MACA,IAAA;AAAA,MACA,KAAA;AAAA,MACA,QAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAA,GAAA,CAAI,IAAA,CAAK;AAAA,MACP,SAAS,MAAA,CAAO,OAAA;AAAA,MAChB,OAAO,MAAA,CAAO,KAAA;AAAA,MACd,YAAA,EAAc,OAAO,eAAA,EAAiB,EAAA;AAAA,MACtC,iBAAiB,MAAA,CAAO;AAAA,KACzB,CAAA;AAAA,EACH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,6BAA6B,KAAK,CAAA;AAEhD,IAAA,IAAI,iBAAiB,SAAA,EAAW;AAC9B,MAAA,GAAA,CAAI,MAAA,CAAO,MAAM,UAAU,CAAA,CAAE,KAAK,EAAE,KAAA,EAAO,KAAA,CAAM,OAAA,EAAS,CAAA;AAAA,IAC5D,CAAA,MAAO;AACL,MAAA,GAAA,CAAI,OAAO,GAAG,CAAA,CAAE,KAAK,EAAE,KAAA,EAAO,yBAAyB,CAAA;AAAA,IACzD;AAAA,EACF;AACF;;ACzBA,MAAM,OAA2B,CAAA,CAAA,KAAK,CAAA;AAEtC,MAAM,sCAAA,GAAyC,IAAA;AAE/C,MAAMc,QAAA,GAAS,QAAQ,MAAA,EAAO;AAG9B,MAAM,yBAAA,GAA4B,iCAAiCK,0BAAsC,CAAA;AACzGL,QAAA,CAAO,IAAA;AAAA,EACL,mBAAA;AAAA,EACA,CAAC,IAAA,EAAM,GAAG,yBAAyB,CAAA;AAAA,EACnC,aAAA;AAAA,IACE,CACE,KACA,GAAA,KACG;AACH,MAAA,MAAM,OAAA,GAAU;AAAA,QACd,IAAA,EAAM,sBAAA,CAAuB,GAAA,CAAI,IAAI,CAAA;AAAA,QACrC,QAAA,EAAU;AAAA,UACR,MAAMlD,QAAA,CAAO;AAAA;AACf,OACF;AACA,MAAA,OAAOwD,eAAA,CAAuB,GAAA,EAAK,GAAA,EAAK,OAAO,CAAA;AAAA,IACjD;AAAA;AAEJ,CAAA;AACA,MAAM,oBAAA,GAAuB,iCAAiCC,qBAAiC,CAAA;AAC/FP,QAAA,CAAO,IAAA;AAAA,EACL,eAAA;AAAA,EACA,CAAC,IAAA,EAAM,GAAG,oBAAoB,CAAA;AAAA,EAC9B,aAAA;AAAA,IACE,CACE,KACA,GAAA,KACG;AACH,MAAA,MAAM,OAAA,GAAU;AAAA,QACd,IAAA,EAAM,sBAAA,CAAuB,GAAA,CAAI,IAAI,CAAA;AAAA,QACrC,UAAU;AACV,OACF;AACA,MAAA,OAAOQ,UAAA,CAAkB,GAAA,EAAK,GAAA,EAAK,OAAO,CAAA;AAAA,IAC5C;AAAA;AAEJ,CAAA;AACA,MAAM,yBAAA,GAA4B,iCAAiC,sCAAsC,CAAA;AACzGR,QAAA,CAAO,IAAA;AAAA,EACL,uBAAA;AAAA,EACA,CAAC,IAAA,EAAM,GAAG,yBAAyB,CAAA;AAAA,EACnC,aAAA;AAAA,IACE,CACE,KACA,GAAA,KACG;AACH,OAAgB;AAAA,QACd,IAAA,EAAM,sBAAA,CAAuB,GAAA,CAAI,IAAI,CAGvC;AACA,MAAA,OAAOS,uBAAA,CAAuB,GAAA,EAAK,GAAY,CAAA;AAAA,IACjD;AAAA;AAEJ,CAAA;;ACpEA,MAAM,MAAA,GAAS,QAAQ,MAAA,EAAO;AAC9B,MAAM,aAAa,gCAAA,EAAiC;AAEpD,MAAA,CAAO,GAAA,CAAI,GAAA,EAAK,UAAA,EAAY,SAAU,MAAM,GAAA,EAAK;AAC/C,EAAA,GAAA,CAAI,MAAA,CAAO,GAAG,CAAA,CAAE,IAAA,EAAK;AACvB,CAAC,CAAA;AAED,MAAA,CAAO,GAAA,CAAI,OAAA,EAAS,UAAA,EAAY1D,QAAI,CAAA;AACpC,MAAA,CAAO,GAAA,CAAI,aAAA,EAAe,UAAA,EAAY2D,QAAU,CAAA;AAIhD,MAAA,CAAO,IAAIC,QAAI,CAAA;;ACXf,MAAM,MAAM,OAAA,EAAQ;AAIpB,GAAA,CAAI,GAAA,CAAI,KAAKC,MAAW,CAAA;AAGxB,GAAA,CAAI,GAAA,CAAI,CAAC,GAAA,EAAK,IAAA,EAAM,KAAK,IAAA,KAAS;AAGhC,EAAA,IAAI,IAAI,WAAA,EAAa;AAAE,IAAA,OAAO,KAAK,GAAG,CAAA;AAAA,EAAE;AAExC,EAAA,IAAI,eAAe,SAAA,EAAW;AAC5B,IAAA,OAAO,GAAA,CAAI,MAAA,CAAO,GAAA,CAAI,UAAU,CAAA,CAAE,IAAA,CAAK,EAAE,OAAA,EAAS,GAAA,CAAI,OAAA,EAAS,IAAA,EAAM,GAAA,CAAI,MAAM,CAAA;AAAA,EACjF;AAUA,EAAA,OAAO,KAAK,GAAG,CAAA;AACjB,CAAC,CAAA;;AC7BD,WAAA,CAAY;AAAA,EACV,GAAA,EAAKC,oBAAA;AAAA,EACL,KAAA,EAAO;AACT,CAAC,CAAA;;ACLD,MAAM,YAAA,GAAe,QAAQ,GAAA,CAAI,6BAAA;AACjC,MAAM,WAAA,GAAc,OAAO,IAAA,CAAK,OAAA,CAAQ,IAAI,4BAAA,EAA+B,QAAQ,CAAA,CAAE,QAAA,CAAS,OAAO,CAAA;AACrG,MAAM,WAAA,GAAc,QAAQ,GAAA,CAAI,4BAAA;AAEhC,MAAM,mBAAA,GAAsB,IAAI,uBAAA,CAAwB;AAAA,EACtD,WAAA,EAAa;AAAA,IACX,YAAA,EAAc,YAAA;AAAA,IACd,WAAA,EAAa;AAAA;AAEjB,CAAC,CAAA;AAED,eAAsB,UAAA,GAAa;AACjC,EAAA,MAAM,CAAC,QAAQ,CAAA,GAAI,MAAM,oBAAoB,SAAA,CAAU;AAAA,IACrD,QAAA,EAAU,cAAc,WAAW,CAAA,CAAA;AAAA,IACnC,UAAA,EAAY;AAAA,MACV;AAAA,QACE,SAAA,EAAW,YAAA;AAAA,QACX,OAAA,EAAS;AAAA;AACX,KACF;AAAA;AAAA,IAEA,UAAA,EAAY;AAAA,MACV;AAAA,QACE,IAAA,EAAM;AAAA;AACR,KACF;AAAA,IACA,OAAA,EAAS;AAAA,MACP;AAAA,QACE,IAAA,EAAM;AAAA;AACR;AACF,GACD,CAAA;AAED,EAAA,IAAI,yBAAgC,EAAC;AACrC,EAAA,IAAI,UAAU,IAAA,EAAM;AAClB,IAAA,sBAAA,GAAyB,QAAA,CAAS,IAAA,CAAK,GAAA,CAAI,CAAC,GAAA,KAAQ;AAClD,MAAA,IAAI,GAAA,CAAI,eAAA,IAAmB,GAAA,CAAI,YAAA,EAAc;AAC3C,QAAA,OAAO;AAAA,UACL,MAAA,EAAQ,GAAA,CAAI,eAAA,CAAgB,CAAC,CAAA,CAAE,KAAA;AAAA,UAC/B,QAAA,EAAU,GAAA,CAAI,YAAA,CAAa,CAAC,CAAA,CAAE;AAAA,SAChC;AAAA,MACF;AAAA,IACF,CAAC,CAAA;AAAA,EACH,CAAA,MAAO;AACL,IAAA,MAAM,IAAI,MAAM,mCAAmC,CAAA;AAAA,EACrD;AAEA,EAAA,OAAO,sBAAA;AACT;AAEA,eAAsB,iBAAA,GAAoB;AACxC,EAAA,MAAM,UAAA,GAAa,MAAM,iBAAA,EAAkB;AAC3C,EAAA,MAAM,yBAAA,GAA4B,MAAM,4BAAA,EAA6B;AAErE,EAAA,OAAO;AAAA,IACL,UAAA;AAAA,IACA;AAAA,GACF;AACF;AAEA,eAAe,iBAAA,GAAoB;AACjC,EAAA,MAAM,CAAC,QAAQ,CAAA,GAAI,MAAM,oBAAoB,SAAA,CAAU;AAAA,IACrD,QAAA,EAAU,cAAc,WAAW,CAAA,CAAA;AAAA,IACnC,UAAA,EAAY;AAAA,MACV;AAAA,QACE,SAAA,EAAW,YAAA;AAAA;AAAA,QACX,OAAA,EAAS;AAAA;AACX,KACF;AAAA,IACA,OAAA,EAAS;AAAA,MACP;AAAA,QACE,IAAA,EAAM;AAAA;AACR;AACF,GACD,CAAA;AACD,EAAA,IAAI,UAAA,GAAa,CAAA;AACjB,EAAA,IAAI,UAAU,IAAA,EAAM;AAElB,IAAA,UAAA,GAAa,QAAA,CAAS,SAAS,IAAA,CAAK,CAAC,EAAE,YAAA,CAAa,CAAC,EAAE,KAAK,CAAA;AAAA,EAC9D,CAAA,MAAO;AACL,IAAA,MAAM,IAAI,MAAM,mCAAmC,CAAA;AAAA,EACrD;AACA,EAAA,OAAO,UAAA;AACT;AAEA,eAAe,4BAAA,GAA+B;AAC5C,EAAA,MAAM,CAAC,QAAQ,CAAA,GAAI,MAAM,oBAAoB,SAAA,CAAU;AAAA,IACrD,QAAA,EAAU,cAAc,WAAW,CAAA,CAAA;AAAA,IAEnC,UAAA,EAAY;AAAA,MACV;AAAA,QACE,SAAA,EAAW,UAAA;AAAA,QACX,OAAA,EAAS;AAAA;AACX,KACF;AAAA,IACA,QAAA,EAAU;AAAA,MACR;AAAA,QACE,SAAA,EAAW;AAAA,UACT,aAAA,EAAe;AAAA,SACjB;AAAA,QACA,IAAA,EAAM;AAAA;AACR,KACF;AAAA,IACA,UAAA,EAAY;AAAA,MACV;AAAA,QACE,IAAA,EAAM;AAAA;AACR,KACF;AAAA,IACA,OAAA,EAAS;AAAA,MACP;AAAA,QACE,IAAA,EAAM;AAAA;AACR;AACF,GACD,CAAA;AAED,EAAA,IAAI,kBAAA;AACJ,EAAA,IAAI,2BAAA;AAEJ,EAAA,IAAI,QAAA,EAAU,IAAA,IAAQ,QAAA,CAAS,IAAA,CAAK,WAAW,CAAA,EAAG;AAEhD,IAAA,kBAAA,GAAqB,SAAS,IAAA,CAAK,CAAC,CAAA,CAAE,YAAA,CAAa,CAAC,CAAA,CAAE,KAAA;AAEtD,IAAA,2BAAA,GAA8B,SAAS,IAAA,CAAK,CAAC,CAAA,CAAE,YAAA,CAAa,CAAC,CAAA,CAAE,KAAA;AAE/D,IAAA,IAAI,sBAAsB,2BAAA,EAA6B;AACrD,MAAA,kBAAA,GAAqB,SAAS,kBAAkB,CAAA;AAChD,MAAA,2BAAA,GAA8B,SAAS,2BAA2B,CAAA;AAClE,MAAA,IAAI,kBAAA,KAAuB,CAAA,IAAK,2BAAA,KAAgC,CAAA,EAAG;AACjE,QAAA,OAAO,GAAA;AAAA,MACT;AACA,MAAA,OAAA,CAAQ,KAAA,CAAM,EAAE,kBAAA,EAAoB,2BAAA,EAA6B,CAAA;AAEjE,MAAA,MAAM,MAAA,GAAA,CAAW,kBAAA,GAAqB,2BAAA,IAA+B,2BAAA,GAA+B,GAAA;AACpG,MAAA,OAAO,MAAA,CAAO,QAAQ,CAAC,CAAA;AAAA,IACzB;AAAA,EACF,CAAA,MAAO;AACL,IAAA,OAAO,GAAA;AAAA,EACT;AACF;;AClIO,MAAM,mBAAA,GAAkD,OAAO,KAAA,EAAO,OAAA,KAAY;AACvF,EAAA,MAAM,MAAA,GAAS,IAAI,IAAA,CAAK,IAAA,CAAK,KAAK,CAAA;AAClC,EAAA,MAAA,CAAO,WAAA,CAAY,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAE7B,EAAA,MAAM,YAAA,GAAe,IAAI,IAAA,CAAK,MAAM,CAAA;AACpC,EAAA,YAAA,CAAa,UAAA,CAAW,YAAA,CAAa,UAAA,EAAW,GAAI,CAAC,CAAA;AAErD,EAAA,IAAI;AACF,IAAA,MAAM,eAAA,GAAkB,MAAM,OAAA,CAAQ,QAAA,CAAS,WAAW,SAAA,CAAU;AAAA,MAClE,KAAA,EAAO;AAAA,QACL,IAAA,EAAM;AAAA,UACJ,MAAA,EAAQ;AAAA;AACV;AACF,KACD,CAAA;AAED,IAAA,MAAM,YAAY,MAAM,OAAA,CAAQ,SAAS,IAAA,CAAK,KAAA,CAAM,EAAE,CAAA;AAGtD,IAAA,MAAM,aAAA,GAAgB,MAAM,OAAA,CAAQ,QAAA,CAAS,KAAK,KAAA,CAAM;AAAA,MACtD,KAAA,EAAO;AAAA,QACL,oBAAoB,kBAAA,CAAmB;AAAA;AACzC,KACD,CAAA;AAED,IAAA,IAAI,SAAA,GAAY,SAAA;AAChB,IAAA,IAAI,aAAA,GAAgB,aAAA;AACpB,IAAA,IAAI,eAAA,EAAiB;AACnB,MAAA,SAAA,IAAa,eAAA,CAAgB,SAAA;AAC7B,MAAA,aAAA,IAAiB,eAAA,CAAgB,aAAA;AAAA,IACnC;AAEA,IAAA,IAAI,YAAA;AACJ,IAAA,QAAQ,iBAAiB,EAAA;AAAI,MAC3B,KAAK,QAAA;AACH,QAAA,YAAA,GAAe,MAAM,uBAAA,EAAwB;AAC7C,QAAA;AAAA,MACF,KAAK,cAAA;AACH,QAAA,YAAA,GAAe,MAAM,6BAAA,EAA8B;AACnD,QAAA;AAAA,MACF;AACE,QAAA,MAAM,IAAI,KAAA,CAAM,CAAA,+BAAA,EAAkC,gBAAA,CAAiB,EAAE,CAAA,CAAE,CAAA;AAAA;AAG3E,IAAA,MAAM,EAAE,UAAA,EAAY,yBAAA,EAA0B,GAAI,MAAM,iBAAA,EAAkB;AAE1E,IAAA,IAAI,UAAA,GAAa,MAAM,OAAA,CAAQ,QAAA,CAAS,WAAW,UAAA,CAAW;AAAA,MAC5D,KAAA,EAAO;AAAA,QACL,IAAA,EAAM;AAAA;AACR,KACD,CAAA;AAED,IAAA,IAAI,CAAC,UAAA,EAAY;AACf,MAAA,OAAA,CAAQ,IAAI,gDAAgD,CAAA;AAC5D,MAAA,UAAA,GAAa,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAA,CAAW,MAAA,CAAO;AAAA,QACpD,IAAA,EAAM;AAAA,UACJ,IAAA,EAAM,MAAA;AAAA,UACN,UAAA;AAAA,UACA,yBAAA;AAAA,UACA,SAAA;AAAA,UACA,aAAA;AAAA,UACA,SAAA;AAAA,UACA,aAAA;AAAA,UACA;AAAA;AACF,OACD,CAAA;AAAA,IACH,CAAA,MAAO;AACL,MAAA,OAAA,CAAQ,IAAI,4CAA4C,CAAA;AACxD,MAAA,UAAA,GAAa,MAAM,OAAA,CAAQ,QAAA,CAAS,UAAA,CAAW,MAAA,CAAO;AAAA,QACpD,KAAA,EAAO;AAAA,UACL,IAAI,UAAA,CAAW;AAAA,SACjB;AAAA,QACA,IAAA,EAAM;AAAA,UACJ,UAAA;AAAA,UACA,yBAAA;AAAA,UACA,SAAA;AAAA,UACA,aAAA;AAAA,UACA,SAAA;AAAA,UACA,aAAA;AAAA,UACA;AAAA;AACF,OACD,CAAA;AAAA,IACH;AACA,IAAA,MAAM,OAAA,GAAU,MAAM,UAAA,EAAW;AAEjC,IAAA,KAAA,MAAW,UAAU,OAAA,EAAS;AAC5B,MAAA,IAAI,WAAW,MAAA,CAAO,QAAA;AACtB,MAAA,IAAI,OAAO,MAAA,CAAO,QAAA,KAAa,QAAA,EAAU;AACvC,QAAA,QAAA,GAAW,QAAA,CAAS,OAAO,QAAQ,CAAA;AAAA,MACrC;AACA,MAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,cAAA,CAAe,MAAA,CAAO;AAAA,QAC3C,KAAA,EAAO;AAAA,UACL,SAAA,EAAW;AAAA,YACT,IAAA,EAAM,MAAA;AAAA,YACN,MAAM,MAAA,CAAO;AAAA;AACf,SACF;AAAA,QACA,MAAA,EAAQ;AAAA,UACN,IAAA,EAAM,MAAA;AAAA,UACN,MAAM,MAAA,CAAO,MAAA;AAAA,UACb,QAAA;AAAA,UACA,cAAc,UAAA,CAAW;AAAA,SAC3B;AAAA,QACA,MAAA,EAAQ;AAAA,UACN;AAAA;AACF,OACD,CAAA;AAAA,IACH;AAEA,IAAA,OAAA,CAAQ,KAAA,CAAM,EAAE,UAAA,EAAY,CAAA;AAAA,EAC9B,SAAS,KAAA,EAAY;AACnB,IAAA,OAAA,CAAQ,KAAA,CAAM,mCAAmC,KAAK,CAAA;AACtD,IAAA,MAAM,OAAA,CAAQ,QAAA,CAAS,IAAA,CAAK,MAAA,CAAO;AAAA,MACjC,IAAA,EAAM;AAAA,QACJ,OAAA,EAAS,CAAA,+BAAA,EAAkC,KAAA,EAAO,OAAO,CAAA,CAAA;AAAA,QACzD,KAAA,EAAO;AAAA;AACT,KACD,CAAA;AAAA,EACH;AACF,CAAA;AAEA,eAAe,uBAAA,GAA0B;AACvC,EAAA,IAAI,YAAA,GAAe,CAAA;AACnB,EAAA,IAAI,MAAA,GAA8C;AAAA,IAChD,KAAA,EAAO,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKP,IAAA,EAAM;AAAA,GACR;AAEA,EAAA,IAAI,OAAA,GAAU,IAAA;AACd,EAAA,OAAO,OAAA,EAAS;AACd,IAAA,MAAM,mBAAA,GAAsB,MAAM,MAAA,CAAO,mBAAA,CAAoB,KAAK,MAAM,CAAA;AAExE,IAAA,KAAA,MAAW,WAAA,IAAe,oBAAoB,IAAA,EAAM;AAClD,MAAA,IAAI,WAAA,CAAY,SAAS,QAAA,EAAU;AACjC,QAAA,YAAA,IAAgB,WAAA,CAAY,MAAA;AAAA,MAC9B;AAAA,IACF;AAEA,IAAA,IAAI,oBAAoB,QAAA,EAAU;AAEhC,MAAA,MAAA,CAAO,iBAAiB,mBAAA,CAAoB,IAAA,CAAK,oBAAoB,IAAA,CAAK,MAAA,GAAS,CAAC,CAAA,CAAE,EAAA;AAAA,IACxF,CAAA,MAAO;AACL,MAAA,OAAA,GAAU,KAAA;AAAA,IACZ;AAAA,EACF;AAGA,EAAA,OAAO,YAAA,GAAe,GAAA;AACxB;AAEA,eAAe,6BAAA,GAAgC;AAG7C,EAAA,OAAO,CAAA;AACT;;ACpKA,WAAA,CAAY;AAAA,EACV,GAAA,EAAKA,aAAA;AAAA,EACL,KAAA,EAAO;AACT,CAAC,CAAA;;ACGD,MAAM,cAAc,YAAY;AAC9B,EAAA,MAAM,WAAA,EAAY;AAElB,EAAA,MAAM,IAAA,GAAO,aAAA,CAAcjE,QAAA,CAAO,IAAI,CAAA;AACtC,EAAA,GAAA,CAAI,GAAA,CAAI,QAAQ,IAAI,CAAA;AAEpB,EAAA,MAAM,MAAA,GAAS,IAAA,CAAK,YAAA,CAAa,GAAG,CAAA;AAIpC,EAAA,MAAA,CAAO,OAAO,IAAI,CAAA;AAElB,EAAA,MAAA,CAAO,EAAA,CAAG,OAAA,EAAS,CAAC,KAAA,KAAiC;AACnD,IAAA,IAAI,KAAA,CAAM,OAAA,KAAY,QAAA,EAAU,MAAM,KAAA;AACtC,IAAA,MAAM,OAAO,OAAO,IAAA,KAAS,QAAA,GAAW,OAAA,GAAU,OAAO,OAAA,GAAU,IAAA;AAEnE,IAAA,QAAQ,MAAM,IAAA;AAAM,MACpB,KAAK,QAAA;AACH,QAAA,OAAA,CAAQ,KAAA,CAAM,OAAO,+BAA+B,CAAA;AACpD,QAAA,OAAA,CAAQ,KAAK,CAAC,CAAA;AAAA,MAChB,KAAK,YAAA;AACH,QAAA,OAAA,CAAQ,KAAA,CAAM,OAAO,oBAAoB,CAAA;AACzC,QAAA,OAAA,CAAQ,KAAK,CAAC,CAAA;AAAA,MAChB;AACE,QAAA,MAAM,KAAA;AAAA;AACR,EACF,CAAC,CAAA;AAED,EAAA,MAAA,CAAO,EAAA,CAAG,aAAa,MAAM;AAC3B,IAAA,MAAM,IAAA,GAAO,OAAO,OAAA,EAAQ;AAC5B,IAAA,MAAM,OAAO,OAAO,IAAA,KAAS,WAAW,OAAA,GAAU,IAAA,GAAO,UAAU,IAAA,CAAK,IAAA;AACxE,IAAA,OAAA,CAAQ,GAAA,CAAI,yBAAyB,IAAI,CAAA;AAAA,EAC3C,CAAC,CAAA;AACH,CAAA;AAEA,WAAA,GAAc,KAAA,CAAM,CAAA,CAAA,KAAK,OAAA,CAAQ,KAAA,CAAM,CAAC,CAAC,CAAA;AAKzC,SAAS,cAAe,GAAA,EAAK;AAC3B,EAAA,MAAM,IAAA,GAAO,QAAA,CAAS,GAAA,EAAK,EAAE,CAAA;AAC7B,EAAA,IAAI,KAAA,CAAM,IAAI,CAAA,EAAG,OAAO,GAAA;AACxB,EAAA,IAAI,IAAA,IAAQ,GAAG,OAAO,IAAA;AACtB,EAAA,OAAO,KAAA;AACT"}