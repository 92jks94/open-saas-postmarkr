app OpenSaaS {
  wasp: {
    version: "^0.18.0"
  },

  title: "Postmarkr - Simple Mail Service",

  head: [
    "<link rel='icon' href='/favicon.ico' />",
    "<link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />",
    "<link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />",
    "<link rel='apple-touch-icon' sizes='180x180' href='/apple-touch-icon.png' />",
    "<link rel='manifest' href='/site.webmanifest' />",
    "<meta charset='utf-8' />",
    "<meta name='viewport' content='width=device-width, initial-scale=1.0' />",
    "<meta name='description' content='Postmarkr - Simple, reliable mail service for remote workers, startups, and small businesses. Send important documents, contracts, and packages with tracking and delivery confirmation.' />",
    "<meta name='author' content='Postmarkr' />",
    "<meta name='keywords' content='mail service, remote work, startup, small business, document delivery, business mail, package tracking, certified mail, business documents, contract delivery, startup mail, remote worker, business correspondence, mail tracking, document management' />",
    "<link rel='canonical' href='https://postmarkr.com' />",
    
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='Postmarkr - Simple Mail Service for Modern Businesses' />",
    "<meta property='og:site_name' content='Postmarkr' />",
    "<meta property='og:url' content='https://postmarkr.com' />",
    "<meta property='og:description' content='Simple, reliable mail service for remote workers, startups, and small businesses. Send important documents, contracts, and packages with tracking and delivery confirmation.' />",
    "<meta property='og:image' content='https://postmarkr.com/public-banner.webp' />",
    "<meta name='twitter:image' content='https://postmarkr.com/public-banner.webp' />",
    "<meta name='twitter:image:width' content='800' />",
    "<meta name='twitter:image:height' content='400' />",
    "<meta name='twitter:card' content='summary_large_image' />",
    "<meta name='twitter:title' content='Postmarkr - Simple Mail Service for Modern Businesses' />",
    "<meta name='twitter:description' content='Simple, reliable mail service for remote workers, startups, and small businesses. Send important documents, contracts, and packages with tracking and delivery confirmation.' />",
    
    // Google Analytics - Script loads and initializes in head for proper detection
    "<script async src='https://www.googletagmanager.com/gtag/js?id=G-6H2SB3GJDW'></script>",
    "<script>window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'G-6H2SB3GJDW');</script>",
    
    // Debug helper - logs when GA script loads for verification
    "<script>window.addEventListener('load', function() { console.log('üîç Google Tag loaded:', !!window.gtag); console.log('üîç DataLayer exists:', !!window.dataLayer); console.log('üîç GA Measurement ID: G-6H2SB3GJDW'); if(window.dataLayer) { console.log('üîç DataLayer contents:', window.dataLayer); } });</script>",
  ],

  // üîê Auth out of the box! https://wasp.sh/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // NOTE: If you decide to not use email auth, make sure to also delete the related routes and pages below.
      //   (RequestPasswordReset(Route|Page), PasswordReset(Route|Page), EmailVerification(Route|Page))
      email: {
        fromField: {
          name: "Postmarkr",
          email: "nathan@postmarkr.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email-and-pass/emails",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email-and-pass/emails",
        },
        userSignupFields: import { getEmailUserFields } from "@src/auth/userSignupFields",
      },
      // Uncomment to enable Google Auth (check https://wasp.sh/docs/auth/social-auth/google for setup instructions):
      // google: {
      //   userSignupFields: import { getGoogleUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getGoogleAuthConfig } from "@src/auth/userSignupFields",
      // },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/mail/create",
  },

  db: {
    // Run `wasp db seed` to seed the database with the seed functions below:
    seeds: [
      // Populates the database with a bunch of fake users to work with during development.
      import { seedMockUsers } from "@src/server/scripts/dbSeeds",
    ]
  },

  client: {
    rootComponent: import App from "@src/client/App",
  },

  server: {
    setupFn: import { setupServer } from "@src/server/setup",
    middlewareConfigFn: import { serverMiddlewareConfigFn } from "@src/server/setup",
  },

  emailSender: {
    provider: SendGrid, // Use Wasp's built-in SendGrid provider
    defaultFrom: {
      name: "Postmarkr",
      email: "nathan@postmarkr.com"
    }
  },
}

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/landing-page/LandingPage"
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/LoginPage"
}


route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import RequestPasswordResetPage from "@src/auth/email-and-pass/RequestPasswordResetPage",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import PasswordResetPage from "@src/auth/email-and-pass/PasswordResetPage",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import EmailVerificationPage from "@src/auth/email-and-pass/EmailVerificationPage",
}

action resendVerificationEmail {
  fn: import { resendVerificationEmail } from "@src/auth/operations",
  entities: [User]
}

action sendWelcomeEmailAction {
  fn: import { sendWelcomeEmailAction } from "@src/auth/operations",
  entities: [User]
}
//#endregion

//#region User
route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/user/AccountPage"
}

query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/user/operations",
  entities: [User]
}

action updateIsUserAdminById {
  fn: import { updateIsUserAdminById } from "@src/user/operations",
  entities: [User]
}
//#endregion

//#region Demo AI App
route DemoAppRoute { path: "/demo-app", to: DemoAppPage }
page DemoAppPage {
  authRequired: true,
  component: import DemoAppPage from "@src/demo-ai-app/DemoAppPage"
}

action generateGptResponse {
  fn: import { generateGptResponse } from "@src/demo-ai-app/operations",
  entities: [User, Task, GptResponse]
}

action createTask {
  fn: import { createTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

action deleteTask {
  fn: import { deleteTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

// Sentry test operations
action testSentryError {
  fn: import { testSentryError } from "@src/server/sentry-test-operation",
  entities: [User]
}

action testSentryMessage {
  fn: import { testSentryMessage } from "@src/server/sentry-test-operation",
  entities: [User]
}

query getGptResponses {
  fn: import { getGptResponses } from "@src/demo-ai-app/operations",
  entities: [User, GptResponse]
}

query getAllTasksByUser {
  fn: import { getAllTasksByUser } from "@src/demo-ai-app/operations",
  entities: [Task]
}
//#endregion

//#region Payment
route CheckoutResultRoute { path: "/checkout", to: CheckoutResultPage }
page CheckoutResultPage {
  authRequired: true,
  component: import CheckoutResultPage from "@src/payment/CheckoutResultPage"
}

route MailCheckoutResultRoute { path: "/mail/checkout", to: MailCheckoutResultPage }
page MailCheckoutResultPage {
  authRequired: true,
  component: import MailCheckoutResultPage from "@src/mail/MailCheckoutResultPage"
}

query getCustomerPortalUrl {
  fn: import { getCustomerPortalUrl } from  "@src/payment/operations",
  entities: [User]
}

action generateCheckoutSession {
  fn: import { generateCheckoutSession } from "@src/payment/operations",
  entities: [User]
}

api paymentsWebhook {
  fn: import { paymentsWebhook } from "@src/payment/webhook",
  entities: [User],
  middlewareConfigFn: import { paymentsMiddlewareConfigFn } from "@src/payment/webhook",
  httpRoute: (POST, "/payments-webhook"),
  auth: false
}
//#endregion

//#region File Upload
route FileUploadRoute { path: "/file-upload", to: FileUploadPage }
page FileUploadPage {
  authRequired: true,
  component: import FileUpload from "@src/file-upload/FileUploadPage"
}

action createFile {
  fn: import { createFile } from "@src/file-upload/operations",
  entities: [User, File]
}

query getAllFilesByUser {
  fn: import { getAllFilesByUser } from "@src/file-upload/operations",
  entities: [User, File]
}

query getPaginatedFilesByUser {
  fn: import { getPaginatedFilesByUser } from "@src/file-upload/operations",
  entities: [User, File]
}

query getDownloadFileSignedURL {
  fn: import { getDownloadFileSignedURL } from "@src/file-upload/operations",
  entities: [User, File]
}

query getThumbnailURL {
  fn: import { getThumbnailURL } from "@src/file-upload/operations",
  entities: [User, File]
}

query verifyFileUpload {
  fn: import { verifyFileUpload } from "@src/file-upload/operations",
  entities: [User, File]
}

action deleteFile {
  fn: import { deleteFile } from "@src/file-upload/operations",
  entities: [User, File]
}

action triggerPDFProcessing {
  fn: import { triggerPDFProcessing } from "@src/file-upload/operations",
  entities: [User, File]
}

// Phase 3: Extract specific pages from PDF
action extractPDFPages {
  fn: import { extractPDFPages } from "@src/file-upload/operations",
  entities: [File]
}

job processPDFMetadata {
  executor: PgBoss,
  perform: {
    fn: import { processPDFMetadata } from "@src/file-upload/operations"
  },
  entities: [File]
}

job cleanupOrphanedS3Files {
  executor: PgBoss,
  perform: {
    fn: import { cleanupOrphanedS3Files } from "@src/file-upload/operations"
  },
  entities: [File],
  schedule: {
    cron: "0 2 * * *" // Run daily at 2 AM to clean up orphaned S3 files
  }
}

// Phase 3: Clean up old extracted PDF files to prevent storage bloat
job cleanupExtractedFiles {
  executor: PgBoss,
  perform: {
    fn: import { cleanupOldExtractedFiles } from "@src/file-upload/cleanup"
  },
  entities: [File, MailPiece],
  schedule: {
    cron: "0 2 * * *" // Run daily at 2 AM
  }
}

job submitPaidMailToLob {
  executor: PgBoss,
  perform: {
    fn: import { submitPaidMailToLob } from "@src/mail/jobs"
  },
  entities: [MailPiece, MailAddress, File, MailPieceStatusHistory]
}

job verifyPaymentStatus {
  executor: PgBoss,
  perform: {
    fn: import { verifyPaymentStatus } from "@src/mail/paymentVerificationJob"
  },
  entities: [MailPiece, MailPieceStatusHistory, User],
  schedule: {
    cron: "*/5 * * * *" // Run every 5 minutes
  }
}

job monitorWebhookHealth {
  executor: PgBoss,
  perform: {
    fn: import { monitorWebhookHealth } from "@src/mail/webhookMonitoringJob"
  },
  entities: [MailPiece, User],
  schedule: {
    cron: "0 * * * *" // Run every hour
  }
}
//#endregion

//#region Address Management
route AddressManagementRoute { path: "/addresses", to: AddressManagementPage }
page AddressManagementPage {
  authRequired: true,
  component: import AddressManagementPage from "@src/address-management/AddressManagementPage"
}

action createMailAddress {
  fn: import { createMailAddress } from "@src/address-management/operations",
  entities: [User, MailAddress]
}

query getMailAddressesByUser {
  fn: import { getMailAddressesByUser } from "@src/address-management/operations",
  entities: [User, MailAddress]
}

query getPaginatedMailAddresses {
  fn: import { getPaginatedMailAddresses } from "@src/address-management/operations",
  entities: [User, MailAddress]
}

action updateMailAddress {
  fn: import { updateMailAddress } from "@src/address-management/operations",
  entities: [User, MailAddress]
}

action deleteMailAddress {
  fn: import { deleteMailAddress } from "@src/address-management/operations",
  entities: [User, MailAddress]
}

action setDefaultAddress {
  fn: import { setDefaultAddress } from "@src/address-management/operations",
  entities: [User, MailAddress]
}

action validateAddress {
  fn: import { validateAddress } from "@src/address-management/operations",
  entities: [User, MailAddress]
}
//#endregion

//#region Analytics
query getDailyStats {
  fn: import { getDailyStats } from "@src/analytics/operations",
  entities: [User, DailyStats]
}

job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/analytics/stats"
  },
  schedule: {
    cron: "0 * * * *" // every hour. useful in production
    // cron: "* * * * *" // every minute. useful for debugging
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}
//#endregion

//#region Admin Dashboard
route AdminRoute { path: "/admin", to: AnalyticsDashboardPage }
page AnalyticsDashboardPage {
  authRequired: true,
  component: import AnalyticsDashboardPage from "@src/admin/dashboards/analytics/AnalyticsDashboardPage"
}

route AdminUsersRoute { path: "/admin/users", to: AdminUsersPage }
page AdminUsersPage {
  authRequired: true,
  component: import AdminUsers from "@src/admin/dashboards/users/UsersDashboardPage"
}

route AdminSettingsRoute { path: "/admin/settings", to: AdminSettingsPage }
page AdminSettingsPage {
  authRequired: true,
  component: import AdminSettings from "@src/admin/elements/settings/SettingsPage"
}

route AdminAppSettingsRoute { path: "/admin/app-settings", to: AdminAppSettingsPage }
page AdminAppSettingsPage {
  authRequired: true,
  component: import AdminAppSettings from "@src/admin/dashboards/settings/AppSettingsPage"
}

route AdminDebugMailRoute { path: "/admin/debug-mail", to: DebugMailPage }
page DebugMailPage {
  authRequired: true,
  component: import DebugMailPage from "@src/admin/DebugMailPage"
}

route AdminMonitoringRoute { path: "/admin/monitoring", to: AdminMonitoringPage }
page AdminMonitoringPage {
  authRequired: true,
  component: import AdminMonitoring from "@src/admin/dashboards/monitoring/MonitoringDashboard"
}

route AdminCalendarRoute { path: "/admin/calendar", to: AdminCalendarPage }
page AdminCalendarPage {
  authRequired: true,
  component: import AdminCalendar from "@src/admin/elements/calendar/CalendarPage"
}


route AdminUIButtonsRoute { path: "/admin/ui/buttons", to: AdminUIButtonsPage }
page AdminUIButtonsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/ButtonsPage"
}

route SentryTestRoute { path: "/sentry-test", to: SentryTestPage }
page SentryTestPage {
  component: import SentryTestPage from "@src/client/SentryTestPage"
}

// Serve sitemap.xml as static content
api sitemap {
  fn: import { serveSitemap } from "@src/server/sitemap",
  httpRoute: (GET, "/sitemap.xml"),
  auth: false
}

route NotFoundRoute { path: "*", to: NotFoundPage }
page NotFoundPage {
  component: import NotFoundPage from "@src/client/components/NotFoundPage"
}

//#region Legal Pages
route PrivacyPolicyRoute { path: "/privacy", to: PrivacyPolicyPage }
page PrivacyPolicyPage {
  component: import PrivacyPolicyPage from "@src/legal/PrivacyPolicyPage"
}

route TermsOfServiceRoute { path: "/terms", to: TermsOfServicePage }
page TermsOfServicePage {
  component: import TermsOfServicePage from "@src/legal/TermsOfServicePage"
}
//#endregion

//#region Mail Creation Workflow
route MailCreationRoute { path: "/mail/create", to: MailCreationPage }
page MailCreationPage {
  authRequired: true,
  component: import MailCreationPage from "@src/mail/MailCreationPage"
}

route MailHistoryRoute { path: "/mail/history", to: MailHistoryPage }
page MailHistoryPage {
  authRequired: true,
  component: import MailHistoryPage from "@src/mail/MailHistoryPage"
}

route MailDetailsRoute { path: "/mail/:id", to: MailDetailsPage }
page MailDetailsPage {
  authRequired: true,
  component: import MailDetailsPage from "@src/mail/MailDetailsPage"
}

query getMailPieces {
  fn: import { getMailPieces } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, File, MailPieceStatusHistory]
}

query getMailPiece {
  fn: import { getMailPiece } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, File, MailPieceStatusHistory]
}

action createMailPiece {
  fn: import { createMailPiece } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, File, MailPieceStatusHistory]
}

action updateMailPiece {
  fn: import { updateMailPiece } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, File, MailPieceStatusHistory]
}

action deleteMailPiece {
  fn: import { deleteMailPiece } from "@src/mail/operations",
  entities: [MailPiece, MailPieceStatusHistory]
}

action updateMailPieceStatus {
  fn: import { updateMailPieceStatus } from "@src/mail/operations",
  entities: [MailPiece, MailPieceStatusHistory]
}

action createMailPaymentIntent {
  fn: import { createMailPaymentIntent } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, MailPieceStatusHistory]
}

action createMailCheckoutSession {
  fn: import { createMailCheckoutSession } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, MailPieceStatusHistory]
}

action confirmMailPayment {
  fn: import { confirmMailPayment } from "@src/mail/paymentConfirmation",
  entities: [MailPiece, MailPieceStatusHistory]
}

action refundMailPayment {
  fn: import { refundMailPayment } from "@src/mail/operations",
  entities: [MailPiece, MailPieceStatusHistory]
}

action submitMailPieceToLob {
  fn: import { submitMailPieceToLob } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, File, MailPieceStatusHistory]
}

action syncMailPieceStatus {
  fn: import { syncMailPieceStatus } from "@src/mail/operations",
  entities: [MailPiece, MailPieceStatusHistory]
}

action bulkDeleteMailPieces {
  fn: import { bulkDeleteMailPieces } from "@src/mail/operations",
  entities: [MailPiece, MailPieceStatusHistory]
}

api lobWebhook {
  fn: import { lobWebhook } from "@src/server/lob/webhook",
  entities: [MailPiece, MailPieceStatusHistory, WebhookMetrics],
  middlewareConfigFn: import { lobMiddlewareConfigFn } from "@src/server/lob/webhook",
  httpRoute: (POST, "/webhooks/lob"),
  auth: false
}

api healthCheck {
  fn: import { healthCheckEndpoint } from "@src/server/healthCheckEndpoint",
  httpRoute: (GET, "/health"),
  auth: false
}

api healthCheckSimple {
  fn: import { healthCheckEndpoint } from "@src/server/healthCheckEndpoint",
  httpRoute: (GET, "/health/simple"),
  auth: false
}

api healthCheckDetailed {
  fn: import { healthCheckEndpoint } from "@src/server/healthCheckEndpoint",
  httpRoute: (GET, "/health/detailed"),
  auth: false
}

api webhookHealthCheck {
  fn: import { webhookHealthCheck } from "@src/server/lob/webhook",
  httpRoute: (GET, "/api/webhooks/health"),
  auth: false
}

api webhookMetrics {
  fn: import { webhookMetricsEndpoint } from "@src/server/lob/webhook",
  entities: [WebhookMetrics],
  httpRoute: (GET, "/api/webhooks/metrics"),
  auth: true
}

api webhookEvents {
  fn: import { webhookEventsEndpoint } from "@src/server/lob/webhook",
  entities: [MailPieceStatusHistory, MailPiece],
  httpRoute: (GET, "/api/webhooks/events"),
  auth: true
}


//#region Contact Form Messages
// TODO:
// add functionality to allow users to send messages to admin
// and make them accessible via the admin dashboard
route AdminMessagesRoute { path: "/admin/messages", to: AdminMessagesPage }     
page AdminMessagesPage {
  authRequired: true,
  component: import AdminMessages from "@src/admin/dashboards/messages/MessagesPage"
}
//#endregion


query getAppSettings {
  fn: import { getAppSettings } from "@src/admin/operations",
  entities: [AppSettings]
}

action updateAppSetting {
  fn: import { updateAppSetting } from "@src/admin/operations",
  entities: [AppSettings]
}

query debugMailPieces {
  fn: import { debugMailPieces } from "@src/admin/operations",
  entities: [MailPiece, User, MailPieceStatusHistory]
}

action fixPaidOrders {
  fn: import { fixPaidOrders } from "@src/admin/operations",
  entities: [MailPiece, MailPieceStatusHistory, File, MailAddress]
}

action debugMailPieceStatus {
  fn: import { debugMailPieceStatus } from "@src/admin/operations",
  entities: [MailPiece, MailPieceStatusHistory, User]
}
//#endregion
