app OpenSaaS {
  wasp: {
    version: "^0.18.0"
  },

  title: "Postmarkr - Simple Mail Service",

  head: [
    "<link rel='icon' href='/favicon.ico' />",
    "<meta charset='utf-8' />",
    "<meta name='description' content='Postmarkr - Simple, reliable mail service for remote workers, startups, and small businesses. Send important documents, contracts, and packages with tracking and delivery confirmation.' />",
    "<meta name='author' content='Postmarkr' />",
    "<meta name='keywords' content='mail service, remote work, startup, small business, document delivery, business mail, package tracking, certified mail, business documents, contract delivery, startup mail, remote worker, business correspondence, mail tracking, document management' />",
    
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='Postmarkr - Simple Mail Service for Modern Businesses' />",
    "<meta property='og:site_name' content='Postmarkr' />",
    "<meta property='og:url' content='https://postmarkr.com' />",
    "<meta property='og:description' content='Simple, reliable mail service for remote workers, startups, and small businesses. Send important documents, contracts, and packages with tracking and delivery confirmation.' />",
    "<meta property='og:image' content='https://postmarkr.com/public-banner.webp' />",
    "<meta name='twitter:image' content='https://postmarkr.com/public-banner.webp' />",
    "<meta name='twitter:image:width' content='800' />",
    "<meta name='twitter:image:height' content='400' />",
    "<meta name='twitter:card' content='summary_large_image' />",
    "<meta name='twitter:title' content='Postmarkr - Simple Mail Service for Modern Businesses' />",
    "<meta name='twitter:description' content='Simple, reliable mail service for remote workers, startups, and small businesses. Send important documents, contracts, and packages with tracking and delivery confirmation.' />",
    // TODO: You can put your Plausible analytics scripts below (https://docs.opensaas.sh/guides/analytics/):
    // NOTE: Plausible does not use Cookies, so you can simply add the scripts here.
    // Google, on the other hand, does, so you must instead add the script dynamically
    // via the Cookie Consent component after the user clicks the "Accept" cookies button.
    "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.js'></script>",  // for production
    "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.local.js'></script>",  // for development
  ],

  // üîê Auth out of the box! https://wasp.sh/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // NOTE: If you decide to not use email auth, make sure to also delete the related routes and pages below.
      //   (RequestPasswordReset(Route|Page), PasswordReset(Route|Page), EmailVerification(Route|Page))
      email: {
        fromField: {
          name: "Postmarkr",
          email: "nathan@postmarkr.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email-and-pass/emails",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email-and-pass/emails",
        },
        userSignupFields: import { getEmailUserFields } from "@src/auth/userSignupFields",
      },
      // Uncomment to enable Google Auth (check https://wasp.sh/docs/auth/social-auth/google for setup instructions):
      // google: {
      //   userSignupFields: import { getGoogleUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getGoogleAuthConfig } from "@src/auth/userSignupFields",
      // },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/demo-app",
  },

  db: {
    // Run `wasp db seed` to seed the database with the seed functions below:
    seeds: [
      // Populates the database with a bunch of fake users to work with during development.
      import { seedMockUsers } from "@src/server/scripts/dbSeeds",
    ]
  },

  client: {
    rootComponent: import App from "@src/client/App",
  },

  server: {
    middlewareConfigFn: import { serverMiddlewareConfigFn } from "@src/server/setup",
  },

  emailSender: {
    provider: SMTP, // Use SMTP for production
    defaultFrom: {
      name: "Postmarkr",
      email: "nathan@postmarkr.com"
    }
  },
}

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/landing-page/LandingPage"
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import RequestPasswordResetPage from "@src/auth/email-and-pass/RequestPasswordResetPage",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import PasswordResetPage from "@src/auth/email-and-pass/PasswordResetPage",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import EmailVerificationPage from "@src/auth/email-and-pass/EmailVerificationPage",
}
//#endregion

//#region User
route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/user/AccountPage"
}

query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/user/operations",
  entities: [User]
}

action updateIsUserAdminById {
  fn: import { updateIsUserAdminById } from "@src/user/operations",
  entities: [User]
}
//#endregion

//#region Demo AI App
route DemoAppRoute { path: "/demo-app", to: DemoAppPage }
page DemoAppPage {
  authRequired: true,
  component: import DemoAppPage from "@src/demo-ai-app/DemoAppPage"
}

action generateGptResponse {
  fn: import { generateGptResponse } from "@src/demo-ai-app/operations",
  entities: [User, Task, GptResponse]
}

action createTask {
  fn: import { createTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

action deleteTask {
  fn: import { deleteTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

query getGptResponses {
  fn: import { getGptResponses } from "@src/demo-ai-app/operations",
  entities: [User, GptResponse]
}

query getAllTasksByUser {
  fn: import { getAllTasksByUser } from "@src/demo-ai-app/operations",
  entities: [Task]
}
//#endregion

//#region Payment
route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/payment/PricingPage"
}

route CheckoutResultRoute { path: "/checkout", to: CheckoutResultPage }
page CheckoutResultPage {
  authRequired: true,
  component: import CheckoutResultPage from "@src/payment/CheckoutResultPage"
}

route MailCheckoutResultRoute { path: "/mail/checkout", to: MailCheckoutResultPage }
page MailCheckoutResultPage {
  authRequired: true,
  component: import MailCheckoutResultPage from "@src/mail/MailCheckoutResultPage"
}

query getCustomerPortalUrl {
  fn: import { getCustomerPortalUrl } from  "@src/payment/operations",
  entities: [User]
}

action generateCheckoutSession {
  fn: import { generateCheckoutSession } from "@src/payment/operations",
  entities: [User]
}

api paymentsWebhook {
  fn: import { paymentsWebhook } from "@src/payment/webhook",
  entities: [User],
  middlewareConfigFn: import { paymentsMiddlewareConfigFn } from "@src/payment/webhook",
  httpRoute: (POST, "/payments-webhook")
}
//#endregion

//#region File Upload
route FileUploadRoute { path: "/file-upload", to: FileUploadPage }
page FileUploadPage {
  authRequired: true,
  component: import FileUpload from "@src/file-upload/FileUploadPage"
}

action createFile {
  fn: import { createFile } from "@src/file-upload/operations",
  entities: [User, File]
}

query getAllFilesByUser {
  fn: import { getAllFilesByUser } from "@src/file-upload/operations",
  entities: [User, File]
}

query getDownloadFileSignedURL {
  fn: import { getDownloadFileSignedURL } from "@src/file-upload/operations",
  entities: [User, File]
}

action deleteFile {
  fn: import { deleteFile } from "@src/file-upload/operations",
  entities: [User, File]
}

job processPDFMetadata {
  executor: PgBoss,
  perform: {
    fn: import { processPDFMetadata } from "@src/file-upload/operations"
  },
  entities: [File]
}
//#endregion

//#region Address Management
route AddressManagementRoute { path: "/addresses", to: AddressManagementPage }
page AddressManagementPage {
  authRequired: true,
  component: import AddressManagementPage from "@src/address-management/AddressManagementPage"
}

action createMailAddress {
  fn: import { createMailAddress } from "@src/address-management/operations",
  entities: [User, MailAddress]
}

query getMailAddressesByUser {
  fn: import { getMailAddressesByUser } from "@src/address-management/operations",
  entities: [User, MailAddress]
}

action updateMailAddress {
  fn: import { updateMailAddress } from "@src/address-management/operations",
  entities: [User, MailAddress]
}

action deleteMailAddress {
  fn: import { deleteMailAddress } from "@src/address-management/operations",
  entities: [User, MailAddress]
}

action setDefaultAddress {
  fn: import { setDefaultAddress } from "@src/address-management/operations",
  entities: [User, MailAddress]
}
//#endregion

//#region Analytics
query getDailyStats {
  fn: import { getDailyStats } from "@src/analytics/operations",
  entities: [User, DailyStats]
}

job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/analytics/stats"
  },
  schedule: {
    cron: "0 * * * *" // every hour. useful in production
    // cron: "* * * * *" // every minute. useful for debugging
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}
//#endregion

//#region Admin Dashboard
route AdminRoute { path: "/admin", to: AnalyticsDashboardPage }
page AnalyticsDashboardPage {
  authRequired: true,
  component: import AnalyticsDashboardPage from "@src/admin/dashboards/analytics/AnalyticsDashboardPage"
}

route AdminUsersRoute { path: "/admin/users", to: AdminUsersPage }
page AdminUsersPage {
  authRequired: true,
  component: import AdminUsers from "@src/admin/dashboards/users/UsersDashboardPage"
}

route AdminSettingsRoute { path: "/admin/settings", to: AdminSettingsPage }
page AdminSettingsPage {
  authRequired: true,
  component: import AdminSettings from "@src/admin/elements/settings/SettingsPage"
}

route AdminCalendarRoute { path: "/admin/calendar", to: AdminCalendarPage }
page AdminCalendarPage {
  authRequired: true,
  component: import AdminCalendar from "@src/admin/elements/calendar/CalendarPage"
}


route AdminUIButtonsRoute { path: "/admin/ui/buttons", to: AdminUIButtonsPage }
page AdminUIButtonsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/ButtonsPage"
}

route SentryTestRoute { path: "/sentry-test", to: SentryTestPage }
page SentryTestPage {
  component: import SentryTestPage from "@src/client/SentryTestPage"
}

route NotFoundRoute { path: "*", to: NotFoundPage }
page NotFoundPage {
  component: import NotFoundPage from "@src/client/components/NotFoundPage"
}
//#endregion

//#region Mail Creation Workflow
route MailCreationRoute { path: "/mail/create", to: MailCreationPage }
page MailCreationPage {
  authRequired: true,
  component: import MailCreationPage from "@src/mail/MailCreationPage"
}

route MailHistoryRoute { path: "/mail/history", to: MailHistoryPage }
page MailHistoryPage {
  authRequired: true,
  component: import MailHistoryPage from "@src/mail/MailHistoryPage"
}

route MailDetailsRoute { path: "/mail/:id", to: MailDetailsPage }
page MailDetailsPage {
  authRequired: true,
  component: import MailDetailsPage from "@src/mail/MailDetailsPage"
}

query getMailPieces {
  fn: import { getMailPieces } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, File, MailPieceStatusHistory]
}

query getMailPiece {
  fn: import { getMailPiece } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, File, MailPieceStatusHistory]
}

action createMailPiece {
  fn: import { createMailPiece } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, File, MailPieceStatusHistory]
}

action updateMailPiece {
  fn: import { updateMailPiece } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, File, MailPieceStatusHistory]
}

action deleteMailPiece {
  fn: import { deleteMailPiece } from "@src/mail/operations",
  entities: [MailPiece, MailPieceStatusHistory]
}

action updateMailPieceStatus {
  fn: import { updateMailPieceStatus } from "@src/mail/operations",
  entities: [MailPiece, MailPieceStatusHistory]
}

action createMailPaymentIntent {
  fn: import { createMailPaymentIntent } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, MailPieceStatusHistory]
}

action createMailCheckoutSession {
  fn: import { createMailCheckoutSession } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, MailPieceStatusHistory]
}

action confirmMailPayment {
  fn: import { confirmMailPayment } from "@src/mail/operations",
  entities: [MailPiece, MailPieceStatusHistory]
}

action refundMailPayment {
  fn: import { refundMailPayment } from "@src/mail/operations",
  entities: [MailPiece, MailPieceStatusHistory]
}

action submitMailPieceToLob {
  fn: import { submitMailPieceToLob } from "@src/mail/operations",
  entities: [MailPiece, MailAddress, File, MailPieceStatusHistory]
}

action syncMailPieceStatus {
  fn: import { syncMailPieceStatus } from "@src/mail/operations",
  entities: [MailPiece, MailPieceStatusHistory]
}

action bulkDeleteMailPieces {
  fn: import { bulkDeleteMailPieces } from "@src/mail/operations",
  entities: [MailPiece, MailPieceStatusHistory]
}

api lobWebhook {
  fn: import { lobWebhook } from "@src/server/lob/webhook",
  middlewareConfigFn: import { lobMiddlewareConfigFn } from "@src/server/lob/webhook",
  httpRoute: (POST, "/webhooks/lob")
}

api validateAddress {
  fn: import { validateAddressEndpoint } from "@src/server/lob/addressValidation",
  httpRoute: (POST, "/api/validate-address")
}

api healthCheck {
  fn: import { healthCheckEndpoint } from "@src/server/healthCheck",
  httpRoute: (GET, "/health")
}

api webhookHealthCheck {
  fn: import { webhookHealthCheck } from "@src/server/lob/webhook",
  httpRoute: (GET, "/api/webhooks/health")
}

api webhookMetrics {
  fn: import { webhookMetricsEndpoint } from "@src/server/lob/webhook",
  httpRoute: (GET, "/api/webhooks/metrics")
}

api webhookEvents {
  fn: import { webhookEventsEndpoint } from "@src/server/lob/webhook",
  httpRoute: (GET, "/api/webhooks/events")
}


//#region Contact Form Messages
// TODO:
// add functionality to allow users to send messages to admin
// and make them accessible via the admin dashboard
route AdminMessagesRoute { path: "/admin/messages", to: AdminMessagesPage }     
page AdminMessagesPage {
  authRequired: true,
  component: import AdminMessages from "@src/admin/dashboards/messages/MessagesPage"
}
//#endregion

//#region Beta Access Management
route UpgradeAccessRoute { path: "/upgrade", to: UpgradeAccessPage }
page UpgradeAccessPage {
  authRequired: true,
  component: import UpgradeAccessPage from "@src/beta/UpgradeAccessPage"
}

action grantBetaAccess {
  fn: import { grantBetaAccess } from "@src/beta/operations",
  entities: [User]
}

action grantFullAccess {
  fn: import { grantFullAccess } from "@src/beta/operations",
  entities: [User]
}

query checkUserAccess {
  fn: import { checkUserAccess } from "@src/beta/operations",
  entities: [User]
}
//#endregion
