---
import { logos } from 'virtual:starlight/user-images';
import config from 'virtual:starlight/user-config';

const appUrl = 'https://postmarkr.com';
const { siteTitle } = Astro.props;
---
<header class="sticky-header">
  <div class="header-container">
    <div class="unified-header-container">
  <a href={appUrl} class="site-title sl-flex">
    {
      config.logo && logos.dark && (
        <>
          <img
            class:list={{ 'light:sl-hidden': !('src' in config.logo) }}
            alt={config.logo.alt}
            src={logos.dark.src}
            width={logos.dark.width}
            height={logos.dark.height}
          />
          {/* Show light alternate if a user configure both light and dark logos. */}
          {!('src' in config.logo) && (
            <img
              class="dark:sl-hidden"
              alt={config.logo.alt}
              src={logos.light?.src}
              width={logos.light?.width}
              height={logos.light?.height}
            />
          )}
        </>
      )
    }
    <span class:list={{ 'sr-only': config.logo?.replacesTitle }} class="logo-text font-satoshi">
      {siteTitle}
    </span>
  </a>
  
  <!-- Search Bar -->
  <div class="search-container">
    <div class="search-bar">
      <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
      <input type="text" placeholder="Search" class="search-input" />
      <div class="search-shortcut">Ctrl K</div>
    </div>
  </div>

  <!-- Right side navigation -->
  <div class="right-nav">
    <a href="/rss.xml" class="rss-link" aria-label="RSS Feed">
      <svg class="rss-icon" viewBox="0 0 24 24" fill="currentColor">
        <circle cx="6" cy="18" r="2"></circle>
        <path d="M4 4.84A9 9 0 0 1 19.16 20M4 4.84A9 9 0 0 0 19.16 20M4 4.84A5 5 0 0 1 19.16 16"></path>
      </svg>
    </a>
  </div>

  <!-- Mobile Menu Button -->
  <button class="mobile-menu-button" id="mobile-menu-button" aria-label="Open menu">
    <svg class="hamburger-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <line x1="3" y1="6" x2="21" y2="6"></line>
      <line x1="3" y1="12" x2="21" y2="12"></line>
      <line x1="3" y1="18" x2="21" y2="18"></line>
    </svg>
  </button>

  <!-- Mobile Menu Overlay -->
  <div class="mobile-menu-overlay" id="mobile-menu-overlay">
    <div class="mobile-menu-content">
      <div class="mobile-menu-header">
        <span class="mobile-menu-title">Menu</span>
        <button class="mobile-menu-close" id="mobile-menu-close" aria-label="Close menu">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
      <nav class="mobile-nav">
        <a href={appUrl} class="mobile-nav-link">Home</a>
        <a href="/rss.xml" class="mobile-nav-link">RSS Feed</a>
      </nav>
    </div>
  </div>
    </div>
  </div>
</header>

<style>
  .sticky-header {
    position: sticky;
    top: 0;
    z-index: 50;
    transition: all 0.3s ease;
  }

  .sticky-header.scrolled {
    top: 1rem;
  }

  .header-container {
    transition: all 0.3s ease;
    margin: 0;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(16px);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .header-container.scrolled {
    margin: 0 0.5rem 0 0.5rem;
    border-radius: 9999px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    border: 1px solid rgba(0, 0, 0, 0.1);
  }

  /* Responsive margins to match main site */
  @media (min-width: 48rem) {
    .header-container.scrolled {
      margin: 0 1rem 0 1rem;
    }
  }

  @media (min-width: 64rem) {
    .header-container.scrolled {
      margin: 0 5rem 0 5rem;
    }
  }

  .unified-header-container {
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    align-items: center;
    width: 100%;
    gap: 2rem;
    font-family: 'Satoshi', system-ui, sans-serif;
    padding: 1.5rem 2rem;
    transition: all 0.3s ease;
  }

  .header-container.scrolled .unified-header-container {
    padding: 0.75rem 1.5rem;
  }

	.site-title {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		color: hsl(var(--foreground));
		font-size: 1rem;
		font-weight: 600;
		text-decoration: none;
		white-space: nowrap;
    transition: all 0.2s ease;
	}

  .site-title:hover {
    color: hsl(var(--primary));
    transform: translateY(-1px);
  }

  .logo-text {
    font-weight: 600;
    color: hsl(var(--foreground));
    font-family: 'Satoshi', system-ui, sans-serif;
  }

	img {
		width: auto;
		max-width: 100%;
		object-fit: contain;
		object-position: 0 50%;
    transition: transform 0.2s ease;
	}

  .site-title:hover img {
    transform: scale(1.05);
  }

  /* Responsive logo scaling to match main site */
  .site-title img {
    height: 2rem;
    transition: height 0.3s ease;
  }

  .header-container.scrolled .site-title img {
    height: 1.75rem;
  }

  /* Search Bar Styles */
  .search-container {
    justify-self: center;
    width: 100%;
    max-width: 500px;
  }

  .search-bar {
    position: relative;
    display: flex;
    align-items: center;
    background: white;
    border-radius: 8px;
    border: 1px solid hsl(var(--border));
    padding: 0.5rem 0.75rem;
    transition: all 0.2s ease;
  }

  .search-bar:focus-within {
    border-color: hsl(var(--primary));
    box-shadow: 0 0 0 2px hsla(var(--primary) / 0.2);
  }

  .search-icon {
    width: 1rem;
    height: 1rem;
    color: hsl(var(--muted-foreground));
    margin-right: 0.5rem;
  }

  .search-input {
    flex: 1;
    border: none;
    outline: none;
    background: transparent;
    color: hsl(var(--foreground));
    font-size: 0.875rem;
  }

  .search-input::placeholder {
    color: hsl(var(--muted-foreground));
  }

  .search-shortcut {
    background: hsl(var(--muted));
    color: hsl(var(--muted-foreground));
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
  }

  /* Right Navigation Styles */
  .right-nav {
    display: flex;
    align-items: center;
    justify-self: end;
    gap: 1rem;
  }

  .rss-link {
    color: hsl(var(--primary));
    transition: color 0.2s ease;
  }

  .rss-link:hover {
    color: hsl(var(--secondary));
  }

  .rss-icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  .blog-title {
    color: hsl(var(--primary));
    font-weight: 600;
    font-size: 0.875rem;
  }

  .mobile-menu-button {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    color: hsl(var(--foreground));
    transition: color 0.2s ease;
  }

  .mobile-menu-button:hover {
    color: hsl(var(--primary));
  }

  .hamburger-icon {
    width: 1.5rem;
    height: 1.5rem;
  }

  .mobile-menu-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    z-index: 1000;
    display: none;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .mobile-menu-overlay.open {
    display: flex;
    opacity: 1;
  }

  .mobile-menu-content {
    position: absolute;
    top: 0;
    right: 0;
    width: 16rem;
    height: 100%;
    background: hsl(var(--background));
    border-left: 1px solid hsl(var(--border));
    transform: translateX(100%);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
  }

  .mobile-menu-overlay.open .mobile-menu-content {
    transform: translateX(0);
  }

  .mobile-menu-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid hsl(var(--border));
  }

  .mobile-menu-title {
    font-weight: 600;
    font-size: 1.125rem;
    color: hsl(var(--foreground));
  }

  .mobile-menu-close {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    color: hsl(var(--foreground));
    transition: color 0.2s ease;
  }

  .mobile-menu-close:hover {
    color: hsl(var(--primary));
  }

  .mobile-menu-close svg {
    width: 1.25rem;
    height: 1.25rem;
  }

  .mobile-nav {
    display: flex;
    flex-direction: column;
    padding: 1rem 0;
  }

  .mobile-nav-link {
    display: block;
    padding: 0.75rem 1.5rem;
    color: hsl(var(--foreground));
    text-decoration: none;
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.2s ease;
    border-left: 3px solid transparent;
  }

  .mobile-nav-link:hover,
  .mobile-nav-link.active {
    color: hsl(var(--primary));
    background: hsl(var(--accent));
    border-left-color: hsl(var(--primary));
  }

  .mobile-nav-link.cta-link {
    margin: 0.5rem 1.5rem;
    padding: 0.75rem 1.25rem;
    border: 1.5px solid hsl(var(--primary));
    border-radius: calc(var(--radius) - 2px);
    text-align: center;
    background: transparent;
    position: relative;
    overflow: hidden;
  }

  .mobile-nav-link.cta-link::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)));
    opacity: 0;
    transition: opacity 0.2s ease;
    z-index: -1;
  }

  .mobile-nav-link.cta-link:hover {
    color: hsl(var(--primary-foreground));
    transform: translateY(-1px);
    box-shadow: 0 4px 16px hsla(239 84% 67% / 0.25);
  }

  .mobile-nav-link.cta-link:hover::before {
    opacity: 1;
  }

  .nav-link {
    color: hsl(var(--foreground));
    text-decoration: none;
    font-size: 0.9375rem;
    font-weight: 500;
    transition: all 0.2s ease;
    white-space: nowrap;
    position: relative;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)));
    transform: scaleX(0);
    transition: transform 0.2s ease;
  }

  .nav-link:hover::after,
  .nav-link.active::after {
    transform: scaleX(1);
  }

  .nav-link:hover,
  .nav-link.active {
    color: hsl(var(--primary));
  }

  .cta-link {
    padding: 0.625rem 1.25rem;
    border: 1.5px solid hsl(var(--primary));
    border-radius: calc(var(--radius) - 2px);
    transition: all 0.2s ease;
    background: transparent;
    position: relative;
    overflow: hidden;
  }

  .cta-link::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)));
    opacity: 0;
    transition: opacity 0.2s ease;
    z-index: -1;
  }

  .cta-link::after {
    display: none;
  }

  .cta-link:hover {
    color: hsl(var(--primary-foreground));
    transform: translateY(-2px);
    box-shadow: 0 4px 16px hsla(239 84% 67% / 0.25);
  }

  .cta-link:hover::before {
    opacity: 1;
  }

  @media (max-width: 64rem) {
    .unified-header-container {
      display: flex;
      justify-content: space-between;
      padding: 0.75rem 1.5rem;
    }

    .search-container {
      display: none;
    }

    .right-nav {
      display: none;
    }

    .mobile-menu-button {
      display: block;
    }

    .header-container.scrolled .unified-header-container {
      padding: 0.5rem 1rem;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .header-container {
      background: rgba(0, 0, 0, 0.9);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .header-container.scrolled {
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
  }
</style>

<script>
  // Add scroll effect to header
  function handleScroll() {
    const header = document.querySelector('.sticky-header');
    const headerContainer = document.querySelector('.header-container');
    const scrolled = window.scrollY > 0;
    
    if (scrolled) {
      header?.classList.add('scrolled');
      headerContainer?.classList.add('scrolled');
    } else {
      header?.classList.remove('scrolled');
      headerContainer?.classList.remove('scrolled');
    }
  }

  // Throttle scroll events for better performance
  let ticking = false;
  function throttledScroll() {
    if (!ticking) {
      requestAnimationFrame(() => {
        handleScroll();
        ticking = false;
      });
      ticking = true;
    }
  }

  // Mobile menu functionality
  function initMobileMenu() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');
    const mobileMenuClose = document.getElementById('mobile-menu-close');
    const mobileMenuLinks = document.querySelectorAll('.mobile-nav-link');

    function openMobileMenu() {
      mobileMenuOverlay?.classList.add('open');
      document.body.style.overflow = 'hidden';
    }

    function closeMobileMenu() {
      mobileMenuOverlay?.classList.remove('open');
      document.body.style.overflow = '';
    }

    // Event listeners
    mobileMenuButton?.addEventListener('click', openMobileMenu);
    mobileMenuClose?.addEventListener('click', closeMobileMenu);
    mobileMenuOverlay?.addEventListener('click', (e) => {
      if (e.target === mobileMenuOverlay) {
        closeMobileMenu();
      }
    });

    // Close menu when clicking on links
    mobileMenuLinks.forEach(link => {
      link.addEventListener('click', closeMobileMenu);
    });

    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileMenuOverlay?.classList.contains('open')) {
        closeMobileMenu();
      }
    });
  }

  // Search functionality
  function initSearch() {
    const searchInput = document.querySelector('.search-input');
    
    // Focus search on Ctrl+K
    document.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        (searchInput as HTMLInputElement)?.focus();
      }
    });

    // Handle search input
    searchInput?.addEventListener('keydown', (e: Event) => {
      const keyboardEvent = e as KeyboardEvent;
      if (keyboardEvent.key === 'Enter') {
        const target = keyboardEvent.target as HTMLInputElement;
        if (target) {
          const query = target.value.trim();
          if (query) {
            // Redirect to main site search
            window.location.href = `https://postmarkr.com/search?q=${encodeURIComponent(query)}`;
          }
        }
      }
    });
  }

  // Add event listener when component mounts
  document.addEventListener('DOMContentLoaded', () => {
    window.addEventListener('scroll', throttledScroll);
    // Initial check
    handleScroll();
    // Initialize mobile menu
    initMobileMenu();
    // Initialize search
    initSearch();
  });
</script>
